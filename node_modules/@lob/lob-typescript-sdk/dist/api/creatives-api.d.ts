/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import { Configuration } from "../configuration";
import { RequestArgs, BaseAPI } from "../base";
import { CreativePatch } from "../models";
import { CreativeResponse } from "../models";
import { CreativeWritable } from "../models";
/**
 * CreativesApi - axios parameter creator
 * @export
 */
export declare const CreativesApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Creates a new creative with the provided properties
     * @summary create
     * @param {CreativeWritable} creativeWritable
     * @param {'native' | 'match'} [xLangOutput] * &#x60;native&#x60; - Translate response to the native language of the country in the request * &#x60;match&#x60; - match the response to the language in the request  Default response is in English.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    creativeCreate: (creativeWritable: CreativeWritable, xLangOutput?: "match" | "native" | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves the details of an existing creative. You need only supply the unique creative identifier that was returned upon creative creation.
     * @summary get
     * @param {string} crvId id of the creative
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    creativeRetrieve: (crvId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update the details of an existing creative. You need only supply the unique identifier that was returned upon creative creation.
     * @summary update
     * @param {string} crvId id of the creative
     * @param {CreativePatch} creativePatch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    creativeUpdate: (crvId: string, creativePatch: CreativePatch, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CreativesApi - functional programming interface
 * @export
 */
export declare const CreativesApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Creates a new creative with the provided properties
     * @summary create
     * @param {CreativeWritable} creativeWritable
     * @param {'native' | 'match'} [xLangOutput] * &#x60;native&#x60; - Translate response to the native language of the country in the request * &#x60;match&#x60; - match the response to the language in the request  Default response is in English.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    creativeCreate(creativeWritable: CreativeWritable, xLangOutput?: "match" | "native" | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<CreativeResponse>>;
    /**
     * Retrieves the details of an existing creative. You need only supply the unique creative identifier that was returned upon creative creation.
     * @summary get
     * @param {string} crvId id of the creative
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    creativeRetrieve(crvId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<CreativeResponse>>;
    /**
     * Update the details of an existing creative. You need only supply the unique identifier that was returned upon creative creation.
     * @summary update
     * @param {string} crvId id of the creative
     * @param {CreativePatch} creativePatch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    creativeUpdate(crvId: string, creativePatch: CreativePatch, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<CreativeResponse>>;
};
/**
 * CreativesApi - object-oriented interface
 * @export
 * @class CreativesApi
 * @extends {BaseAPI}
 */
export declare class CreativesApi extends BaseAPI {
    /**
     * Creates a new creative with the provided properties
     * @summary create
     * @param {CreativeWritable} creativeWritable
     * @param {'native' | 'match'} [xLangOutput] * &#x60;native&#x60; - Translate response to the native language of the country in the request * &#x60;match&#x60; - match the response to the language in the request  Default response is in English.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreativesApi
     */
    create(creativeWritable: CreativeWritable, xLangOutput?: "native" | "match", options?: AxiosRequestConfig): Promise<CreativeResponse>;
    /**
     * Retrieves the details of an existing creative. You need only supply the unique creative identifier that was returned upon creative creation.
     * @summary get
     * @param {string} crvId id of the creative
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreativesApi
     */
    get(crvId: string, options?: AxiosRequestConfig): Promise<CreativeResponse>;
    /**
     * Update the details of an existing creative. You need only supply the unique identifier that was returned upon creative creation.
     * @summary update
     * @param {string} crvId id of the creative
     * @param {CreativePatch} creativePatch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreativesApi
     */
    update(crvId: string, creativePatch: CreativePatch, options?: AxiosRequestConfig): Promise<CreativeResponse>;
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
