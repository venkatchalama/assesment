
  /**
   * @license
   * author: Lob <support@lob.com> (https://lob.com/)
   * Lob Typescript SDK v1.3.2
   */

import globalAxios from 'axios';

/* tslint:disable */
const BASE_PATH = "https://api.lob.com/v1".replace(/\/+$/, "");
/**
 *
 * @export
 * @class BaseAPI
 */
class BaseAPI {
    constructor(configuration, basePath = BASE_PATH, axios = globalAxios) {
        this.basePath = basePath;
        this.axios = axios;
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
}
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
class RequiredError extends Error {
    constructor(field, msg) {
        super(msg);
        this.field = field;
        this.name = "RequiredError";
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/**
 *
 * @export
 */
const DUMMY_BASE_URL = "https://example.com";
/**
 *
 * @throws {RequiredError}
 * @export
 */
const assertParamExists = function (functionName, paramName, paramValue) {
    if (paramValue === null || paramValue === undefined) {
        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);
    }
};
/**
 *
 * @export
 */
const setBasicAuthToObject = function (object, configuration) {
    if (configuration && (configuration.username || configuration.password)) {
        object["auth"] = {
            username: configuration.username,
            password: configuration.password,
        };
    }
};
/**
 *
 * @export
 */
const setSearchParams = function (url, ...objects) {
    const searchParams = new URLSearchParams(url.search);
    for (const object of objects) {
        for (const key in object) {
            if (Array.isArray(object[key])) {
                searchParams.delete(key);
                for (const item of object[key]) {
                    searchParams.append(key, item);
                }
            }
            else {
                searchParams.set(key, object[key]);
            }
        }
    }
    url.search = searchParams.toString();
};
/**
 *
 * @export
 */
const serializeDataIfNeeded = function (value, requestOptions, configuration) {
    const nonString = typeof value !== "string";
    const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(requestOptions.headers["Content-Type"])
        : nonString;
    return needsSerialization
        ? JSON.stringify(value !== undefined ? value : {})
        : value || "";
};
/**
 *
 * @export
 */
const toPathString = function (url) {
    return url.pathname + url.search + url.hash;
};
/**
 *
 * @export
 */
const createRequestFunction = function (axiosArgs, globalAxios, BASE_PATH, configuration) {
    return (axios = globalAxios, basePath = BASE_PATH) => {
        axiosArgs.options = Object.assign(Object.assign({}, axiosArgs.options), {
            options: {
                "User-Agent": `${process.env.npm_package_name}/${process.env.npm_package_version}`,
            },
        });
        const axiosRequestArgs = Object.assign(Object.assign({}, axiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + axiosArgs.url });
        return axios.request(axiosRequestArgs);
    };
};
/**
 * Converts an input value to a string. When the input value is an object, it is converted to a JSON string.
 * @export
 */
const valueToString = function valueToString(value) {
    let out;
    switch (typeof value) {
        case "object":
            out = JSON.stringify(value);
            break;
        default:
            out = String(value);
            break;
    }
    return out;
};
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class Address
 */
class Address {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.description) !== "undefined") {
            this.description = input.description;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.name) !== "undefined") {
            this.name = input.name;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.company) !== "undefined") {
            this.company = input.company;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.phone) !== "undefined") {
            this.phone = input.phone;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.email) !== "undefined") {
            this.email = input.email;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.metadata) !== "undefined") {
            this.metadata = input.metadata;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.address_line1) !== "undefined") {
            this.address_line1 = input.address_line1;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.address_line2) !== "undefined") {
            this.address_line2 = input.address_line2;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.address_city) !== "undefined") {
            this.address_city = input.address_city;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.address_state) !== "undefined") {
            this.address_state = input.address_state;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.address_zip) !== "undefined") {
            this.address_zip = input.address_zip;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.address_country) !== "undefined") {
            this.address_country = input.address_country;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.date_created) !== "undefined") {
            this.date_created = input.date_created;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.date_modified) !== "undefined") {
            this.date_modified = input.date_modified;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.deleted) !== "undefined") {
            this.deleted = input.deleted;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.recipient_moved) !== "undefined") {
            this.recipient_moved = input.recipient_moved;
        }
    }
    get id() {
        return (this._id || undefined);
    }
    set id(newValue) {
        if (newValue && !/^adr_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid id provided");
        }
        this._id = newValue;
    }
    get address_state() {
        return (this._address_state || undefined);
    }
    set address_state(newValue) {
        if (newValue && !/^[a-zA-Z]{2}$/.test(newValue)) {
            throw new Error("Invalid address_state provided");
        }
        this._address_state = newValue;
    }
    get address_zip() {
        return (this._address_zip || undefined);
    }
    set address_zip(newValue) {
        if (newValue && !/^\d{5}(-\d{4})?$/.test(newValue)) {
            throw new Error("Invalid address_zip provided");
        }
        this._address_zip = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var AddressObjectEnum;
(function (AddressObjectEnum) {
    AddressObjectEnum["Address"] = "address";
})(AddressObjectEnum || (AddressObjectEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Object returned upon deleting an address
 * @export
 * @class AddressDeletion
 */
class AddressDeletion {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.deleted) !== "undefined") {
            this.deleted = input.deleted;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
    }
    get id() {
        return (this._id || undefined);
    }
    set id(newValue) {
        if (newValue && !/^adr_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid id provided");
        }
        this._id = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var AddressDeletionObjectEnum;
(function (AddressDeletionObjectEnum) {
    AddressDeletionObjectEnum["AddressDeleted"] = "address_deleted";
})(AddressDeletionObjectEnum || (AddressDeletionObjectEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class AddressDomestic
 */
class AddressDomestic {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.address_line1) !== "undefined") {
            this.address_line1 = input.address_line1;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.address_line2) !== "undefined") {
            this.address_line2 = input.address_line2;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.address_city) !== "undefined") {
            this.address_city = input.address_city;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.address_state) !== "undefined") {
            this.address_state = input.address_state;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.address_zip) !== "undefined") {
            this.address_zip = input.address_zip;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.description) !== "undefined") {
            this.description = input.description;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.name) !== "undefined") {
            this.name = input.name;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.company) !== "undefined") {
            this.company = input.company;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.phone) !== "undefined") {
            this.phone = input.phone;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.email) !== "undefined") {
            this.email = input.email;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.address_country) !== "undefined") {
            this.address_country = input.address_country;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.metadata) !== "undefined") {
            this.metadata = input.metadata;
        }
    }
    get address_country() {
        return (this._address_country || null || undefined);
    }
    set address_country(newValue) {
        if (newValue && !/US/.test(newValue)) {
            throw new Error("Invalid address_country provided");
        }
        this._address_country = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class AddressDomesticExpanded
 */
class AddressDomesticExpanded {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.address_line1) !== "undefined") {
            this.address_line1 = input.address_line1;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.address_line2) !== "undefined") {
            this.address_line2 = input.address_line2;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.address_city) !== "undefined") {
            this.address_city = input.address_city;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.address_state) !== "undefined") {
            this.address_state = input.address_state;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.address_zip) !== "undefined") {
            this.address_zip = input.address_zip;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.description) !== "undefined") {
            this.description = input.description;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.name) !== "undefined") {
            this.name = input.name;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.company) !== "undefined") {
            this.company = input.company;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.phone) !== "undefined") {
            this.phone = input.phone;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.email) !== "undefined") {
            this.email = input.email;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.address_country) !== "undefined") {
            this.address_country = input.address_country;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.metadata) !== "undefined") {
            this.metadata = input.metadata;
        }
    }
    get address_country() {
        return (this._address_country || undefined);
    }
    set address_country(newValue) {
        if (newValue && !/UNITED STATES/.test(newValue)) {
            throw new Error("Invalid address_country provided");
        }
        this._address_country = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class AddressEditable
 */
class AddressEditable {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.address_line1) !== "undefined") {
            this.address_line1 = input.address_line1;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.address_line2) !== "undefined") {
            this.address_line2 = input.address_line2;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.address_city) !== "undefined") {
            this.address_city = input.address_city;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.address_state) !== "undefined") {
            this.address_state = input.address_state;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.address_zip) !== "undefined") {
            this.address_zip = input.address_zip;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.address_country) !== "undefined") {
            this.address_country = input.address_country;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.description) !== "undefined") {
            this.description = input.description;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.name) !== "undefined") {
            this.name = input.name;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.company) !== "undefined") {
            this.company = input.company;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.phone) !== "undefined") {
            this.phone = input.phone;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.email) !== "undefined") {
            this.email = input.email;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.metadata) !== "undefined") {
            this.metadata = input.metadata;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class AddressList
 */
class AddressList {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.data) !== "undefined") {
            this.data = input.data;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.next_url) !== "undefined") {
            this.next_url = input.next_url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.previous_url) !== "undefined") {
            this.previous_url = input.previous_url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.count) !== "undefined") {
            this.count = input.count;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.total_count) !== "undefined") {
            this.total_count = input.total_count;
        }
    }
    get nextPageToken() {
        var _a;
        if (!this.next_url) {
            return undefined;
        }
        return (_a = this.next_url
            .split("?")[1]
            .split("&")
            .find((raw) => raw.includes("after="))) === null || _a === void 0 ? void 0 : _a.split("=")[1];
    }
    get previousPageToken() {
        var _a;
        if (!this.previous_url) {
            return undefined;
        }
        return (_a = this.previous_url
            .split("?")[1]
            .split("&")
            .find((raw) => raw.includes("before="))) === null || _a === void 0 ? void 0 : _a.split("=")[1];
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class BankAccount
 */
class BankAccount {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.description) !== "undefined") {
            this.description = input.description;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.routing_number) !== "undefined") {
            this.routing_number = input.routing_number;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.account_number) !== "undefined") {
            this.account_number = input.account_number;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.account_type) !== "undefined") {
            this.account_type = input.account_type;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.signatory) !== "undefined") {
            this.signatory = input.signatory;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.metadata) !== "undefined") {
            this.metadata = input.metadata;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.signature_url) !== "undefined") {
            this.signature_url = input.signature_url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.bank_name) !== "undefined") {
            this.bank_name = input.bank_name;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.verified) !== "undefined") {
            this.verified = input.verified;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.date_created) !== "undefined") {
            this.date_created = input.date_created;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.date_modified) !== "undefined") {
            this.date_modified = input.date_modified;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.deleted) !== "undefined") {
            this.deleted = input.deleted;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
    }
    get id() {
        return this._id;
    }
    set id(newValue) {
        if (newValue && !/^bank_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid id provided");
        }
        this._id = newValue;
    }
    get signature_url() {
        return (this._signature_url || null || undefined);
    }
    set signature_url(newValue) {
        if (newValue &&
            !/^https:\/\/lob-assets\.com\/(letters|postcards|bank-accounts|checks|self-mailers|cards)\/[a-z]{3,4}_[a-z0-9]{15,16}(\.pdf|_thumb_[a-z]+_[0-9]+\.png)\?(version=[a-z0-9-]*&)?expires=[0-9]{10}&signature=[a-zA-Z0-9-_]+$/.test(newValue)) {
            throw new Error("Invalid signature_url provided");
        }
        this._signature_url = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var BankAccountAccountTypeEnum;
(function (BankAccountAccountTypeEnum) {
    BankAccountAccountTypeEnum["Company"] = "company";
    BankAccountAccountTypeEnum["Individual"] = "individual";
})(BankAccountAccountTypeEnum || (BankAccountAccountTypeEnum = {}));
/**
 * @export
 * @enum {string}
 */
var BankAccountObjectEnum;
(function (BankAccountObjectEnum) {
    BankAccountObjectEnum["BankAccount"] = "bank_account";
})(BankAccountObjectEnum || (BankAccountObjectEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Lob uses RESTful HTTP response codes to indicate success or failure of an API request. In general, 2xx indicates success, 4xx indicate an input error, and 5xx indicates an error on Lob\'s end.
 * @export
 * @class BankAccountDeletion
 */
class BankAccountDeletion {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.deleted) !== "undefined") {
            this.deleted = input.deleted;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
    }
    get id() {
        return (this._id || undefined);
    }
    set id(newValue) {
        if (newValue && !/^bank_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid id provided");
        }
        this._id = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var BankAccountDeletionObjectEnum;
(function (BankAccountDeletionObjectEnum) {
    BankAccountDeletionObjectEnum["BankAccountDeleted"] = "bank_account_deleted";
})(BankAccountDeletionObjectEnum || (BankAccountDeletionObjectEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class BankAccountList
 */
class BankAccountList {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.data) !== "undefined") {
            this.data = input.data;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.next_url) !== "undefined") {
            this.next_url = input.next_url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.previous_url) !== "undefined") {
            this.previous_url = input.previous_url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.count) !== "undefined") {
            this.count = input.count;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.total_count) !== "undefined") {
            this.total_count = input.total_count;
        }
    }
    get nextPageToken() {
        var _a;
        if (!this.next_url) {
            return undefined;
        }
        return (_a = this.next_url
            .split("?")[1]
            .split("&")
            .find((raw) => raw.includes("after="))) === null || _a === void 0 ? void 0 : _a.split("=")[1];
    }
    get previousPageToken() {
        var _a;
        if (!this.previous_url) {
            return undefined;
        }
        return (_a = this.previous_url
            .split("?")[1]
            .split("&")
            .find((raw) => raw.includes("before="))) === null || _a === void 0 ? void 0 : _a.split("=")[1];
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class BankAccountVerify
 */
class BankAccountVerify {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.amounts) !== "undefined") {
            this.amounts = input.amounts;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class BankAccountWritable
 */
class BankAccountWritable {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.description) !== "undefined") {
            this.description = input.description;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.routing_number) !== "undefined") {
            this.routing_number = input.routing_number;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.account_number) !== "undefined") {
            this.account_number = input.account_number;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.account_type) !== "undefined") {
            this.account_type = input.account_type;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.signatory) !== "undefined") {
            this.signatory = input.signatory;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.metadata) !== "undefined") {
            this.metadata = input.metadata;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * The type of entity that holds the account.
 * @export
 * @enum {string}
 */
var BankTypeEnum;
(function (BankTypeEnum) {
    BankTypeEnum["Company"] = "company";
    BankTypeEnum["Individual"] = "individual";
})(BankTypeEnum || (BankTypeEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class BillingGroup
 */
class BillingGroup {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.description) !== "undefined") {
            this.description = input.description;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.name) !== "undefined") {
            this.name = input.name;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.date_created) !== "undefined") {
            this.date_created = input.date_created;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.date_modified) !== "undefined") {
            this.date_modified = input.date_modified;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
    }
    get id() {
        return this._id;
    }
    set id(newValue) {
        if (newValue && !/^bg_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid id provided");
        }
        this._id = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var BillingGroupObjectEnum;
(function (BillingGroupObjectEnum) {
    BillingGroupObjectEnum["BillingGroup"] = "billing_group";
})(BillingGroupObjectEnum || (BillingGroupObjectEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class BillingGroupEditable
 */
class BillingGroupEditable {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.description) !== "undefined") {
            this.description = input.description;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.name) !== "undefined") {
            this.name = input.name;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class BillingGroupList
 */
class BillingGroupList {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.data) !== "undefined") {
            this.data = input.data;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.next_url) !== "undefined") {
            this.next_url = input.next_url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.previous_url) !== "undefined") {
            this.previous_url = input.previous_url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.count) !== "undefined") {
            this.count = input.count;
        }
    }
    get nextPageToken() {
        var _a;
        if (!this.next_url) {
            return undefined;
        }
        return (_a = this.next_url
            .split("?")[1]
            .split("&")
            .find((raw) => raw.includes("after="))) === null || _a === void 0 ? void 0 : _a.split("=")[1];
    }
    get previousPageToken() {
        var _a;
        if (!this.previous_url) {
            return undefined;
        }
        return (_a = this.previous_url
            .split("?")[1]
            .split("&")
            .find((raw) => raw.includes("before="))) === null || _a === void 0 ? void 0 : _a.split("=")[1];
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class Buckslip
 */
class Buckslip {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.auto_reorder) !== "undefined") {
            this.auto_reorder = input.auto_reorder;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.reorder_quantity) !== "undefined") {
            this.reorder_quantity = input.reorder_quantity;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.threshold_amount) !== "undefined") {
            this.threshold_amount = input.threshold_amount;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.url) !== "undefined") {
            this.url = input.url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.raw_url) !== "undefined") {
            this.raw_url = input.raw_url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.front_original_url) !== "undefined") {
            this.front_original_url = input.front_original_url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.back_original_url) !== "undefined") {
            this.back_original_url = input.back_original_url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.thumbnails) !== "undefined") {
            this.thumbnails = input.thumbnails;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.available_quantity) !== "undefined") {
            this.available_quantity = input.available_quantity;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.allocated_quantity) !== "undefined") {
            this.allocated_quantity = input.allocated_quantity;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.onhand_quantity) !== "undefined") {
            this.onhand_quantity = input.onhand_quantity;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.pending_quantity) !== "undefined") {
            this.pending_quantity = input.pending_quantity;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.projected_quantity) !== "undefined") {
            this.projected_quantity = input.projected_quantity;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.buckslip_orders) !== "undefined") {
            this.buckslip_orders = input.buckslip_orders;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.stock) !== "undefined") {
            this.stock = input.stock;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.weight) !== "undefined") {
            this.weight = input.weight;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.finish) !== "undefined") {
            this.finish = input.finish;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.status) !== "undefined") {
            this.status = input.status;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.description) !== "undefined") {
            this.description = input.description;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.size) !== "undefined") {
            this.size = input.size;
        }
    }
    get id() {
        return this._id;
    }
    set id(newValue) {
        if (newValue && !/^bck_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid id provided");
        }
        this._id = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var BuckslipStockEnum;
(function (BuckslipStockEnum) {
    BuckslipStockEnum["Text"] = "text";
    BuckslipStockEnum["Cover"] = "cover";
})(BuckslipStockEnum || (BuckslipStockEnum = {}));
/**
 * @export
 * @enum {string}
 */
var BuckslipWeightEnum;
(function (BuckslipWeightEnum) {
    BuckslipWeightEnum["_80"] = "80#";
})(BuckslipWeightEnum || (BuckslipWeightEnum = {}));
/**
 * @export
 * @enum {string}
 */
var BuckslipFinishEnum;
(function (BuckslipFinishEnum) {
    BuckslipFinishEnum["Gloss"] = "gloss";
    BuckslipFinishEnum["Matte"] = "matte";
})(BuckslipFinishEnum || (BuckslipFinishEnum = {}));
/**
 * @export
 * @enum {string}
 */
var BuckslipStatusEnum;
(function (BuckslipStatusEnum) {
    BuckslipStatusEnum["Processed"] = "processed";
    BuckslipStatusEnum["Rendered"] = "rendered";
})(BuckslipStatusEnum || (BuckslipStatusEnum = {}));
/**
 * @export
 * @enum {string}
 */
var BuckslipObjectEnum;
(function (BuckslipObjectEnum) {
    BuckslipObjectEnum["Buckslip"] = "buckslip";
})(BuckslipObjectEnum || (BuckslipObjectEnum = {}));
/**
 * @export
 * @enum {string}
 */
var BuckslipSizeEnum;
(function (BuckslipSizeEnum) {
    BuckslipSizeEnum["_875x375"] = "8.75x3.75";
})(BuckslipSizeEnum || (BuckslipSizeEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Lob uses RESTful HTTP response codes to indicate success or failure of an API request. In general, 2xx indicates success, 4xx indicate an input error, and 5xx indicates an error on Lob\'s end.
 * @export
 * @class BuckslipDeletion
 */
class BuckslipDeletion {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.deleted) !== "undefined") {
            this.deleted = input.deleted;
        }
    }
    get id() {
        return (this._id || undefined);
    }
    set id(newValue) {
        if (newValue && !/^bck_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid id provided");
        }
        this._id = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class BuckslipEditable
 */
class BuckslipEditable {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.front) !== "undefined") {
            this.front = input.front;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.back) !== "undefined") {
            this.back = input.back;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.description) !== "undefined") {
            this.description = input.description;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.size) !== "undefined") {
            this.size = input.size;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var BuckslipEditableSizeEnum;
(function (BuckslipEditableSizeEnum) {
    BuckslipEditableSizeEnum["_875x375"] = "8.75x3.75";
})(BuckslipEditableSizeEnum || (BuckslipEditableSizeEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class BuckslipOrder
 */
class BuckslipOrder {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.date_created) !== "undefined") {
            this.date_created = input.date_created;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.date_modified) !== "undefined") {
            this.date_modified = input.date_modified;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.deleted) !== "undefined") {
            this.deleted = input.deleted;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.buckslip_id) !== "undefined") {
            this.buckslip_id = input.buckslip_id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.status) !== "undefined") {
            this.status = input.status;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.quantity_ordered) !== "undefined") {
            this.quantity_ordered = input.quantity_ordered;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.unit_price) !== "undefined") {
            this.unit_price = input.unit_price;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.inventory) !== "undefined") {
            this.inventory = input.inventory;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.cancelled_reason) !== "undefined") {
            this.cancelled_reason = input.cancelled_reason;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.availability_date) !== "undefined") {
            this.availability_date = input.availability_date;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.expected_availability_date) !== "undefined") {
            this.expected_availability_date = input.expected_availability_date;
        }
    }
    get id() {
        return (this._id || undefined);
    }
    set id(newValue) {
        if (newValue && !/^bo_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid id provided");
        }
        this._id = newValue;
    }
    get buckslip_id() {
        return (this._buckslip_id || undefined);
    }
    set buckslip_id(newValue) {
        if (newValue && !/^bck_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid buckslip_id provided");
        }
        this._buckslip_id = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var BuckslipOrderStatusEnum;
(function (BuckslipOrderStatusEnum) {
    BuckslipOrderStatusEnum["Pending"] = "pending";
    BuckslipOrderStatusEnum["Printing"] = "printing";
    BuckslipOrderStatusEnum["Available"] = "available";
    BuckslipOrderStatusEnum["Cancelled"] = "cancelled";
    BuckslipOrderStatusEnum["Depleted"] = "depleted";
})(BuckslipOrderStatusEnum || (BuckslipOrderStatusEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class BuckslipOrderEditable
 */
class BuckslipOrderEditable {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.quantity) !== "undefined") {
            this.quantity = input.quantity;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class BuckslipOrdersList
 */
class BuckslipOrdersList {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.next_url) !== "undefined") {
            this.next_url = input.next_url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.previous_url) !== "undefined") {
            this.previous_url = input.previous_url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.count) !== "undefined") {
            this.count = input.count;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.total_count) !== "undefined") {
            this.total_count = input.total_count;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class BuckslipUpdatable
 */
class BuckslipUpdatable {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.description) !== "undefined") {
            this.description = input.description;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.auto_reorder) !== "undefined") {
            this.auto_reorder = input.auto_reorder;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.reorder_quantity) !== "undefined") {
            this.reorder_quantity = input.reorder_quantity;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class BuckslipsList
 */
class BuckslipsList {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.data) !== "undefined") {
            this.data = input.data;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.next_url) !== "undefined") {
            this.next_url = input.next_url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.previous_url) !== "undefined") {
            this.previous_url = input.previous_url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.count) !== "undefined") {
            this.count = input.count;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.total_count) !== "undefined") {
            this.total_count = input.total_count;
        }
    }
    get nextPageToken() {
        var _a;
        if (!this.next_url) {
            return undefined;
        }
        return (_a = this.next_url
            .split("?")[1]
            .split("&")
            .find((raw) => raw.includes("after="))) === null || _a === void 0 ? void 0 : _a.split("=")[1];
    }
    get previousPageToken() {
        var _a;
        if (!this.previous_url) {
            return undefined;
        }
        return (_a = this.previous_url
            .split("?")[1]
            .split("&")
            .find((raw) => raw.includes("before="))) === null || _a === void 0 ? void 0 : _a.split("=")[1];
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Lob uses RESTful HTTP response codes to indicate success or failure of an API request.
 * @export
 * @class BulkError
 */
class BulkError {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.error) !== "undefined") {
            this.error = input.error;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Bulk error properties
 * @export
 * @class BulkErrorProperties
 */
class BulkErrorProperties {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.message) !== "undefined") {
            this.message = input.message;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.status_code) !== "undefined") {
            this.status_code = input.status_code;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var BulkErrorPropertiesStatusCodeEnum;
(function (BulkErrorPropertiesStatusCodeEnum) {
    BulkErrorPropertiesStatusCodeEnum[BulkErrorPropertiesStatusCodeEnum["NUMBER_401"] = 401] = "NUMBER_401";
    BulkErrorPropertiesStatusCodeEnum[BulkErrorPropertiesStatusCodeEnum["NUMBER_403"] = 403] = "NUMBER_403";
    BulkErrorPropertiesStatusCodeEnum[BulkErrorPropertiesStatusCodeEnum["NUMBER_404"] = 404] = "NUMBER_404";
    BulkErrorPropertiesStatusCodeEnum[BulkErrorPropertiesStatusCodeEnum["NUMBER_413"] = 413] = "NUMBER_413";
    BulkErrorPropertiesStatusCodeEnum[BulkErrorPropertiesStatusCodeEnum["NUMBER_422"] = 422] = "NUMBER_422";
    BulkErrorPropertiesStatusCodeEnum[BulkErrorPropertiesStatusCodeEnum["NUMBER_429"] = 429] = "NUMBER_429";
    BulkErrorPropertiesStatusCodeEnum[BulkErrorPropertiesStatusCodeEnum["NUMBER_500"] = 500] = "NUMBER_500";
})(BulkErrorPropertiesStatusCodeEnum || (BulkErrorPropertiesStatusCodeEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class Campaign
 */
class Campaign {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.billing_group_id) !== "undefined") {
            this.billing_group_id = input.billing_group_id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.name) !== "undefined") {
            this.name = input.name;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.description) !== "undefined") {
            this.description = input.description;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.schedule_type) !== "undefined") {
            this.schedule_type = input.schedule_type;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.target_delivery_date) !== "undefined") {
            this.target_delivery_date = input.target_delivery_date;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.send_date) !== "undefined") {
            this.send_date = input.send_date;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.cancel_window_campaign_minutes) !== "undefined") {
            this.cancel_window_campaign_minutes =
                input.cancel_window_campaign_minutes;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.metadata) !== "undefined") {
            this.metadata = input.metadata;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.use_type) !== "undefined") {
            this.use_type = input.use_type;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.auto_cancel_if_ncoa) !== "undefined") {
            this.auto_cancel_if_ncoa = input.auto_cancel_if_ncoa;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.account_id) !== "undefined") {
            this.account_id = input.account_id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.is_draft) !== "undefined") {
            this.is_draft = input.is_draft;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.creatives) !== "undefined") {
            this.creatives = input.creatives;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.date_created) !== "undefined") {
            this.date_created = input.date_created;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.date_modified) !== "undefined") {
            this.date_modified = input.date_modified;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.deleted) !== "undefined") {
            this.deleted = input.deleted;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
    }
    get billing_group_id() {
        return (this._billing_group_id || null || undefined);
    }
    set billing_group_id(newValue) {
        if (newValue && !/^bg_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid billing_group_id provided");
        }
        this._billing_group_id = newValue;
    }
    get id() {
        return this._id;
    }
    set id(newValue) {
        if (newValue && !/^cmp_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid id provided");
        }
        this._id = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var CampaignObjectEnum;
(function (CampaignObjectEnum) {
    CampaignObjectEnum["Campaign"] = "campaign";
})(CampaignObjectEnum || (CampaignObjectEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class CampaignCreative
 */
class CampaignCreative {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.description) !== "undefined") {
            this.description = input.description;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.from) !== "undefined") {
            this.from = input.from;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.resource_type) !== "undefined") {
            this.resource_type = input.resource_type;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.details) !== "undefined") {
            this.details = input.details;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.metadata) !== "undefined") {
            this.metadata = input.metadata;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.template_preview_urls) !== "undefined") {
            this.template_preview_urls = input.template_preview_urls;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.template_previews) !== "undefined") {
            this.template_previews = input.template_previews;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.deleted) !== "undefined") {
            this.deleted = input.deleted;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.campaigns) !== "undefined") {
            this.campaigns = input.campaigns;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.date_created) !== "undefined") {
            this.date_created = input.date_created;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.date_modified) !== "undefined") {
            this.date_modified = input.date_modified;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
    }
    get id() {
        return (this._id || undefined);
    }
    set id(newValue) {
        if (newValue && !/^crv_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid id provided");
        }
        this._id = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var CampaignCreativeResourceTypeEnum;
(function (CampaignCreativeResourceTypeEnum) {
    CampaignCreativeResourceTypeEnum["Letter"] = "letter";
    CampaignCreativeResourceTypeEnum["Postcard"] = "postcard";
})(CampaignCreativeResourceTypeEnum || (CampaignCreativeResourceTypeEnum = {}));
/**
 * @export
 * @enum {string}
 */
var CampaignCreativeObjectEnum;
(function (CampaignCreativeObjectEnum) {
    CampaignCreativeObjectEnum["Creative"] = "creative";
})(CampaignCreativeObjectEnum || (CampaignCreativeObjectEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Lob uses RESTful HTTP response codes to indicate success or failure of an API request. In general, 2xx indicates success, 4xx indicate an input error, and 5xx indicates an error on Lob\'s end.
 * @export
 * @class CampaignDeletion
 */
class CampaignDeletion {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.deleted) !== "undefined") {
            this.deleted = input.deleted;
        }
    }
    get id() {
        return (this._id || undefined);
    }
    set id(newValue) {
        if (newValue && !/^cmp_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid id provided");
        }
        this._id = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class CampaignUpdatable
 */
class CampaignUpdatable {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.name) !== "undefined") {
            this.name = input.name;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.description) !== "undefined") {
            this.description = input.description;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.schedule_type) !== "undefined") {
            this.schedule_type = input.schedule_type;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.target_delivery_date) !== "undefined") {
            this.target_delivery_date = input.target_delivery_date;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.send_date) !== "undefined") {
            this.send_date = input.send_date;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.cancel_window_campaign_minutes) !== "undefined") {
            this.cancel_window_campaign_minutes =
                input.cancel_window_campaign_minutes;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.metadata) !== "undefined") {
            this.metadata = input.metadata;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.is_draft) !== "undefined") {
            this.is_draft = input.is_draft;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.use_type) !== "undefined") {
            this.use_type = input.use_type;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.auto_cancel_if_ncoa) !== "undefined") {
            this.auto_cancel_if_ncoa = input.auto_cancel_if_ncoa;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class CampaignWritable
 */
class CampaignWritable {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.billing_group_id) !== "undefined") {
            this.billing_group_id = input.billing_group_id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.name) !== "undefined") {
            this.name = input.name;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.description) !== "undefined") {
            this.description = input.description;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.schedule_type) !== "undefined") {
            this.schedule_type = input.schedule_type;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.target_delivery_date) !== "undefined") {
            this.target_delivery_date = input.target_delivery_date;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.send_date) !== "undefined") {
            this.send_date = input.send_date;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.cancel_window_campaign_minutes) !== "undefined") {
            this.cancel_window_campaign_minutes =
                input.cancel_window_campaign_minutes;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.metadata) !== "undefined") {
            this.metadata = input.metadata;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.use_type) !== "undefined") {
            this.use_type = input.use_type;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.auto_cancel_if_ncoa) !== "undefined") {
            this.auto_cancel_if_ncoa = input.auto_cancel_if_ncoa;
        }
    }
    get billing_group_id() {
        return (this._billing_group_id || null || undefined);
    }
    set billing_group_id(newValue) {
        if (newValue && !/^bg_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid billing_group_id provided");
        }
        this._billing_group_id = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class CampaignsList
 */
class CampaignsList {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.data) !== "undefined") {
            this.data = input.data;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.next_url) !== "undefined") {
            this.next_url = input.next_url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.previous_url) !== "undefined") {
            this.previous_url = input.previous_url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.count) !== "undefined") {
            this.count = input.count;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.total_count) !== "undefined") {
            this.total_count = input.total_count;
        }
    }
    get nextPageToken() {
        var _a;
        if (!this.next_url) {
            return undefined;
        }
        return (_a = this.next_url
            .split("?")[1]
            .split("&")
            .find((raw) => raw.includes("after="))) === null || _a === void 0 ? void 0 : _a.split("=")[1];
    }
    get previousPageToken() {
        var _a;
        if (!this.previous_url) {
            return undefined;
        }
        return (_a = this.previous_url
            .split("?")[1]
            .split("&")
            .find((raw) => raw.includes("before="))) === null || _a === void 0 ? void 0 : _a.split("=")[1];
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class Card
 */
class Card {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.url) !== "undefined") {
            this.url = input.url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.auto_reorder) !== "undefined") {
            this.auto_reorder = input.auto_reorder;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.reorder_quantity) !== "undefined") {
            this.reorder_quantity = input.reorder_quantity;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.raw_url) !== "undefined") {
            this.raw_url = input.raw_url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.front_original_url) !== "undefined") {
            this.front_original_url = input.front_original_url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.back_original_url) !== "undefined") {
            this.back_original_url = input.back_original_url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.thumbnails) !== "undefined") {
            this.thumbnails = input.thumbnails;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.available_quantity) !== "undefined") {
            this.available_quantity = input.available_quantity;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.pending_quantity) !== "undefined") {
            this.pending_quantity = input.pending_quantity;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.status) !== "undefined") {
            this.status = input.status;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.orientation) !== "undefined") {
            this.orientation = input.orientation;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.threshold_amount) !== "undefined") {
            this.threshold_amount = input.threshold_amount;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.date_created) !== "undefined") {
            this.date_created = input.date_created;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.date_modified) !== "undefined") {
            this.date_modified = input.date_modified;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.deleted) !== "undefined") {
            this.deleted = input.deleted;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.description) !== "undefined") {
            this.description = input.description;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.size) !== "undefined") {
            this.size = input.size;
        }
    }
    get id() {
        return this._id;
    }
    set id(newValue) {
        if (newValue && !/^card_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid id provided");
        }
        this._id = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var CardStatusEnum;
(function (CardStatusEnum) {
    CardStatusEnum["Processed"] = "processed";
    CardStatusEnum["Rendered"] = "rendered";
})(CardStatusEnum || (CardStatusEnum = {}));
/**
 * @export
 * @enum {string}
 */
var CardOrientationEnum;
(function (CardOrientationEnum) {
    CardOrientationEnum["Horizontal"] = "horizontal";
    CardOrientationEnum["Vertical"] = "vertical";
})(CardOrientationEnum || (CardOrientationEnum = {}));
/**
 * @export
 * @enum {string}
 */
var CardObjectEnum;
(function (CardObjectEnum) {
    CardObjectEnum["Card"] = "card";
})(CardObjectEnum || (CardObjectEnum = {}));
/**
 * @export
 * @enum {string}
 */
var CardSizeEnum;
(function (CardSizeEnum) {
    CardSizeEnum["_3375x2125"] = "3.375x2.125";
    CardSizeEnum["_2125x3375"] = "2.125x3.375";
})(CardSizeEnum || (CardSizeEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Lob uses RESTful HTTP response codes to indicate success or failure of an API request. In general, 2xx indicates success, 4xx indicate an input error, and 5xx indicates an error on Lob\'s end.
 * @export
 * @class CardDeletion
 */
class CardDeletion {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.deleted) !== "undefined") {
            this.deleted = input.deleted;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
    }
    get id() {
        return (this._id || undefined);
    }
    set id(newValue) {
        if (newValue && !/^card_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid id provided");
        }
        this._id = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var CardDeletionObjectEnum;
(function (CardDeletionObjectEnum) {
    CardDeletionObjectEnum["CardDeleted"] = "card_deleted";
})(CardDeletionObjectEnum || (CardDeletionObjectEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class CardEditable
 */
class CardEditable {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.front) !== "undefined") {
            this.front = input.front;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.back) !== "undefined") {
            this.back = input.back;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.size) !== "undefined") {
            this.size = input.size;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.description) !== "undefined") {
            this.description = input.description;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var CardEditableSizeEnum;
(function (CardEditableSizeEnum) {
    CardEditableSizeEnum["_3375x2125"] = "3.375x2.125";
    CardEditableSizeEnum["_2125x3375"] = "2.125x3.375";
})(CardEditableSizeEnum || (CardEditableSizeEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class CardList
 */
class CardList {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.data) !== "undefined") {
            this.data = input.data;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.next_url) !== "undefined") {
            this.next_url = input.next_url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.previous_url) !== "undefined") {
            this.previous_url = input.previous_url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.count) !== "undefined") {
            this.count = input.count;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.total_count) !== "undefined") {
            this.total_count = input.total_count;
        }
    }
    get nextPageToken() {
        var _a;
        if (!this.next_url) {
            return undefined;
        }
        return (_a = this.next_url
            .split("?")[1]
            .split("&")
            .find((raw) => raw.includes("after="))) === null || _a === void 0 ? void 0 : _a.split("=")[1];
    }
    get previousPageToken() {
        var _a;
        if (!this.previous_url) {
            return undefined;
        }
        return (_a = this.previous_url
            .split("?")[1]
            .split("&")
            .find((raw) => raw.includes("before="))) === null || _a === void 0 ? void 0 : _a.split("=")[1];
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class CardOrder
 */
class CardOrder {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.card_id) !== "undefined") {
            this.card_id = input.card_id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.status) !== "undefined") {
            this.status = input.status;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.inventory) !== "undefined") {
            this.inventory = input.inventory;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.quantity_ordered) !== "undefined") {
            this.quantity_ordered = input.quantity_ordered;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.unit_price) !== "undefined") {
            this.unit_price = input.unit_price;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.cancelled_reason) !== "undefined") {
            this.cancelled_reason = input.cancelled_reason;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.availability_date) !== "undefined") {
            this.availability_date = input.availability_date;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.expected_availability_date) !== "undefined") {
            this.expected_availability_date = input.expected_availability_date;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.date_created) !== "undefined") {
            this.date_created = input.date_created;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.date_modified) !== "undefined") {
            this.date_modified = input.date_modified;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.deleted) !== "undefined") {
            this.deleted = input.deleted;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
    }
    get id() {
        return (this._id || undefined);
    }
    set id(newValue) {
        if (newValue && !/^co_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid id provided");
        }
        this._id = newValue;
    }
    get card_id() {
        return (this._card_id || undefined);
    }
    set card_id(newValue) {
        if (newValue && !/^card_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid card_id provided");
        }
        this._card_id = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var CardOrderStatusEnum;
(function (CardOrderStatusEnum) {
    CardOrderStatusEnum["Pending"] = "pending";
    CardOrderStatusEnum["Printing"] = "printing";
    CardOrderStatusEnum["Available"] = "available";
    CardOrderStatusEnum["Cancelled"] = "cancelled";
    CardOrderStatusEnum["Depleted"] = "depleted";
})(CardOrderStatusEnum || (CardOrderStatusEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class CardOrderEditable
 */
class CardOrderEditable {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.quantity) !== "undefined") {
            this.quantity = input.quantity;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class CardOrderList
 */
class CardOrderList {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.data) !== "undefined") {
            this.data = input.data;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.next_url) !== "undefined") {
            this.next_url = input.next_url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.previous_url) !== "undefined") {
            this.previous_url = input.previous_url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.count) !== "undefined") {
            this.count = input.count;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class CardUpdatable
 */
class CardUpdatable {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.description) !== "undefined") {
            this.description = input.description;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.auto_reorder) !== "undefined") {
            this.auto_reorder = input.auto_reorder;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.reorder_quantity) !== "undefined") {
            this.reorder_quantity = input.reorder_quantity;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class Check
 */
class Check {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.to) !== "undefined") {
            this.to = input.to;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.from) !== "undefined") {
            this.from = input.from;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.description) !== "undefined") {
            this.description = input.description;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.metadata) !== "undefined") {
            this.metadata = input.metadata;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.merge_variables) !== "undefined") {
            this.merge_variables = input.merge_variables;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.send_date) !== "undefined") {
            this.send_date = input.send_date;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.mail_type) !== "undefined") {
            this.mail_type = input.mail_type;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.memo) !== "undefined") {
            this.memo = input.memo;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.check_number) !== "undefined") {
            this.check_number = input.check_number;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.message) !== "undefined") {
            this.message = input.message;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.amount) !== "undefined") {
            this.amount = input.amount;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.bank_account) !== "undefined") {
            this.bank_account = input.bank_account;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.check_bottom_template_id) !== "undefined") {
            this.check_bottom_template_id = input.check_bottom_template_id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.attachment_template_id) !== "undefined") {
            this.attachment_template_id = input.attachment_template_id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.check_bottom_template_version_id) !== "undefined") {
            this.check_bottom_template_version_id =
                input.check_bottom_template_version_id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.attachment_template_version_id) !== "undefined") {
            this.attachment_template_version_id =
                input.attachment_template_version_id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.url) !== "undefined") {
            this.url = input.url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.carrier) !== "undefined") {
            this.carrier = input.carrier;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.thumbnails) !== "undefined") {
            this.thumbnails = input.thumbnails;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.expected_delivery_date) !== "undefined") {
            this.expected_delivery_date = input.expected_delivery_date;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.tracking_events) !== "undefined") {
            this.tracking_events = input.tracking_events;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.date_created) !== "undefined") {
            this.date_created = input.date_created;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.date_modified) !== "undefined") {
            this.date_modified = input.date_modified;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.deleted) !== "undefined") {
            this.deleted = input.deleted;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.use_type) !== "undefined") {
            this.use_type = input.use_type;
        }
    }
    get id() {
        return this._id;
    }
    set id(newValue) {
        if (newValue && !/^chk_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid id provided");
        }
        this._id = newValue;
    }
    get check_bottom_template_id() {
        return (this._check_bottom_template_id || undefined);
    }
    set check_bottom_template_id(newValue) {
        if (newValue && !/^tmpl_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid check_bottom_template_id provided");
        }
        this._check_bottom_template_id = newValue;
    }
    get attachment_template_id() {
        return (this._attachment_template_id || undefined);
    }
    set attachment_template_id(newValue) {
        if (newValue && !/^tmpl_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid attachment_template_id provided");
        }
        this._attachment_template_id = newValue;
    }
    get check_bottom_template_version_id() {
        return (this._check_bottom_template_version_id || undefined);
    }
    set check_bottom_template_version_id(newValue) {
        if (newValue && !/^vrsn_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid check_bottom_template_version_id provided");
        }
        this._check_bottom_template_version_id = newValue;
    }
    get attachment_template_version_id() {
        return (this._attachment_template_version_id || undefined);
    }
    set attachment_template_version_id(newValue) {
        if (newValue && !/^vrsn_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid attachment_template_version_id provided");
        }
        this._attachment_template_version_id = newValue;
    }
    get url() {
        return this._url;
    }
    set url(newValue) {
        if (newValue &&
            !/^https:\/\/(lob-assets|lob-assets-staging)\.com\/(letters|postcards|bank-accounts|checks|self-mailers|cards)\/[a-z]{3,4}_[a-z0-9]{15,16}(\.pdf|_thumb_[a-z]+_[0-9]+\.png)\?(version=[a-z0-9-]*&)?expires=[0-9]{10}&signature=[a-zA-Z0-9-_]+$/.test(newValue)) {
            throw new Error("Invalid url provided");
        }
        this._url = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var CheckMailTypeEnum;
(function (CheckMailTypeEnum) {
    CheckMailTypeEnum["UspsFirstClass"] = "usps_first_class";
})(CheckMailTypeEnum || (CheckMailTypeEnum = {}));
/**
 * @export
 * @enum {string}
 */
var CheckCarrierEnum;
(function (CheckCarrierEnum) {
    CheckCarrierEnum["Usps"] = "USPS";
})(CheckCarrierEnum || (CheckCarrierEnum = {}));
/**
 * @export
 * @enum {string}
 */
var CheckObjectEnum;
(function (CheckObjectEnum) {
    CheckObjectEnum["Check"] = "check";
})(CheckObjectEnum || (CheckObjectEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Lob uses RESTful HTTP response codes to indicate success or failure of an API request. In general, 2xx indicates success, 4xx indicate an input error, and 5xx indicates an error on Lob\'s end.
 * @export
 * @class CheckDeletion
 */
class CheckDeletion {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.deleted) !== "undefined") {
            this.deleted = input.deleted;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
    }
    get id() {
        return (this._id || undefined);
    }
    set id(newValue) {
        if (newValue && !/^chk_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid id provided");
        }
        this._id = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var CheckDeletionObjectEnum;
(function (CheckDeletionObjectEnum) {
    CheckDeletionObjectEnum["CheckDeleted"] = "check_deleted";
})(CheckDeletionObjectEnum || (CheckDeletionObjectEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class CheckEditable
 */
class CheckEditable {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.from) !== "undefined") {
            this.from = input.from;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.to) !== "undefined") {
            this.to = input.to;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.bank_account) !== "undefined") {
            this.bank_account = input.bank_account;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.amount) !== "undefined") {
            this.amount = input.amount;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.logo) !== "undefined") {
            this.logo = input.logo;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.check_bottom) !== "undefined") {
            this.check_bottom = input.check_bottom;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.attachment) !== "undefined") {
            this.attachment = input.attachment;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.description) !== "undefined") {
            this.description = input.description;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.metadata) !== "undefined") {
            this.metadata = input.metadata;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.merge_variables) !== "undefined") {
            this.merge_variables = input.merge_variables;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.send_date) !== "undefined") {
            this.send_date = input.send_date;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.mail_type) !== "undefined") {
            this.mail_type = input.mail_type;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.memo) !== "undefined") {
            this.memo = input.memo;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.check_number) !== "undefined") {
            this.check_number = input.check_number;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.message) !== "undefined") {
            this.message = input.message;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.billing_group_id) !== "undefined") {
            this.billing_group_id = input.billing_group_id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.use_type) !== "undefined") {
            this.use_type = input.use_type;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var CheckEditableMailTypeEnum;
(function (CheckEditableMailTypeEnum) {
    CheckEditableMailTypeEnum["UspsFirstClass"] = "usps_first_class";
})(CheckEditableMailTypeEnum || (CheckEditableMailTypeEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class CheckList
 */
class CheckList {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.data) !== "undefined") {
            this.data = input.data;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.next_url) !== "undefined") {
            this.next_url = input.next_url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.previous_url) !== "undefined") {
            this.previous_url = input.previous_url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.count) !== "undefined") {
            this.count = input.count;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.total_count) !== "undefined") {
            this.total_count = input.total_count;
        }
    }
    get nextPageToken() {
        var _a;
        if (!this.next_url) {
            return undefined;
        }
        return (_a = this.next_url
            .split("?")[1]
            .split("&")
            .find((raw) => raw.includes("after="))) === null || _a === void 0 ? void 0 : _a.split("=")[1];
    }
    get previousPageToken() {
        var _a;
        if (!this.previous_url) {
            return undefined;
        }
        return (_a = this.previous_url
            .split("?")[1]
            .split("&")
            .find((raw) => raw.includes("before="))) === null || _a === void 0 ? void 0 : _a.split("=")[1];
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * TThe use type for each mailpiece. Can be one of marketing, operational, or null. Null use_type is only allowed if an account default use_type is selected in Account Settings. For more information on use_type, see our  [Help Center article](https://help.lob.com/print-and-mail/building-a-mail-strategy/managing-mail-settings/declaring-mail-use-type).
 * @export
 * @enum {string}
 */
var ChkUseType;
(function (ChkUseType) {
    ChkUseType["Marketing"] = "marketing";
    ChkUseType["Operational"] = "operational";
    ChkUseType["Null"] = "null";
})(ChkUseType || (ChkUseType = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * How the campaign should be scheduled. Only value available today is `immediate`.
 * @export
 * @enum {string}
 */
var CmpScheduleType;
(function (CmpScheduleType) {
    CmpScheduleType["Immediate"] = "immediate";
})(CmpScheduleType || (CmpScheduleType = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * The use type for each mailpiece. Can be one of marketing, operational, or null. Null use_type is only allowed if an account default use_type is selected in Account Settings. For more information on use_type, see our  [Help Center article](https://help.lob.com/print-and-mail/building-a-mail-strategy/managing-mail-settings/declaring-mail-use-type).
 * @export
 * @enum {string}
 */
var CmpUseType;
(function (CmpUseType) {
    CmpUseType["Marketing"] = "marketing";
    CmpUseType["Operational"] = "operational";
    CmpUseType["Null"] = "null";
})(CmpUseType || (CmpUseType = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Must be a 2 letter country short-name code (ISO 3166).
 * @export
 * @enum {string}
 */
var CountryExtended;
(function (CountryExtended) {
    CountryExtended["Empty"] = "";
    CountryExtended["Ad"] = "AD";
    CountryExtended["Ae"] = "AE";
    CountryExtended["Af"] = "AF";
    CountryExtended["Ag"] = "AG";
    CountryExtended["Ai"] = "AI";
    CountryExtended["Al"] = "AL";
    CountryExtended["An"] = "AN";
    CountryExtended["Ao"] = "AO";
    CountryExtended["Aq"] = "AQ";
    CountryExtended["Ar"] = "AR";
    CountryExtended["At"] = "AT";
    CountryExtended["Au"] = "AU";
    CountryExtended["Aw"] = "AW";
    CountryExtended["Az"] = "AZ";
    CountryExtended["Ba"] = "BA";
    CountryExtended["Bb"] = "BB";
    CountryExtended["Bd"] = "BD";
    CountryExtended["Be"] = "BE";
    CountryExtended["Bf"] = "BF";
    CountryExtended["Bg"] = "BG";
    CountryExtended["Bh"] = "BH";
    CountryExtended["Bi"] = "BI";
    CountryExtended["Bj"] = "BJ";
    CountryExtended["Bm"] = "BM";
    CountryExtended["Bn"] = "BN";
    CountryExtended["Bo"] = "BO";
    CountryExtended["Bq"] = "BQ";
    CountryExtended["Br"] = "BR";
    CountryExtended["Bs"] = "BS";
    CountryExtended["Bt"] = "BT";
    CountryExtended["Bw"] = "BW";
    CountryExtended["By"] = "BY";
    CountryExtended["Bz"] = "BZ";
    CountryExtended["Ca"] = "CA";
    CountryExtended["Cd"] = "CD";
    CountryExtended["Cg"] = "CG";
    CountryExtended["Ch"] = "CH";
    CountryExtended["Ci"] = "CI";
    CountryExtended["Ck"] = "CK";
    CountryExtended["Cl"] = "CL";
    CountryExtended["Cm"] = "CM";
    CountryExtended["Cn"] = "CN";
    CountryExtended["Co"] = "CO";
    CountryExtended["Cr"] = "CR";
    CountryExtended["Cs"] = "CS";
    CountryExtended["Cu"] = "CU";
    CountryExtended["Cv"] = "CV";
    CountryExtended["Cw"] = "CW";
    CountryExtended["Cy"] = "CY";
    CountryExtended["Cz"] = "CZ";
    CountryExtended["De"] = "DE";
    CountryExtended["Dj"] = "DJ";
    CountryExtended["Dk"] = "DK";
    CountryExtended["Dm"] = "DM";
    CountryExtended["Do"] = "DO";
    CountryExtended["Dz"] = "DZ";
    CountryExtended["Ec"] = "EC";
    CountryExtended["Ee"] = "EE";
    CountryExtended["Eg"] = "EG";
    CountryExtended["Eh"] = "EH";
    CountryExtended["Er"] = "ER";
    CountryExtended["Es"] = "ES";
    CountryExtended["Et"] = "ET";
    CountryExtended["Fi"] = "FI";
    CountryExtended["Fj"] = "FJ";
    CountryExtended["Fk"] = "FK";
    CountryExtended["Fo"] = "FO";
    CountryExtended["Fr"] = "FR";
    CountryExtended["Ga"] = "GA";
    CountryExtended["Gb"] = "GB";
    CountryExtended["Gd"] = "GD";
    CountryExtended["Ge"] = "GE";
    CountryExtended["Gh"] = "GH";
    CountryExtended["Gi"] = "GI";
    CountryExtended["Gl"] = "GL";
    CountryExtended["Gm"] = "GM";
    CountryExtended["Gn"] = "GN";
    CountryExtended["Gq"] = "GQ";
    CountryExtended["Gr"] = "GR";
    CountryExtended["Gs"] = "GS";
    CountryExtended["Gt"] = "GT";
    CountryExtended["Gw"] = "GW";
    CountryExtended["Gy"] = "GY";
    CountryExtended["Hk"] = "HK";
    CountryExtended["Hn"] = "HN";
    CountryExtended["Hr"] = "HR";
    CountryExtended["Ht"] = "HT";
    CountryExtended["Hu"] = "HU";
    CountryExtended["Id"] = "ID";
    CountryExtended["Ie"] = "IE";
    CountryExtended["Il"] = "IL";
    CountryExtended["In"] = "IN";
    CountryExtended["Io"] = "IO";
    CountryExtended["Iq"] = "IQ";
    CountryExtended["Ir"] = "IR";
    CountryExtended["Is"] = "IS";
    CountryExtended["It"] = "IT";
    CountryExtended["Jm"] = "JM";
    CountryExtended["Jo"] = "JO";
    CountryExtended["Jp"] = "JP";
    CountryExtended["Ke"] = "KE";
    CountryExtended["Kg"] = "KG";
    CountryExtended["Kh"] = "KH";
    CountryExtended["Ki"] = "KI";
    CountryExtended["Km"] = "KM";
    CountryExtended["Kn"] = "KN";
    CountryExtended["Kp"] = "KP";
    CountryExtended["Kr"] = "KR";
    CountryExtended["Kw"] = "KW";
    CountryExtended["Ky"] = "KY";
    CountryExtended["Kz"] = "KZ";
    CountryExtended["La"] = "LA";
    CountryExtended["Lb"] = "LB";
    CountryExtended["Lc"] = "LC";
    CountryExtended["Li"] = "LI";
    CountryExtended["Lk"] = "LK";
    CountryExtended["Lr"] = "LR";
    CountryExtended["Ls"] = "LS";
    CountryExtended["Lt"] = "LT";
    CountryExtended["Lu"] = "LU";
    CountryExtended["Lv"] = "LV";
    CountryExtended["Ly"] = "LY";
    CountryExtended["Ma"] = "MA";
    CountryExtended["Mc"] = "MC";
    CountryExtended["Md"] = "MD";
    CountryExtended["Me"] = "ME";
    CountryExtended["Mg"] = "MG";
    CountryExtended["Mk"] = "MK";
    CountryExtended["Ml"] = "ML";
    CountryExtended["Mm"] = "MM";
    CountryExtended["Mn"] = "MN";
    CountryExtended["Mo"] = "MO";
    CountryExtended["Mr"] = "MR";
    CountryExtended["Ms"] = "MS";
    CountryExtended["Mt"] = "MT";
    CountryExtended["Mu"] = "MU";
    CountryExtended["Mv"] = "MV";
    CountryExtended["Mw"] = "MW";
    CountryExtended["Mx"] = "MX";
    CountryExtended["My"] = "MY";
    CountryExtended["Mz"] = "MZ";
    CountryExtended["Na"] = "NA";
    CountryExtended["Ne"] = "NE";
    CountryExtended["Nf"] = "NF";
    CountryExtended["Ng"] = "NG";
    CountryExtended["Ni"] = "NI";
    CountryExtended["Nl"] = "NL";
    CountryExtended["No"] = "NO";
    CountryExtended["Np"] = "NP";
    CountryExtended["Nr"] = "NR";
    CountryExtended["Nu"] = "NU";
    CountryExtended["Nz"] = "NZ";
    CountryExtended["Om"] = "OM";
    CountryExtended["Pa"] = "PA";
    CountryExtended["Pe"] = "PE";
    CountryExtended["Pg"] = "PG";
    CountryExtended["Ph"] = "PH";
    CountryExtended["Pk"] = "PK";
    CountryExtended["Pl"] = "PL";
    CountryExtended["Pn"] = "PN";
    CountryExtended["Pt"] = "PT";
    CountryExtended["Py"] = "PY";
    CountryExtended["Qa"] = "QA";
    CountryExtended["Ro"] = "RO";
    CountryExtended["Rs"] = "RS";
    CountryExtended["Ru"] = "RU";
    CountryExtended["Rw"] = "RW";
    CountryExtended["Sa"] = "SA";
    CountryExtended["Sb"] = "SB";
    CountryExtended["Sc"] = "SC";
    CountryExtended["Sd"] = "SD";
    CountryExtended["Se"] = "SE";
    CountryExtended["Sg"] = "SG";
    CountryExtended["Sh"] = "SH";
    CountryExtended["Si"] = "SI";
    CountryExtended["Sk"] = "SK";
    CountryExtended["Sl"] = "SL";
    CountryExtended["Sm"] = "SM";
    CountryExtended["Sn"] = "SN";
    CountryExtended["So"] = "SO";
    CountryExtended["Sr"] = "SR";
    CountryExtended["Ss"] = "SS";
    CountryExtended["St"] = "ST";
    CountryExtended["Sv"] = "SV";
    CountryExtended["Sx"] = "SX";
    CountryExtended["Sy"] = "SY";
    CountryExtended["Sz"] = "SZ";
    CountryExtended["Tc"] = "TC";
    CountryExtended["Td"] = "TD";
    CountryExtended["Tg"] = "TG";
    CountryExtended["Th"] = "TH";
    CountryExtended["Tj"] = "TJ";
    CountryExtended["Tk"] = "TK";
    CountryExtended["Tl"] = "TL";
    CountryExtended["Tm"] = "TM";
    CountryExtended["Tn"] = "TN";
    CountryExtended["To"] = "TO";
    CountryExtended["Tr"] = "TR";
    CountryExtended["Tt"] = "TT";
    CountryExtended["Tv"] = "TV";
    CountryExtended["Tw"] = "TW";
    CountryExtended["Tz"] = "TZ";
    CountryExtended["Ua"] = "UA";
    CountryExtended["Ug"] = "UG";
    CountryExtended["Us"] = "US";
    CountryExtended["Uy"] = "UY";
    CountryExtended["Uz"] = "UZ";
    CountryExtended["Va"] = "VA";
    CountryExtended["Vc"] = "VC";
    CountryExtended["Ve"] = "VE";
    CountryExtended["Vg"] = "VG";
    CountryExtended["Vn"] = "VN";
    CountryExtended["Vu"] = "VU";
    CountryExtended["Ws"] = "WS";
    CountryExtended["Ye"] = "YE";
    CountryExtended["Za"] = "ZA";
    CountryExtended["Zm"] = "ZM";
    CountryExtended["Zw"] = "ZW";
})(CountryExtended || (CountryExtended = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Full name of country
 * @export
 * @enum {string}
 */
var CountryExtendedExpanded;
(function (CountryExtendedExpanded) {
    CountryExtendedExpanded["Empty"] = "";
    CountryExtendedExpanded["Afghanistan"] = "AFGHANISTAN";
    CountryExtendedExpanded["Albania"] = "ALBANIA";
    CountryExtendedExpanded["Algeria"] = "ALGERIA";
    CountryExtendedExpanded["AmericanSamoa"] = "AMERICAN SAMOA";
    CountryExtendedExpanded["Andorra"] = "ANDORRA";
    CountryExtendedExpanded["Angola"] = "ANGOLA";
    CountryExtendedExpanded["Anguilla"] = "ANGUILLA";
    CountryExtendedExpanded["Antarctica"] = "ANTARCTICA";
    CountryExtendedExpanded["AntiguaAndBarbuda"] = "ANTIGUA AND BARBUDA";
    CountryExtendedExpanded["Argentina"] = "ARGENTINA";
    CountryExtendedExpanded["Aruba"] = "ARUBA";
    CountryExtendedExpanded["Australia"] = "AUSTRALIA";
    CountryExtendedExpanded["Austria"] = "AUSTRIA";
    CountryExtendedExpanded["Azerbaijan"] = "AZERBAIJAN";
    CountryExtendedExpanded["Bahrain"] = "BAHRAIN";
    CountryExtendedExpanded["Bangladesh"] = "BANGLADESH";
    CountryExtendedExpanded["Barbados"] = "BARBADOS";
    CountryExtendedExpanded["Belarus"] = "BELARUS";
    CountryExtendedExpanded["Belgium"] = "BELGIUM";
    CountryExtendedExpanded["Belize"] = "BELIZE";
    CountryExtendedExpanded["Benin"] = "BENIN";
    CountryExtendedExpanded["Bermuda"] = "BERMUDA";
    CountryExtendedExpanded["Bhutan"] = "BHUTAN";
    CountryExtendedExpanded["BoliviaPlurinationalStateOf"] = "BOLIVIA (PLURINATIONAL STATE OF)";
    CountryExtendedExpanded["BonaireSaintEustatiusAndSaba"] = "BONAIRE, SAINT EUSTATIUS AND SABA";
    CountryExtendedExpanded["BosniaAndHerzegovina"] = "BOSNIA AND HERZEGOVINA";
    CountryExtendedExpanded["Botswana"] = "BOTSWANA";
    CountryExtendedExpanded["Brazil"] = "BRAZIL";
    CountryExtendedExpanded["BritishIndianOceanTerritory"] = "BRITISH INDIAN OCEAN TERRITORY";
    CountryExtendedExpanded["BritishVirginIslands"] = "BRITISH VIRGIN ISLANDS";
    CountryExtendedExpanded["BruneiDarussalam"] = "BRUNEI DARUSSALAM";
    CountryExtendedExpanded["Bulgaria"] = "BULGARIA";
    CountryExtendedExpanded["BurkinaFaso"] = "BURKINA FASO";
    CountryExtendedExpanded["Burundi"] = "BURUNDI";
    CountryExtendedExpanded["CaboVerde"] = "CABO VERDE";
    CountryExtendedExpanded["Cambodia"] = "CAMBODIA";
    CountryExtendedExpanded["Cameroon"] = "CAMEROON";
    CountryExtendedExpanded["Canada"] = "CANADA";
    CountryExtendedExpanded["CaymanIslands"] = "CAYMAN ISLANDS";
    CountryExtendedExpanded["CentralAfricanRepublic"] = "CENTRAL AFRICAN REPUBLIC";
    CountryExtendedExpanded["Chad"] = "CHAD";
    CountryExtendedExpanded["Chile"] = "CHILE";
    CountryExtendedExpanded["China"] = "CHINA";
    CountryExtendedExpanded["Colombia"] = "COLOMBIA";
    CountryExtendedExpanded["Comoros"] = "COMOROS";
    CountryExtendedExpanded["Congo"] = "CONGO";
    CountryExtendedExpanded["CongoDemocraticRepublicOfThe"] = "CONGO, DEMOCRATIC REPUBLIC OF THE";
    CountryExtendedExpanded["CookIslands"] = "COOK ISLANDS";
    CountryExtendedExpanded["CostaRica"] = "COSTA RICA";
    CountryExtendedExpanded["CteDivoire"] = "C\u00D4TE D`IVOIRE";
    CountryExtendedExpanded["Croatia"] = "CROATIA";
    CountryExtendedExpanded["Cuba"] = "CUBA";
    CountryExtendedExpanded["Curaao"] = "CURA\u00C7AO";
    CountryExtendedExpanded["Cyprus"] = "CYPRUS";
    CountryExtendedExpanded["CzechRepublic"] = "CZECH REPUBLIC";
    CountryExtendedExpanded["Denmark"] = "DENMARK";
    CountryExtendedExpanded["Djibouti"] = "DJIBOUTI";
    CountryExtendedExpanded["Dominica"] = "DOMINICA";
    CountryExtendedExpanded["DominicanRepublic"] = "DOMINICAN REPUBLIC";
    CountryExtendedExpanded["Ecuador"] = "ECUADOR";
    CountryExtendedExpanded["Egypt"] = "EGYPT";
    CountryExtendedExpanded["ElSalvador"] = "EL SALVADOR";
    CountryExtendedExpanded["EquatorialGuinea"] = "EQUATORIAL GUINEA";
    CountryExtendedExpanded["Eritrea"] = "ERITREA";
    CountryExtendedExpanded["Estonia"] = "ESTONIA";
    CountryExtendedExpanded["Eswatini"] = "ESWATINI";
    CountryExtendedExpanded["Ethiopia"] = "ETHIOPIA";
    CountryExtendedExpanded["FalklandIslandsMalvinas"] = "FALKLAND ISLANDS (MALVINAS)";
    CountryExtendedExpanded["FaroeIslands"] = "FAROE ISLANDS";
    CountryExtendedExpanded["Fiji"] = "FIJI";
    CountryExtendedExpanded["Finland"] = "FINLAND";
    CountryExtendedExpanded["France"] = "FRANCE";
    CountryExtendedExpanded["Gabon"] = "GABON";
    CountryExtendedExpanded["Gambia"] = "GAMBIA";
    CountryExtendedExpanded["Georgia"] = "GEORGIA";
    CountryExtendedExpanded["Germany"] = "GERMANY";
    CountryExtendedExpanded["Ghana"] = "GHANA";
    CountryExtendedExpanded["Gibraltar"] = "GIBRALTAR";
    CountryExtendedExpanded["Greece"] = "GREECE";
    CountryExtendedExpanded["Greenland"] = "GREENLAND";
    CountryExtendedExpanded["Grenada"] = "GRENADA";
    CountryExtendedExpanded["Guatemala"] = "GUATEMALA";
    CountryExtendedExpanded["Guinea"] = "GUINEA";
    CountryExtendedExpanded["GuineaBissau"] = "GUINEA-BISSAU";
    CountryExtendedExpanded["Guyana"] = "GUYANA";
    CountryExtendedExpanded["Haiti"] = "HAITI";
    CountryExtendedExpanded["HolySee"] = "HOLY SEE";
    CountryExtendedExpanded["Honduras"] = "HONDURAS";
    CountryExtendedExpanded["HongKong"] = "HONG KONG";
    CountryExtendedExpanded["Hungary"] = "HUNGARY";
    CountryExtendedExpanded["Iceland"] = "ICELAND";
    CountryExtendedExpanded["India"] = "INDIA";
    CountryExtendedExpanded["Indonesia"] = "INDONESIA";
    CountryExtendedExpanded["IranIslamicRepublicOf"] = "IRAN (ISLAMIC REPUBLIC OF)";
    CountryExtendedExpanded["Iraq"] = "IRAQ";
    CountryExtendedExpanded["Ireland"] = "IRELAND";
    CountryExtendedExpanded["Israel"] = "ISRAEL";
    CountryExtendedExpanded["Italy"] = "ITALY";
    CountryExtendedExpanded["Jamaica"] = "JAMAICA";
    CountryExtendedExpanded["Japan"] = "JAPAN";
    CountryExtendedExpanded["Jordan"] = "JORDAN";
    CountryExtendedExpanded["Kazakhstan"] = "KAZAKHSTAN";
    CountryExtendedExpanded["Kenya"] = "KENYA";
    CountryExtendedExpanded["Kiribati"] = "KIRIBATI";
    CountryExtendedExpanded["KoreaDemocraticPeoplesRepublicOf"] = "KOREA (DEMOCRATIC PEOPLE\u2019S REPUBLIC OF)";
    CountryExtendedExpanded["KoreaRepublicOf"] = "KOREA, REPUBLIC OF";
    CountryExtendedExpanded["Kuwait"] = "KUWAIT";
    CountryExtendedExpanded["Kyrgyzstan"] = "KYRGYZSTAN";
    CountryExtendedExpanded["LaoPeoplesDemocraticRepublic"] = "LAO PEOPLE\u2019S DEMOCRATIC REPUBLIC";
    CountryExtendedExpanded["Latvia"] = "LATVIA";
    CountryExtendedExpanded["Lebanon"] = "LEBANON";
    CountryExtendedExpanded["Lesotho"] = "LESOTHO";
    CountryExtendedExpanded["Liberia"] = "LIBERIA";
    CountryExtendedExpanded["Libya"] = "LIBYA";
    CountryExtendedExpanded["Liechtenstein"] = "LIECHTENSTEIN";
    CountryExtendedExpanded["Lithuania"] = "LITHUANIA";
    CountryExtendedExpanded["Luxembourg"] = "LUXEMBOURG";
    CountryExtendedExpanded["Macao"] = "MACAO";
    CountryExtendedExpanded["Macedonia"] = "MACEDONIA";
    CountryExtendedExpanded["Madagascar"] = "MADAGASCAR";
    CountryExtendedExpanded["Malawi"] = "MALAWI";
    CountryExtendedExpanded["Malaysia"] = "MALAYSIA";
    CountryExtendedExpanded["Maldives"] = "MALDIVES";
    CountryExtendedExpanded["Mali"] = "MALI";
    CountryExtendedExpanded["Malta"] = "MALTA";
    CountryExtendedExpanded["Mauritania"] = "MAURITANIA";
    CountryExtendedExpanded["Mauritius"] = "MAURITIUS";
    CountryExtendedExpanded["Mexico"] = "MEXICO";
    CountryExtendedExpanded["MoldovaRepublicOf"] = "MOLDOVA, REPUBLIC OF";
    CountryExtendedExpanded["Monaco"] = "MONACO";
    CountryExtendedExpanded["Mongolia"] = "MONGOLIA";
    CountryExtendedExpanded["Montenegro"] = "MONTENEGRO";
    CountryExtendedExpanded["Montserrat"] = "MONTSERRAT";
    CountryExtendedExpanded["Morocco"] = "MOROCCO";
    CountryExtendedExpanded["Mozambique"] = "MOZAMBIQUE";
    CountryExtendedExpanded["Myanmar"] = "MYANMAR";
    CountryExtendedExpanded["Namibia"] = "NAMIBIA";
    CountryExtendedExpanded["Nauru"] = "NAURU";
    CountryExtendedExpanded["Nepal"] = "NEPAL";
    CountryExtendedExpanded["NetherlandAntilles"] = "NETHERLAND ANTILLES";
    CountryExtendedExpanded["Netherlands"] = "NETHERLANDS";
    CountryExtendedExpanded["NewZealand"] = "NEW ZEALAND";
    CountryExtendedExpanded["Nicaragua"] = "NICARAGUA";
    CountryExtendedExpanded["Niger"] = "NIGER";
    CountryExtendedExpanded["Nigeria"] = "NIGERIA";
    CountryExtendedExpanded["Niue"] = "NIUE";
    CountryExtendedExpanded["NorfolkIsland"] = "NORFOLK ISLAND";
    CountryExtendedExpanded["Norway"] = "NORWAY";
    CountryExtendedExpanded["Oman"] = "OMAN";
    CountryExtendedExpanded["Pakistan"] = "PAKISTAN";
    CountryExtendedExpanded["Panama"] = "PANAMA";
    CountryExtendedExpanded["PapuaNewGuinea"] = "PAPUA NEW GUINEA";
    CountryExtendedExpanded["Paraguay"] = "PARAGUAY";
    CountryExtendedExpanded["Peru"] = "PERU";
    CountryExtendedExpanded["Philippines"] = "PHILIPPINES";
    CountryExtendedExpanded["Pitcairn"] = "PITCAIRN";
    CountryExtendedExpanded["Poland"] = "POLAND";
    CountryExtendedExpanded["Portugal"] = "PORTUGAL";
    CountryExtendedExpanded["Qatar"] = "QATAR";
    CountryExtendedExpanded["Romania"] = "ROMANIA";
    CountryExtendedExpanded["RussianFederation"] = "RUSSIAN FEDERATION";
    CountryExtendedExpanded["Rwanda"] = "RWANDA";
    CountryExtendedExpanded["SaintHelena"] = "SAINT HELENA";
    CountryExtendedExpanded["SaintKittsAndNevis"] = "SAINT KITTS AND NEVIS";
    CountryExtendedExpanded["SaintLucia"] = "SAINT LUCIA";
    CountryExtendedExpanded["SaintVincentAndTheGrenadines"] = "SAINT VINCENT AND THE GRENADINES";
    CountryExtendedExpanded["Samoa"] = "SAMOA";
    CountryExtendedExpanded["SanMarino"] = "SAN MARINO";
    CountryExtendedExpanded["SaoTomeAndPrincipe"] = "SAO TOME AND PRINCIPE";
    CountryExtendedExpanded["SaudiArabia"] = "SAUDI ARABIA";
    CountryExtendedExpanded["Senegal"] = "SENEGAL";
    CountryExtendedExpanded["Serbia"] = "SERBIA";
    CountryExtendedExpanded["Seychelles"] = "SEYCHELLES";
    CountryExtendedExpanded["SierraLeone"] = "SIERRA LEONE";
    CountryExtendedExpanded["Singapore"] = "SINGAPORE";
    CountryExtendedExpanded["SintMaarten"] = "SINT MAARTEN";
    CountryExtendedExpanded["Slovakia"] = "SLOVAKIA";
    CountryExtendedExpanded["Slovenia"] = "SLOVENIA";
    CountryExtendedExpanded["SolomonIslands"] = "SOLOMON ISLANDS";
    CountryExtendedExpanded["Somalia"] = "SOMALIA";
    CountryExtendedExpanded["SouthAfrica"] = "SOUTH AFRICA";
    CountryExtendedExpanded["SouthGeorgiaAndTheSouthSandwichIslands"] = "SOUTH GEORGIA AND THE SOUTH SANDWICH ISLANDS";
    CountryExtendedExpanded["SouthSudan"] = "SOUTH SUDAN";
    CountryExtendedExpanded["Spain"] = "SPAIN";
    CountryExtendedExpanded["SriLanka"] = "SRI LANKA";
    CountryExtendedExpanded["Sudan"] = "SUDAN";
    CountryExtendedExpanded["Suriname"] = "SURINAME";
    CountryExtendedExpanded["Sweden"] = "SWEDEN";
    CountryExtendedExpanded["Switzerland"] = "SWITZERLAND";
    CountryExtendedExpanded["SyrianArabRepublic"] = "SYRIAN ARAB REPUBLIC";
    CountryExtendedExpanded["Taiwan"] = "TAIWAN";
    CountryExtendedExpanded["Tajikistan"] = "TAJIKISTAN";
    CountryExtendedExpanded["Tanzania"] = "TANZANIA";
    CountryExtendedExpanded["Thailand"] = "THAILAND";
    CountryExtendedExpanded["TheBahamas"] = "THE BAHAMAS";
    CountryExtendedExpanded["TimorLeste"] = "TIMOR-LESTE";
    CountryExtendedExpanded["Togo"] = "TOGO";
    CountryExtendedExpanded["Tokelau"] = "TOKELAU";
    CountryExtendedExpanded["Tonga"] = "TONGA";
    CountryExtendedExpanded["TrinidadAndTobago"] = "TRINIDAD AND TOBAGO";
    CountryExtendedExpanded["Tunisia"] = "TUNISIA";
    CountryExtendedExpanded["Turkey"] = "TURKEY";
    CountryExtendedExpanded["Turkmenistan"] = "TURKMENISTAN";
    CountryExtendedExpanded["TurksAndCaicosIslands"] = "TURKS AND CAICOS ISLANDS";
    CountryExtendedExpanded["Tuvalu"] = "TUVALU";
    CountryExtendedExpanded["Uganda"] = "UGANDA";
    CountryExtendedExpanded["Ukraine"] = "UKRAINE";
    CountryExtendedExpanded["UnitedArabEmirates"] = "UNITED ARAB EMIRATES";
    CountryExtendedExpanded["UnitedKingdom"] = "UNITED KINGDOM";
    CountryExtendedExpanded["UnitedStates"] = "UNITED STATES";
    CountryExtendedExpanded["Uruguay"] = "URUGUAY";
    CountryExtendedExpanded["Uzbekistan"] = "UZBEKISTAN";
    CountryExtendedExpanded["Vanuatu"] = "VANUATU";
    CountryExtendedExpanded["Venezuela"] = "VENEZUELA";
    CountryExtendedExpanded["VietNam"] = "VIET NAM";
    CountryExtendedExpanded["WesternSahara"] = "WESTERN SAHARA";
    CountryExtendedExpanded["Yemen"] = "YEMEN";
    CountryExtendedExpanded["Zambia"] = "ZAMBIA";
    CountryExtendedExpanded["Zimbabwe"] = "ZIMBABWE";
})(CountryExtendedExpanded || (CountryExtendedExpanded = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class CreativePatch
 */
class CreativePatch {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.from) !== "undefined") {
            this.from = input.from;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.description) !== "undefined") {
            this.description = input.description;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.metadata) !== "undefined") {
            this.metadata = input.metadata;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class CreativeResponse
 */
class CreativeResponse {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.description) !== "undefined") {
            this.description = input.description;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.from) !== "undefined") {
            this.from = input.from;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.resource_type) !== "undefined") {
            this.resource_type = input.resource_type;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.details) !== "undefined") {
            this.details = input.details;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.metadata) !== "undefined") {
            this.metadata = input.metadata;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.template_preview_urls) !== "undefined") {
            this.template_preview_urls = input.template_preview_urls;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.template_previews) !== "undefined") {
            this.template_previews = input.template_previews;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.deleted) !== "undefined") {
            this.deleted = input.deleted;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.campaigns) !== "undefined") {
            this.campaigns = input.campaigns;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.date_created) !== "undefined") {
            this.date_created = input.date_created;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.date_modified) !== "undefined") {
            this.date_modified = input.date_modified;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
    }
    get id() {
        return (this._id || undefined);
    }
    set id(newValue) {
        if (newValue && !/^crv_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid id provided");
        }
        this._id = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var CreativeResponseResourceTypeEnum;
(function (CreativeResponseResourceTypeEnum) {
    CreativeResponseResourceTypeEnum["Letter"] = "letter";
    CreativeResponseResourceTypeEnum["Postcard"] = "postcard";
})(CreativeResponseResourceTypeEnum || (CreativeResponseResourceTypeEnum = {}));
/**
 * @export
 * @enum {string}
 */
var CreativeResponseObjectEnum;
(function (CreativeResponseObjectEnum) {
    CreativeResponseObjectEnum["Creative"] = "creative";
})(CreativeResponseObjectEnum || (CreativeResponseObjectEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class CreativeWritable
 */
class CreativeWritable {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.from) !== "undefined") {
            this.from = input.from;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.description) !== "undefined") {
            this.description = input.description;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.metadata) !== "undefined") {
            this.metadata = input.metadata;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.resource_type) !== "undefined") {
            this.resource_type = input.resource_type;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.campaign_id) !== "undefined") {
            this.campaign_id = input.campaign_id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.details) !== "undefined") {
            this.details = input.details;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.file) !== "undefined") {
            this.file = input.file;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.front) !== "undefined") {
            this.front = input.front;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.back) !== "undefined") {
            this.back = input.back;
        }
    }
    get campaign_id() {
        return this._campaign_id;
    }
    set campaign_id(newValue) {
        if (newValue && !/^cmp_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid campaign_id provided");
        }
        this._campaign_id = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var CreativeWritableResourceTypeEnum;
(function (CreativeWritableResourceTypeEnum) {
    CreativeWritableResourceTypeEnum["Letter"] = "letter";
    CreativeWritableResourceTypeEnum["Postcard"] = "postcard";
})(CreativeWritableResourceTypeEnum || (CreativeWritableResourceTypeEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * A nested custom envelope object containing more information about the custom envelope used or `null` if a custom envelope was not used.
 * @export
 * @class CustomEnvelopeReturned
 */
class CustomEnvelopeReturned {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.url) !== "undefined") {
            this.url = input.url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var CustomEnvelopeReturnedObjectEnum;
(function (CustomEnvelopeReturnedObjectEnum) {
    CustomEnvelopeReturnedObjectEnum["Envelope"] = "envelope";
})(CustomEnvelopeReturnedObjectEnum || (CustomEnvelopeReturnedObjectEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * A nested object containing a breakdown of the deliverability of an address.
 * @export
 * @class DeliverabilityAnalysis
 */
class DeliverabilityAnalysis {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.dpv_confirmation) !== "undefined") {
            this.dpv_confirmation = input.dpv_confirmation;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.dpv_cmra) !== "undefined") {
            this.dpv_cmra = input.dpv_cmra;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.dpv_vacant) !== "undefined") {
            this.dpv_vacant = input.dpv_vacant;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.dpv_active) !== "undefined") {
            this.dpv_active = input.dpv_active;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.dpv_footnotes) !== "undefined") {
            this.dpv_footnotes = input.dpv_footnotes;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.ews_match) !== "undefined") {
            this.ews_match = input.ews_match;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.lacs_indicator) !== "undefined") {
            this.lacs_indicator = input.lacs_indicator;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.lacs_return_code) !== "undefined") {
            this.lacs_return_code = input.lacs_return_code;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.suite_return_code) !== "undefined") {
            this.suite_return_code = input.suite_return_code;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var DeliverabilityAnalysisDpvConfirmationEnum;
(function (DeliverabilityAnalysisDpvConfirmationEnum) {
    DeliverabilityAnalysisDpvConfirmationEnum["Y"] = "Y";
    DeliverabilityAnalysisDpvConfirmationEnum["S"] = "S";
    DeliverabilityAnalysisDpvConfirmationEnum["D"] = "D";
    DeliverabilityAnalysisDpvConfirmationEnum["N"] = "N";
    DeliverabilityAnalysisDpvConfirmationEnum["Empty"] = "";
})(DeliverabilityAnalysisDpvConfirmationEnum || (DeliverabilityAnalysisDpvConfirmationEnum = {}));
/**
 * @export
 * @enum {string}
 */
var DeliverabilityAnalysisDpvCmraEnum;
(function (DeliverabilityAnalysisDpvCmraEnum) {
    DeliverabilityAnalysisDpvCmraEnum["Y"] = "Y";
    DeliverabilityAnalysisDpvCmraEnum["N"] = "N";
    DeliverabilityAnalysisDpvCmraEnum["Empty"] = "";
})(DeliverabilityAnalysisDpvCmraEnum || (DeliverabilityAnalysisDpvCmraEnum = {}));
/**
 * @export
 * @enum {string}
 */
var DeliverabilityAnalysisDpvVacantEnum;
(function (DeliverabilityAnalysisDpvVacantEnum) {
    DeliverabilityAnalysisDpvVacantEnum["Y"] = "Y";
    DeliverabilityAnalysisDpvVacantEnum["N"] = "N";
    DeliverabilityAnalysisDpvVacantEnum["Empty"] = "";
})(DeliverabilityAnalysisDpvVacantEnum || (DeliverabilityAnalysisDpvVacantEnum = {}));
/**
 * @export
 * @enum {string}
 */
var DeliverabilityAnalysisDpvActiveEnum;
(function (DeliverabilityAnalysisDpvActiveEnum) {
    DeliverabilityAnalysisDpvActiveEnum["Y"] = "Y";
    DeliverabilityAnalysisDpvActiveEnum["N"] = "N";
    DeliverabilityAnalysisDpvActiveEnum["Empty"] = "";
})(DeliverabilityAnalysisDpvActiveEnum || (DeliverabilityAnalysisDpvActiveEnum = {}));
/**
 * @export
 * @enum {string}
 */
var DeliverabilityAnalysisLacsIndicatorEnum;
(function (DeliverabilityAnalysisLacsIndicatorEnum) {
    DeliverabilityAnalysisLacsIndicatorEnum["Y"] = "Y";
    DeliverabilityAnalysisLacsIndicatorEnum["N"] = "N";
    DeliverabilityAnalysisLacsIndicatorEnum["Empty"] = "";
})(DeliverabilityAnalysisLacsIndicatorEnum || (DeliverabilityAnalysisLacsIndicatorEnum = {}));
/**
 * @export
 * @enum {string}
 */
var DeliverabilityAnalysisSuiteReturnCodeEnum;
(function (DeliverabilityAnalysisSuiteReturnCodeEnum) {
    DeliverabilityAnalysisSuiteReturnCodeEnum["A"] = "A";
    DeliverabilityAnalysisSuiteReturnCodeEnum["_00"] = "00";
    DeliverabilityAnalysisSuiteReturnCodeEnum["Empty"] = "";
})(DeliverabilityAnalysisSuiteReturnCodeEnum || (DeliverabilityAnalysisSuiteReturnCodeEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @enum {string}
 */
var DpvFootnote;
(function (DpvFootnote) {
    DpvFootnote["Aa"] = "AA";
    DpvFootnote["A1"] = "A1";
    DpvFootnote["Bb"] = "BB";
    DpvFootnote["Cc"] = "CC";
    DpvFootnote["N1"] = "N1";
    DpvFootnote["F1"] = "F1";
    DpvFootnote["G1"] = "G1";
    DpvFootnote["U1"] = "U1";
    DpvFootnote["M1"] = "M1";
    DpvFootnote["M3"] = "M3";
    DpvFootnote["P1"] = "P1";
    DpvFootnote["P3"] = "P3";
    DpvFootnote["R1"] = "R1";
    DpvFootnote["R7"] = "R7";
    DpvFootnote["Rr"] = "RR";
})(DpvFootnote || (DpvFootnote = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * The engine used to combine HTML template with merge variables.   * `legacy` - Lob\'s original engine   * `handlebars`
 * @export
 * @enum {string}
 */
var EngineHtml;
(function (EngineHtml) {
    EngineHtml["Legacy"] = "legacy";
    EngineHtml["Handlebars"] = "handlebars";
})(EngineHtml || (EngineHtml = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class EventType
 */
class EventType {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.enabled_for_test) !== "undefined") {
            this.enabled_for_test = input.enabled_for_test;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.resource) !== "undefined") {
            this.resource = input.resource;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var EventTypeResourceEnum;
(function (EventTypeResourceEnum) {
    EventTypeResourceEnum["Postcards"] = "postcards";
    EventTypeResourceEnum["SelfMailers"] = "self mailers";
    EventTypeResourceEnum["Letters"] = "letters";
    EventTypeResourceEnum["Checks"] = "checks";
    EventTypeResourceEnum["Addresses"] = "addresses";
    EventTypeResourceEnum["BankAccounts"] = "bank accounts";
})(EventTypeResourceEnum || (EventTypeResourceEnum = {}));
/**
 * @export
 * @enum {string}
 */
var EventTypeObjectEnum;
(function (EventTypeObjectEnum) {
    EventTypeObjectEnum["EventType"] = "event_type";
})(EventTypeObjectEnum || (EventTypeObjectEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class Events
 */
class Events {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.body) !== "undefined") {
            this.body = input.body;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.reference_id) !== "undefined") {
            this.reference_id = input.reference_id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.event_type) !== "undefined") {
            this.event_type = input.event_type;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.date_created) !== "undefined") {
            this.date_created = input.date_created;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
    }
    get id() {
        return this._id;
    }
    set id(newValue) {
        if (newValue && !/^evt_[a-zA-Z0-9_]+$/.test(newValue)) {
            throw new Error("Invalid id provided");
        }
        this._id = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var EventsObjectEnum;
(function (EventsObjectEnum) {
    EventsObjectEnum["Event"] = "event";
})(EventsObjectEnum || (EventsObjectEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class Export
 */
class Export {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.dateCreated) !== "undefined") {
            this.dateCreated = input.dateCreated;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.dateModified) !== "undefined") {
            this.dateModified = input.dateModified;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.deleted) !== "undefined") {
            this.deleted = input.deleted;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.s3Url) !== "undefined") {
            this.s3Url = input.s3Url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.state) !== "undefined") {
            this.state = input.state;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.type) !== "undefined") {
            this.type = input.type;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.uploadId) !== "undefined") {
            this.uploadId = input.uploadId;
        }
    }
    get id() {
        return this._id;
    }
    set id(newValue) {
        if (newValue && !/^ex_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid id provided");
        }
        this._id = newValue;
    }
    get uploadId() {
        return this._uploadId;
    }
    set uploadId(newValue) {
        if (newValue && !/^upl_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid uploadId provided");
        }
        this._uploadId = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var ExportStateEnum;
(function (ExportStateEnum) {
    ExportStateEnum["InProgress"] = "in_progress";
    ExportStateEnum["Failed"] = "failed";
    ExportStateEnum["Succeeded"] = "succeeded";
})(ExportStateEnum || (ExportStateEnum = {}));
/**
 * @export
 * @enum {string}
 */
var ExportTypeEnum;
(function (ExportTypeEnum) {
    ExportTypeEnum["All"] = "all";
    ExportTypeEnum["Failures"] = "failures";
    ExportTypeEnum["Successes"] = "successes";
})(ExportTypeEnum || (ExportTypeEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class ExportModel
 */
class ExportModel {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.type) !== "undefined") {
            this.type = input.type;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var ExportModelTypeEnum;
(function (ExportModelTypeEnum) {
    ExportModelTypeEnum["All"] = "all";
    ExportModelTypeEnum["Failures"] = "failures";
    ExportModelTypeEnum["Successes"] = "successes";
})(ExportModelTypeEnum || (ExportModelTypeEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class GeocodeAddresses
 */
class GeocodeAddresses {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.components) !== "undefined") {
            this.components = input.components;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.location_analysis) !== "undefined") {
            this.location_analysis = input.location_analysis;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * A nested object containing a breakdown of each component of a reverse geocoded response.
 * @export
 * @class GeocodeComponents
 */
class GeocodeComponents {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.zip_code) !== "undefined") {
            this.zip_code = input.zip_code;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.zip_code_plus_4) !== "undefined") {
            this.zip_code_plus_4 = input.zip_code_plus_4;
        }
    }
    get zip_code() {
        return this._zip_code;
    }
    set zip_code(newValue) {
        if (newValue && !/^\d{5}$/.test(newValue)) {
            throw new Error("Invalid zip_code provided");
        }
        this._zip_code = newValue;
    }
    get zip_code_plus_4() {
        return this._zip_code_plus_4;
    }
    set zip_code_plus_4(newValue) {
        if (newValue && !/^\d{4}$/.test(newValue)) {
            throw new Error("Invalid zip_code_plus_4 provided");
        }
        this._zip_code_plus_4 = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class HTTPValidationError
 */
class HTTPValidationError {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.detail) !== "undefined") {
            this.detail = input.detail;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class IdentityValidation
 */
class IdentityValidation {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.recipient) !== "undefined") {
            this.recipient = input.recipient;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.primary_line) !== "undefined") {
            this.primary_line = input.primary_line;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.secondary_line) !== "undefined") {
            this.secondary_line = input.secondary_line;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.urbanization) !== "undefined") {
            this.urbanization = input.urbanization;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.last_line) !== "undefined") {
            this.last_line = input.last_line;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.score) !== "undefined") {
            this.score = input.score;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.confidence) !== "undefined") {
            this.confidence = input.confidence;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
    }
    get id() {
        return (this._id || undefined);
    }
    set id(newValue) {
        if (newValue && !/^id_validation_[a-zA-Z0-9_]+$/.test(newValue)) {
            throw new Error("Invalid id provided");
        }
        this._id = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var IdentityValidationConfidenceEnum;
(function (IdentityValidationConfidenceEnum) {
    IdentityValidationConfidenceEnum["High"] = "high";
    IdentityValidationConfidenceEnum["Medium"] = "medium";
    IdentityValidationConfidenceEnum["Low"] = "low";
    IdentityValidationConfidenceEnum["Empty"] = "";
})(IdentityValidationConfidenceEnum || (IdentityValidationConfidenceEnum = {}));
/**
 * @export
 * @enum {string}
 */
var IdentityValidationObjectEnum;
(function (IdentityValidationObjectEnum) {
    IdentityValidationObjectEnum["IdValidation"] = "id_validation";
})(IdentityValidationObjectEnum || (IdentityValidationObjectEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class InlineObject
 */
class InlineObject {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.file) !== "undefined") {
            this.file = input.file;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class IntlAutocompletions
 */
class IntlAutocompletions {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.suggestions) !== "undefined") {
            this.suggestions = input.suggestions;
        }
    }
    get id() {
        return (this._id || undefined);
    }
    set id(newValue) {
        if (newValue && !/^intl_auto_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid id provided");
        }
        this._id = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class IntlAutocompletionsWritable
 */
class IntlAutocompletionsWritable {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.address_prefix) !== "undefined") {
            this.address_prefix = input.address_prefix;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.city) !== "undefined") {
            this.city = input.city;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.state) !== "undefined") {
            this.state = input.state;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.zip_code) !== "undefined") {
            this.zip_code = input.zip_code;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.country) !== "undefined") {
            this.country = input.country;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * A nested object containing a breakdown of each component of an address.
 * @export
 * @class IntlComponents
 */
class IntlComponents {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.primary_number) !== "undefined") {
            this.primary_number = input.primary_number;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.street_name) !== "undefined") {
            this.street_name = input.street_name;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.city) !== "undefined") {
            this.city = input.city;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.state) !== "undefined") {
            this.state = input.state;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.postal_code) !== "undefined") {
            this.postal_code = input.postal_code;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class IntlSuggestions
 */
class IntlSuggestions {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.primary_number_range) !== "undefined") {
            this.primary_number_range = input.primary_number_range;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.primary_line) !== "undefined") {
            this.primary_line = input.primary_line;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.city) !== "undefined") {
            this.city = input.city;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.state) !== "undefined") {
            this.state = input.state;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.country) !== "undefined") {
            this.country = input.country;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.zip_code) !== "undefined") {
            this.zip_code = input.zip_code;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var IntlSuggestionsObjectEnum;
(function (IntlSuggestionsObjectEnum) {
    IntlSuggestionsObjectEnum["IntlAutocompletion"] = "intl_autocompletion";
})(IntlSuggestionsObjectEnum || (IntlSuggestionsObjectEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class IntlVerification
 */
class IntlVerification {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.recipient) !== "undefined") {
            this.recipient = input.recipient;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.primary_line) !== "undefined") {
            this.primary_line = input.primary_line;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.secondary_line) !== "undefined") {
            this.secondary_line = input.secondary_line;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.last_line) !== "undefined") {
            this.last_line = input.last_line;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.country) !== "undefined") {
            this.country = input.country;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.coverage) !== "undefined") {
            this.coverage = input.coverage;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.deliverability) !== "undefined") {
            this.deliverability = input.deliverability;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.status) !== "undefined") {
            this.status = input.status;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.components) !== "undefined") {
            this.components = input.components;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
    }
    get id() {
        return (this._id || undefined);
    }
    set id(newValue) {
        if (newValue && !/^intl_ver_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid id provided");
        }
        this._id = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var IntlVerificationCoverageEnum;
(function (IntlVerificationCoverageEnum) {
    IntlVerificationCoverageEnum["Subbuilding"] = "SUBBUILDING";
    IntlVerificationCoverageEnum["HousenumberBuilding"] = "HOUSENUMBER/BUILDING";
    IntlVerificationCoverageEnum["Street"] = "STREET";
    IntlVerificationCoverageEnum["Locality"] = "LOCALITY";
    IntlVerificationCoverageEnum["Sparse"] = "SPARSE";
})(IntlVerificationCoverageEnum || (IntlVerificationCoverageEnum = {}));
/**
 * @export
 * @enum {string}
 */
var IntlVerificationDeliverabilityEnum;
(function (IntlVerificationDeliverabilityEnum) {
    IntlVerificationDeliverabilityEnum["Deliverable"] = "deliverable";
    IntlVerificationDeliverabilityEnum["DeliverableMissingInfo"] = "deliverable_missing_info";
    IntlVerificationDeliverabilityEnum["Undeliverable"] = "undeliverable";
    IntlVerificationDeliverabilityEnum["NoMatch"] = "no_match";
})(IntlVerificationDeliverabilityEnum || (IntlVerificationDeliverabilityEnum = {}));
/**
 * @export
 * @enum {string}
 */
var IntlVerificationStatusEnum;
(function (IntlVerificationStatusEnum) {
    IntlVerificationStatusEnum["Lv4"] = "LV4";
    IntlVerificationStatusEnum["Lv3"] = "LV3";
    IntlVerificationStatusEnum["Lv2"] = "LV2";
    IntlVerificationStatusEnum["Lv1"] = "LV1";
    IntlVerificationStatusEnum["Lf4"] = "LF4";
    IntlVerificationStatusEnum["Lf3"] = "LF3";
    IntlVerificationStatusEnum["Lf2"] = "LF2";
    IntlVerificationStatusEnum["Lf1"] = "LF1";
    IntlVerificationStatusEnum["Lm4"] = "LM4";
    IntlVerificationStatusEnum["Lm3"] = "LM3";
    IntlVerificationStatusEnum["Lm2"] = "LM2";
    IntlVerificationStatusEnum["Lu1"] = "LU1";
})(IntlVerificationStatusEnum || (IntlVerificationStatusEnum = {}));
/**
 * @export
 * @enum {string}
 */
var IntlVerificationObjectEnum;
(function (IntlVerificationObjectEnum) {
    IntlVerificationObjectEnum["IntlVerification"] = "intl_verification";
})(IntlVerificationObjectEnum || (IntlVerificationObjectEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * A model used to represent an entry in a result list where the entry can either be a intl_verification or an Error. The SDK will perform necessary casting into the correct corresponding type.
 * @export
 * @class IntlVerificationOrError
 */
class IntlVerificationOrError {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.recipient) !== "undefined") {
            this.recipient = input.recipient;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.primary_line) !== "undefined") {
            this.primary_line = input.primary_line;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.secondary_line) !== "undefined") {
            this.secondary_line = input.secondary_line;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.last_line) !== "undefined") {
            this.last_line = input.last_line;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.country) !== "undefined") {
            this.country = input.country;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.coverage) !== "undefined") {
            this.coverage = input.coverage;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.deliverability) !== "undefined") {
            this.deliverability = input.deliverability;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.status) !== "undefined") {
            this.status = input.status;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.components) !== "undefined") {
            this.components = input.components;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.error) !== "undefined") {
            this.error = input.error;
        }
    }
    get id() {
        return (this._id || undefined);
    }
    set id(newValue) {
        if (newValue && !/^intl_ver_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid id provided");
        }
        this._id = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var IntlVerificationOrErrorCoverageEnum;
(function (IntlVerificationOrErrorCoverageEnum) {
    IntlVerificationOrErrorCoverageEnum["Subbuilding"] = "SUBBUILDING";
    IntlVerificationOrErrorCoverageEnum["HousenumberBuilding"] = "HOUSENUMBER/BUILDING";
    IntlVerificationOrErrorCoverageEnum["Street"] = "STREET";
    IntlVerificationOrErrorCoverageEnum["Locality"] = "LOCALITY";
    IntlVerificationOrErrorCoverageEnum["Sparse"] = "SPARSE";
})(IntlVerificationOrErrorCoverageEnum || (IntlVerificationOrErrorCoverageEnum = {}));
/**
 * @export
 * @enum {string}
 */
var IntlVerificationOrErrorDeliverabilityEnum;
(function (IntlVerificationOrErrorDeliverabilityEnum) {
    IntlVerificationOrErrorDeliverabilityEnum["Deliverable"] = "deliverable";
    IntlVerificationOrErrorDeliverabilityEnum["DeliverableMissingInfo"] = "deliverable_missing_info";
    IntlVerificationOrErrorDeliverabilityEnum["Undeliverable"] = "undeliverable";
    IntlVerificationOrErrorDeliverabilityEnum["NoMatch"] = "no_match";
})(IntlVerificationOrErrorDeliverabilityEnum || (IntlVerificationOrErrorDeliverabilityEnum = {}));
/**
 * @export
 * @enum {string}
 */
var IntlVerificationOrErrorStatusEnum;
(function (IntlVerificationOrErrorStatusEnum) {
    IntlVerificationOrErrorStatusEnum["Lv4"] = "LV4";
    IntlVerificationOrErrorStatusEnum["Lv3"] = "LV3";
    IntlVerificationOrErrorStatusEnum["Lv2"] = "LV2";
    IntlVerificationOrErrorStatusEnum["Lv1"] = "LV1";
    IntlVerificationOrErrorStatusEnum["Lf4"] = "LF4";
    IntlVerificationOrErrorStatusEnum["Lf3"] = "LF3";
    IntlVerificationOrErrorStatusEnum["Lf2"] = "LF2";
    IntlVerificationOrErrorStatusEnum["Lf1"] = "LF1";
    IntlVerificationOrErrorStatusEnum["Lm4"] = "LM4";
    IntlVerificationOrErrorStatusEnum["Lm3"] = "LM3";
    IntlVerificationOrErrorStatusEnum["Lm2"] = "LM2";
    IntlVerificationOrErrorStatusEnum["Lu1"] = "LU1";
})(IntlVerificationOrErrorStatusEnum || (IntlVerificationOrErrorStatusEnum = {}));
/**
 * @export
 * @enum {string}
 */
var IntlVerificationOrErrorObjectEnum;
(function (IntlVerificationOrErrorObjectEnum) {
    IntlVerificationOrErrorObjectEnum["IntlVerification"] = "intl_verification";
})(IntlVerificationOrErrorObjectEnum || (IntlVerificationOrErrorObjectEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class IntlVerificationWritable
 */
class IntlVerificationWritable {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.recipient) !== "undefined") {
            this.recipient = input.recipient;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.primary_line) !== "undefined") {
            this.primary_line = input.primary_line;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.secondary_line) !== "undefined") {
            this.secondary_line = input.secondary_line;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.city) !== "undefined") {
            this.city = input.city;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.state) !== "undefined") {
            this.state = input.state;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.postal_code) !== "undefined") {
            this.postal_code = input.postal_code;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.country) !== "undefined") {
            this.country = input.country;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.address) !== "undefined") {
            this.address = input.address;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/**
 *
 * @export
 * @class IntlVerifications
 */
class IntlVerifications {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.addresses) !== "undefined") {
            this.addresses = input.addresses;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.errors) !== "undefined") {
            this.errors = input.errors;
        }
    }
    set addresses(items) {
        if (!this._addresses) {
            this._addresses = [];
        }
        if (!this._error_addresses) {
            this._error_addresses = [];
        }
        for (const item of items) {
            if (item.id) {
                this._addresses.push(new IntlVerification(item));
            }
            if (item.error) {
                this._error_addresses.push(new BulkError(item));
            }
        }
    }
    get addresses() {
        return this._addresses || [];
    }
    get errorAddresses() {
        return this._error_addresses || [];
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class IntlVerificationsPayload
 */
class IntlVerificationsPayload {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.addresses) !== "undefined") {
            this.addresses = input.addresses;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class Letter
 */
class Letter {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.to) !== "undefined") {
            this.to = input.to;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.from) !== "undefined") {
            this.from = input.from;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.carrier) !== "undefined") {
            this.carrier = input.carrier;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.thumbnails) !== "undefined") {
            this.thumbnails = input.thumbnails;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.expected_delivery_date) !== "undefined") {
            this.expected_delivery_date = input.expected_delivery_date;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.date_created) !== "undefined") {
            this.date_created = input.date_created;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.date_modified) !== "undefined") {
            this.date_modified = input.date_modified;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.deleted) !== "undefined") {
            this.deleted = input.deleted;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.template_id) !== "undefined") {
            this.template_id = input.template_id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.template_version_id) !== "undefined") {
            this.template_version_id = input.template_version_id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.url) !== "undefined") {
            this.url = input.url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.description) !== "undefined") {
            this.description = input.description;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.metadata) !== "undefined") {
            this.metadata = input.metadata;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.merge_variables) !== "undefined") {
            this.merge_variables = input.merge_variables;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.send_date) !== "undefined") {
            this.send_date = input.send_date;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.extra_service) !== "undefined") {
            this.extra_service = input.extra_service;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.tracking_number) !== "undefined") {
            this.tracking_number = input.tracking_number;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.tracking_events) !== "undefined") {
            this.tracking_events = input.tracking_events;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.return_address) !== "undefined") {
            this.return_address = input.return_address;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.mail_type) !== "undefined") {
            this.mail_type = input.mail_type;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.color) !== "undefined") {
            this.color = input.color;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.double_sided) !== "undefined") {
            this.double_sided = input.double_sided;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.address_placement) !== "undefined") {
            this.address_placement = input.address_placement;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.return_envelope) !== "undefined") {
            this.return_envelope = input.return_envelope;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.perforated_page) !== "undefined") {
            this.perforated_page = input.perforated_page;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.custom_envelope) !== "undefined") {
            this.custom_envelope = input.custom_envelope;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.campaign_id) !== "undefined") {
            this.campaign_id = input.campaign_id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.use_type) !== "undefined") {
            this.use_type = input.use_type;
        }
    }
    get id() {
        return this._id;
    }
    set id(newValue) {
        if (newValue && !/^ltr_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid id provided");
        }
        this._id = newValue;
    }
    get template_id() {
        return (this._template_id || undefined);
    }
    set template_id(newValue) {
        if (newValue && !/^tmpl_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid template_id provided");
        }
        this._template_id = newValue;
    }
    get template_version_id() {
        return (this._template_version_id || undefined);
    }
    set template_version_id(newValue) {
        if (newValue && !/^vrsn_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid template_version_id provided");
        }
        this._template_version_id = newValue;
    }
    get url() {
        return (this._url || undefined);
    }
    set url(newValue) {
        if (newValue &&
            !/^https:\/\/(lob-assets|lob-assets-staging)\.com\/(letters|postcards|bank-accounts|checks|self-mailers|cards)\/[a-z]{3,4}_[a-z0-9]{15,16}(\.pdf|_thumb_[a-z]+_[0-9]+\.png)\?(version=[a-z0-9-]*&)?expires=[0-9]{10}&signature=[a-zA-Z0-9-_]+$/.test(newValue)) {
            throw new Error("Invalid url provided");
        }
        this._url = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var LetterCarrierEnum;
(function (LetterCarrierEnum) {
    LetterCarrierEnum["Usps"] = "USPS";
})(LetterCarrierEnum || (LetterCarrierEnum = {}));
/**
 * @export
 * @enum {string}
 */
var LetterObjectEnum;
(function (LetterObjectEnum) {
    LetterObjectEnum["Letter"] = "letter";
})(LetterObjectEnum || (LetterObjectEnum = {}));
/**
 * @export
 * @enum {string}
 */
var LetterAddressPlacementEnum;
(function (LetterAddressPlacementEnum) {
    LetterAddressPlacementEnum["TopFirstPage"] = "top_first_page";
    LetterAddressPlacementEnum["InsertBlankPage"] = "insert_blank_page";
    LetterAddressPlacementEnum["BottomFirstPageCenter"] = "bottom_first_page_center";
    LetterAddressPlacementEnum["BottomFirstPage"] = "bottom_first_page";
})(LetterAddressPlacementEnum || (LetterAddressPlacementEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * A nested custom envelope object containing more information about the custom envelope used or `null` if a custom envelope was not used.  Accepts an envelope ID for any customized envelope with available inventory. If no inventory is available for the specified ID, the letter will not be sent, and an error will be returned. If the letter has more than 6 sheets, it will be sent in a blank flat envelope. Custom envelopes may be created and ordered from the dashboard. This feature is exclusive to certain customers. Upgrade to the appropriate [Print & Mail Edition](https://dashboard.lob.com/#/settings/editions) to gain access.
 * @export
 * @class LetterCustomEnvelope
 */
class LetterCustomEnvelope {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.url) !== "undefined") {
            this.url = input.url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var LetterCustomEnvelopeObjectEnum;
(function (LetterCustomEnvelopeObjectEnum) {
    LetterCustomEnvelopeObjectEnum["Envelope"] = "envelope";
})(LetterCustomEnvelopeObjectEnum || (LetterCustomEnvelopeObjectEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Lob uses RESTful HTTP response codes to indicate success or failure of an API request. In general, 2xx indicates success, 4xx indicate an input error, and 5xx indicates an error on Lob\'s end.
 * @export
 * @class LetterDeletion
 */
class LetterDeletion {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.deleted) !== "undefined") {
            this.deleted = input.deleted;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
    }
    get id() {
        return (this._id || undefined);
    }
    set id(newValue) {
        if (newValue && !/^ltr_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid id provided");
        }
        this._id = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var LetterDeletionObjectEnum;
(function (LetterDeletionObjectEnum) {
    LetterDeletionObjectEnum["LetterDeleted"] = "letter_deleted";
})(LetterDeletionObjectEnum || (LetterDeletionObjectEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Properties that the letters in your Creative should have.
 * @export
 * @class LetterDetailsReturned
 */
class LetterDetailsReturned {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.color) !== "undefined") {
            this.color = input.color;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.cards) !== "undefined") {
            this.cards = input.cards;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.address_placement) !== "undefined") {
            this.address_placement = input.address_placement;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.custom_envelope) !== "undefined") {
            this.custom_envelope = input.custom_envelope;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.double_sided) !== "undefined") {
            this.double_sided = input.double_sided;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.extra_service) !== "undefined") {
            this.extra_service = input.extra_service;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.mail_type) !== "undefined") {
            this.mail_type = input.mail_type;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.return_envelope) !== "undefined") {
            this.return_envelope = input.return_envelope;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.bleed) !== "undefined") {
            this.bleed = input.bleed;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.file_original_url) !== "undefined") {
            this.file_original_url = input.file_original_url;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var LetterDetailsReturnedAddressPlacementEnum;
(function (LetterDetailsReturnedAddressPlacementEnum) {
    LetterDetailsReturnedAddressPlacementEnum["TopFirstPage"] = "top_first_page";
    LetterDetailsReturnedAddressPlacementEnum["InsertBlankPage"] = "insert_blank_page";
    LetterDetailsReturnedAddressPlacementEnum["BottomFirstPageCenter"] = "bottom_first_page_center";
    LetterDetailsReturnedAddressPlacementEnum["BottomFirstPage"] = "bottom_first_page";
})(LetterDetailsReturnedAddressPlacementEnum || (LetterDetailsReturnedAddressPlacementEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Properties that the letters in your Creative should have.
 * @export
 * @class LetterDetailsWritable
 */
class LetterDetailsWritable {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.address_placement) !== "undefined") {
            this.address_placement = input.address_placement;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.cards) !== "undefined") {
            this.cards = input.cards;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.color) !== "undefined") {
            this.color = input.color;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.double_sided) !== "undefined") {
            this.double_sided = input.double_sided;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.extra_service) !== "undefined") {
            this.extra_service = input.extra_service;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.mail_type) !== "undefined") {
            this.mail_type = input.mail_type;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.return_envelope) !== "undefined") {
            this.return_envelope = input.return_envelope;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.custom_envelope) !== "undefined") {
            this.custom_envelope = input.custom_envelope;
        }
    }
    get custom_envelope() {
        return (this._custom_envelope || null || undefined);
    }
    set custom_envelope(newValue) {
        if (newValue && !/^env_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid custom_envelope provided");
        }
        this._custom_envelope = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var LetterDetailsWritableAddressPlacementEnum;
(function (LetterDetailsWritableAddressPlacementEnum) {
    LetterDetailsWritableAddressPlacementEnum["TopFirstPage"] = "top_first_page";
    LetterDetailsWritableAddressPlacementEnum["InsertBlankPage"] = "insert_blank_page";
    LetterDetailsWritableAddressPlacementEnum["BottomFirstPageCenter"] = "bottom_first_page_center";
    LetterDetailsWritableAddressPlacementEnum["BottomFirstPage"] = "bottom_first_page";
})(LetterDetailsWritableAddressPlacementEnum || (LetterDetailsWritableAddressPlacementEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class LetterEditable
 */
class LetterEditable {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.description) !== "undefined") {
            this.description = input.description;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.metadata) !== "undefined") {
            this.metadata = input.metadata;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.mail_type) !== "undefined") {
            this.mail_type = input.mail_type;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.merge_variables) !== "undefined") {
            this.merge_variables = input.merge_variables;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.send_date) !== "undefined") {
            this.send_date = input.send_date;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.color) !== "undefined") {
            this.color = input.color;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.double_sided) !== "undefined") {
            this.double_sided = input.double_sided;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.address_placement) !== "undefined") {
            this.address_placement = input.address_placement;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.return_envelope) !== "undefined") {
            this.return_envelope = input.return_envelope;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.perforated_page) !== "undefined") {
            this.perforated_page = input.perforated_page;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.custom_envelope) !== "undefined") {
            this.custom_envelope = input.custom_envelope;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.to) !== "undefined") {
            this.to = input.to;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.from) !== "undefined") {
            this.from = input.from;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.file) !== "undefined") {
            this.file = input.file;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.extra_service) !== "undefined") {
            this.extra_service = input.extra_service;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.cards) !== "undefined") {
            this.cards = input.cards;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.billing_group_id) !== "undefined") {
            this.billing_group_id = input.billing_group_id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.qr_code) !== "undefined") {
            this.qr_code = input.qr_code;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.use_type) !== "undefined") {
            this.use_type = input.use_type;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var LetterEditableAddressPlacementEnum;
(function (LetterEditableAddressPlacementEnum) {
    LetterEditableAddressPlacementEnum["TopFirstPage"] = "top_first_page";
    LetterEditableAddressPlacementEnum["InsertBlankPage"] = "insert_blank_page";
    LetterEditableAddressPlacementEnum["BottomFirstPageCenter"] = "bottom_first_page_center";
    LetterEditableAddressPlacementEnum["BottomFirstPage"] = "bottom_first_page";
})(LetterEditableAddressPlacementEnum || (LetterEditableAddressPlacementEnum = {}));
/**
 * @export
 * @enum {string}
 */
var LetterEditableExtraServiceEnum;
(function (LetterEditableExtraServiceEnum) {
    LetterEditableExtraServiceEnum["Certified"] = "certified";
    LetterEditableExtraServiceEnum["CertifiedReturnReceipt"] = "certified_return_receipt";
    LetterEditableExtraServiceEnum["Registered"] = "registered";
    LetterEditableExtraServiceEnum["Null"] = "null";
})(LetterEditableExtraServiceEnum || (LetterEditableExtraServiceEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class LetterList
 */
class LetterList {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.data) !== "undefined") {
            this.data = input.data;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.next_url) !== "undefined") {
            this.next_url = input.next_url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.previous_url) !== "undefined") {
            this.previous_url = input.previous_url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.count) !== "undefined") {
            this.count = input.count;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.total_count) !== "undefined") {
            this.total_count = input.total_count;
        }
    }
    get nextPageToken() {
        var _a;
        if (!this.next_url) {
            return undefined;
        }
        return (_a = this.next_url
            .split("?")[1]
            .split("&")
            .find((raw) => raw.includes("after="))) === null || _a === void 0 ? void 0 : _a.split("=")[1];
    }
    get previousPageToken() {
        var _a;
        if (!this.previous_url) {
            return undefined;
        }
        return (_a = this.previous_url
            .split("?")[1]
            .split("&")
            .find((raw) => raw.includes("before="))) === null || _a === void 0 ? void 0 : _a.split("=")[1];
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Lob Confidence Score is a nested object that provides a numerical value between 0-100 of the likelihood that an address is deliverable based on Lob’s mail delivery data to over half of US households.
 * @export
 * @class LobConfidenceScore
 */
class LobConfidenceScore {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.score) !== "undefined") {
            this.score = input.score;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.level) !== "undefined") {
            this.level = input.level;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var LobConfidenceScoreLevelEnum;
(function (LobConfidenceScoreLevelEnum) {
    LobConfidenceScoreLevelEnum["High"] = "high";
    LobConfidenceScoreLevelEnum["Medium"] = "medium";
    LobConfidenceScoreLevelEnum["Low"] = "low";
    LobConfidenceScoreLevelEnum["Empty"] = "";
})(LobConfidenceScoreLevelEnum || (LobConfidenceScoreLevelEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Lob uses RESTful HTTP response codes to indicate success or failure of an API request.
 * @export
 * @class LobError
 */
class LobError {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.message) !== "undefined") {
            this.message = input.message;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.status_code) !== "undefined") {
            this.status_code = input.status_code;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.code) !== "undefined") {
            this.code = input.code;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var LobErrorStatusCodeEnum;
(function (LobErrorStatusCodeEnum) {
    LobErrorStatusCodeEnum[LobErrorStatusCodeEnum["NUMBER_401"] = 401] = "NUMBER_401";
    LobErrorStatusCodeEnum[LobErrorStatusCodeEnum["NUMBER_403"] = 403] = "NUMBER_403";
    LobErrorStatusCodeEnum[LobErrorStatusCodeEnum["NUMBER_404"] = 404] = "NUMBER_404";
    LobErrorStatusCodeEnum[LobErrorStatusCodeEnum["NUMBER_413"] = 413] = "NUMBER_413";
    LobErrorStatusCodeEnum[LobErrorStatusCodeEnum["NUMBER_422"] = 422] = "NUMBER_422";
    LobErrorStatusCodeEnum[LobErrorStatusCodeEnum["NUMBER_429"] = 429] = "NUMBER_429";
    LobErrorStatusCodeEnum[LobErrorStatusCodeEnum["NUMBER_500"] = 500] = "NUMBER_500";
})(LobErrorStatusCodeEnum || (LobErrorStatusCodeEnum = {}));
/**
 * @export
 * @enum {string}
 */
var LobErrorCodeEnum;
(function (LobErrorCodeEnum) {
    LobErrorCodeEnum["BadRequest"] = "bad_request";
    LobErrorCodeEnum["Conflict"] = "conflict";
    LobErrorCodeEnum["FeatureLimitReached"] = "feature_limit_reached";
    LobErrorCodeEnum["InternalServerError"] = "internal_server_error";
    LobErrorCodeEnum["Invalid"] = "invalid";
    LobErrorCodeEnum["NotDeletable"] = "not_deletable";
    LobErrorCodeEnum["NotFound"] = "not_found";
    LobErrorCodeEnum["RequestTimeout"] = "request_timeout";
    LobErrorCodeEnum["ServiceUnavailable"] = "service_unavailable";
    LobErrorCodeEnum["UnrecognizedEndpoint"] = "unrecognized_endpoint";
    LobErrorCodeEnum["UnsupportedLobVersion"] = "unsupported_lob_version";
    LobErrorCodeEnum["AddressLengthExceedsLimit"] = "address_length_exceeds_limit";
    LobErrorCodeEnum["BankAccountAlreadyVerified"] = "bank_account_already_verified";
    LobErrorCodeEnum["BankError"] = "bank_error";
    LobErrorCodeEnum["CustomEnvelopeInventoryDepleted"] = "custom_envelope_inventory_depleted";
    LobErrorCodeEnum["DeletedBankAccount"] = "deleted_bank_account";
    LobErrorCodeEnum["FailedDeliverabilityStrictness"] = "failed_deliverability_strictness";
    LobErrorCodeEnum["FilePagesBelowMin"] = "file_pages_below_min";
    LobErrorCodeEnum["FilePagesExceedMax"] = "file_pages_exceed_max";
    LobErrorCodeEnum["FileSizeExceedsLimit"] = "file_size_exceeds_limit";
    LobErrorCodeEnum["ForeignReturnAddress"] = "foreign_return_address";
    LobErrorCodeEnum["InconsistentPageDimensions"] = "inconsistent_page_dimensions";
    LobErrorCodeEnum["InvalidBankAccount"] = "invalid_bank_account";
    LobErrorCodeEnum["InvalidBankAccountVerification"] = "invalid_bank_account_verification";
    LobErrorCodeEnum["InvalidCheckInternational"] = "invalid_check_international";
    LobErrorCodeEnum["InvalidCountryCovid"] = "invalid_country_covid";
    LobErrorCodeEnum["InvalidFile"] = "invalid_file";
    LobErrorCodeEnum["InvalidFileDimensions"] = "invalid_file_dimensions";
    LobErrorCodeEnum["InvalidFileDownloadTime"] = "invalid_file_download_time";
    LobErrorCodeEnum["InvalidFileUrl"] = "invalid_file_url";
    LobErrorCodeEnum["InvalidImageDpi"] = "invalid_image_dpi";
    LobErrorCodeEnum["InvalidInternationalFeature"] = "invalid_international_feature";
    LobErrorCodeEnum["InvalidPerforationReturnEnvelope"] = "invalid_perforation_return_envelope";
    LobErrorCodeEnum["InvalidTemplateHtml"] = "invalid_template_html";
    LobErrorCodeEnum["MergeVariableRequired"] = "merge_variable_required";
    LobErrorCodeEnum["MergeVariableWhitespace"] = "merge_variable_whitespace";
    LobErrorCodeEnum["PaymentMethodUnverified"] = "payment_method_unverified";
    LobErrorCodeEnum["PdfEncrypted"] = "pdf_encrypted";
    LobErrorCodeEnum["SpecialCharactersRestricted"] = "special_characters_restricted";
    LobErrorCodeEnum["UnembeddedFonts"] = "unembedded_fonts";
    LobErrorCodeEnum["EmailRequired"] = "email_required";
    LobErrorCodeEnum["InvalidApiKey"] = "invalid_api_key";
    LobErrorCodeEnum["PublishableKeyNotAllowed"] = "publishable_key_not_allowed";
    LobErrorCodeEnum["RateLimitExceeded"] = "rate_limit_exceeded";
    LobErrorCodeEnum["Unauthorized"] = "unauthorized";
    LobErrorCodeEnum["UnauthorizedToken"] = "unauthorized_token";
    LobErrorCodeEnum["CardQuantityBelowMin"] = "card_quantity_below_min";
})(LobErrorCodeEnum || (LobErrorCodeEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class Location
 */
class Location {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.latitude) !== "undefined") {
            this.latitude = input.latitude;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.longitude) !== "undefined") {
            this.longitude = input.longitude;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * A nested object containing a breakdown of the analysis of a reverse geocoded location.
 * @export
 * @class LocationAnalysis
 */
class LocationAnalysis {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.latitude) !== "undefined") {
            this.latitude = input.latitude;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.longitude) !== "undefined") {
            this.longitude = input.longitude;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.distance) !== "undefined") {
            this.distance = input.distance;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * The use type for each mailpiece. Can be one of marketing, operational, or null. Null use_type is only allowed if an account default use_type is selected in Account Settings. For more information on use_type, see our  [Help Center article](https://help.lob.com/print-and-mail/building-a-mail-strategy/managing-mail-settings/declaring-mail-use-type).
 * @export
 * @enum {string}
 */
var LtrUseType;
(function (LtrUseType) {
    LtrUseType["Marketing"] = "marketing";
    LtrUseType["Operational"] = "operational";
    LtrUseType["Null"] = "null";
})(LtrUseType || (LtrUseType = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * A string designating the mail postage type: * `usps_first_class` - (default) * `usps_standard` - a [cheaper option](https://lob.com/pricing/print-mail#compare) which is less predictable and takes longer to deliver. `usps_standard` cannot be used with `4x6` postcards or for any postcards sent outside of the United States.
 * @export
 * @enum {string}
 */
var MailType;
(function (MailType) {
    MailType["FirstClass"] = "usps_first_class";
    MailType["Standard"] = "usps_standard";
})(MailType || (MailType = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class MultiLineAddress
 */
class MultiLineAddress {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.recipient) !== "undefined") {
            this.recipient = input.recipient;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.company) !== "undefined") {
            this.company = input.company;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.primary_line) !== "undefined") {
            this.primary_line = input.primary_line;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.secondary_line) !== "undefined") {
            this.secondary_line = input.secondary_line;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.urbanization) !== "undefined") {
            this.urbanization = input.urbanization;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.city) !== "undefined") {
            this.city = input.city;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.state) !== "undefined") {
            this.state = input.state;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.zip_code) !== "undefined") {
            this.zip_code = input.zip_code;
        }
    }
    get zip_code() {
        return (this._zip_code || undefined);
    }
    set zip_code(newValue) {
        if (newValue && !/^\d{5}((-)?\d{4})?$/.test(newValue)) {
            throw new Error("Invalid zip_code provided");
        }
        this._zip_code = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class MultipleComponents
 */
class MultipleComponents {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.recipient) !== "undefined") {
            this.recipient = input.recipient;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.primary_line) !== "undefined") {
            this.primary_line = input.primary_line;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.secondary_line) !== "undefined") {
            this.secondary_line = input.secondary_line;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.urbanization) !== "undefined") {
            this.urbanization = input.urbanization;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.city) !== "undefined") {
            this.city = input.city;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.state) !== "undefined") {
            this.state = input.state;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.zip_code) !== "undefined") {
            this.zip_code = input.zip_code;
        }
    }
    get zip_code() {
        return (this._zip_code || undefined);
    }
    set zip_code(newValue) {
        if (newValue && !/^\d{5}((-)?\d{4})?$/.test(newValue)) {
            throw new Error("Invalid zip_code provided");
        }
        this._zip_code = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class MultipleComponentsIntl
 */
class MultipleComponentsIntl {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.recipient) !== "undefined") {
            this.recipient = input.recipient;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.primary_line) !== "undefined") {
            this.primary_line = input.primary_line;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.secondary_line) !== "undefined") {
            this.secondary_line = input.secondary_line;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.city) !== "undefined") {
            this.city = input.city;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.state) !== "undefined") {
            this.state = input.state;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.postal_code) !== "undefined") {
            this.postal_code = input.postal_code;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.country) !== "undefined") {
            this.country = input.country;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class MultipleComponentsList
 */
class MultipleComponentsList {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.addresses) !== "undefined") {
            this.addresses = input.addresses;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * The mapping of column headers in your file to Lob-optional fields for the resource created. See our <a href=\"https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/campaign-audience-guide#optional-columns-3\" target=\"_blank\">Campaign Audience Guide</a> for additional details.
 * @export
 * @class OptionalAddressColumnMapping
 */
class OptionalAddressColumnMapping {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.address_line2) !== "undefined") {
            this.address_line2 = input.address_line2;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.company) !== "undefined") {
            this.company = input.company;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.address_country) !== "undefined") {
            this.address_country = input.address_country;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class PlaceholderModel
 */
class PlaceholderModel {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.return_envelope) !== "undefined") {
            this.return_envelope = input.return_envelope;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.address_domestic) !== "undefined") {
            this.address_domestic = input.address_domestic;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.letter_details_writable) !== "undefined") {
            this.letter_details_writable = input.letter_details_writable;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.postcard_details_writable) !== "undefined") {
            this.postcard_details_writable = input.postcard_details_writable;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.letter_details_returned) !== "undefined") {
            this.letter_details_returned = input.letter_details_returned;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.postcard_details_returned) !== "undefined") {
            this.postcard_details_returned = input.postcard_details_returned;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class Postcard
 */
class Postcard {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.to) !== "undefined") {
            this.to = input.to;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.from) !== "undefined") {
            this.from = input.from;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.carrier) !== "undefined") {
            this.carrier = input.carrier;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.thumbnails) !== "undefined") {
            this.thumbnails = input.thumbnails;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.size) !== "undefined") {
            this.size = input.size;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.expected_delivery_date) !== "undefined") {
            this.expected_delivery_date = input.expected_delivery_date;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.date_created) !== "undefined") {
            this.date_created = input.date_created;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.date_modified) !== "undefined") {
            this.date_modified = input.date_modified;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.deleted) !== "undefined") {
            this.deleted = input.deleted;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.front_template_id) !== "undefined") {
            this.front_template_id = input.front_template_id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.back_template_id) !== "undefined") {
            this.back_template_id = input.back_template_id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.front_template_version_id) !== "undefined") {
            this.front_template_version_id = input.front_template_version_id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.back_template_version_id) !== "undefined") {
            this.back_template_version_id = input.back_template_version_id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.tracking_events) !== "undefined") {
            this.tracking_events = input.tracking_events;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.url) !== "undefined") {
            this.url = input.url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.description) !== "undefined") {
            this.description = input.description;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.metadata) !== "undefined") {
            this.metadata = input.metadata;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.mail_type) !== "undefined") {
            this.mail_type = input.mail_type;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.merge_variables) !== "undefined") {
            this.merge_variables = input.merge_variables;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.send_date) !== "undefined") {
            this.send_date = input.send_date;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.use_type) !== "undefined") {
            this.use_type = input.use_type;
        }
    }
    get id() {
        return this._id;
    }
    set id(newValue) {
        if (newValue && !/^psc_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid id provided");
        }
        this._id = newValue;
    }
    get front_template_id() {
        return (this._front_template_id || null || undefined);
    }
    set front_template_id(newValue) {
        if (newValue && !/^tmpl_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid front_template_id provided");
        }
        this._front_template_id = newValue;
    }
    get back_template_id() {
        return (this._back_template_id || null || undefined);
    }
    set back_template_id(newValue) {
        if (newValue && !/^tmpl_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid back_template_id provided");
        }
        this._back_template_id = newValue;
    }
    get front_template_version_id() {
        return (this._front_template_version_id || null || undefined);
    }
    set front_template_version_id(newValue) {
        if (newValue && !/^vrsn_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid front_template_version_id provided");
        }
        this._front_template_version_id = newValue;
    }
    get back_template_version_id() {
        return (this._back_template_version_id || null || undefined);
    }
    set back_template_version_id(newValue) {
        if (newValue && !/^vrsn_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid back_template_version_id provided");
        }
        this._back_template_version_id = newValue;
    }
    get url() {
        return this._url;
    }
    set url(newValue) {
        if (newValue &&
            !/^https:\/\/(lob-assets|lob-assets-staging)\.com\/(letters|postcards|bank-accounts|checks|self-mailers|cards)\/[a-z]{3,4}_[a-z0-9]{15,16}(\.pdf|_thumb_[a-z]+_[0-9]+\.png)\?(version=[a-z0-9-]*&)?expires=[0-9]{10}&signature=[a-zA-Z0-9-_]+$/.test(newValue)) {
            throw new Error("Invalid url provided");
        }
        this._url = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var PostcardCarrierEnum;
(function (PostcardCarrierEnum) {
    PostcardCarrierEnum["Usps"] = "USPS";
})(PostcardCarrierEnum || (PostcardCarrierEnum = {}));
/**
 * @export
 * @enum {string}
 */
var PostcardObjectEnum;
(function (PostcardObjectEnum) {
    PostcardObjectEnum["Postcard"] = "postcard";
})(PostcardObjectEnum || (PostcardObjectEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Lob uses RESTful HTTP response codes to indicate success or failure of an API request. In general, 2xx indicates success, 4xx indicate an input error, and 5xx indicates an error on Lob\'s end.
 * @export
 * @class PostcardDeletion
 */
class PostcardDeletion {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.deleted) !== "undefined") {
            this.deleted = input.deleted;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
    }
    get id() {
        return (this._id || undefined);
    }
    set id(newValue) {
        if (newValue && !/^psc_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid id provided");
        }
        this._id = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var PostcardDeletionObjectEnum;
(function (PostcardDeletionObjectEnum) {
    PostcardDeletionObjectEnum["PostcardDeleted"] = "postcard_deleted";
})(PostcardDeletionObjectEnum || (PostcardDeletionObjectEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Properties that the postcards in your Creative should have.
 * @export
 * @class PostcardDetailsReturned
 */
class PostcardDetailsReturned {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.mail_type) !== "undefined") {
            this.mail_type = input.mail_type;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.size) !== "undefined") {
            this.size = input.size;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.setting) !== "undefined") {
            this.setting = input.setting;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.front_original_url) !== "undefined") {
            this.front_original_url = input.front_original_url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.back_original_url) !== "undefined") {
            this.back_original_url = input.back_original_url;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Properties that the postcards in your Creative should have.
 * @export
 * @class PostcardDetailsWritable
 */
class PostcardDetailsWritable {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.mail_type) !== "undefined") {
            this.mail_type = input.mail_type;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.size) !== "undefined") {
            this.size = input.size;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class PostcardEditable
 */
class PostcardEditable {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.to) !== "undefined") {
            this.to = input.to;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.from) !== "undefined") {
            this.from = input.from;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.size) !== "undefined") {
            this.size = input.size;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.description) !== "undefined") {
            this.description = input.description;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.metadata) !== "undefined") {
            this.metadata = input.metadata;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.mail_type) !== "undefined") {
            this.mail_type = input.mail_type;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.merge_variables) !== "undefined") {
            this.merge_variables = input.merge_variables;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.send_date) !== "undefined") {
            this.send_date = input.send_date;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.front) !== "undefined") {
            this.front = input.front;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.back) !== "undefined") {
            this.back = input.back;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.billing_group_id) !== "undefined") {
            this.billing_group_id = input.billing_group_id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.qr_code) !== "undefined") {
            this.qr_code = input.qr_code;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.use_type) !== "undefined") {
            this.use_type = input.use_type;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class PostcardList
 */
class PostcardList {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.data) !== "undefined") {
            this.data = input.data;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.next_url) !== "undefined") {
            this.next_url = input.next_url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.previous_url) !== "undefined") {
            this.previous_url = input.previous_url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.count) !== "undefined") {
            this.count = input.count;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.total_count) !== "undefined") {
            this.total_count = input.total_count;
        }
    }
    get nextPageToken() {
        var _a;
        if (!this.next_url) {
            return undefined;
        }
        return (_a = this.next_url
            .split("?")[1]
            .split("&")
            .find((raw) => raw.includes("after="))) === null || _a === void 0 ? void 0 : _a.split("=")[1];
    }
    get previousPageToken() {
        var _a;
        if (!this.previous_url) {
            return undefined;
        }
        return (_a = this.previous_url
            .split("?")[1]
            .split("&")
            .find((raw) => raw.includes("before="))) === null || _a === void 0 ? void 0 : _a.split("=")[1];
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Specifies the size of the postcard. Only `4x6` postcards can be sent to international destinations.
 * @export
 * @enum {string}
 */
var PostcardSize;
(function (PostcardSize) {
    PostcardSize["_4x6"] = "4x6";
    PostcardSize["_6x9"] = "6x9";
    PostcardSize["_6x11"] = "6x11";
})(PostcardSize || (PostcardSize = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * The use type for each mailpiece. Can be one of marketing, operational, or null. Null use_type is only allowed if an account default use_type is selected in Account Settings. For more information on use_type, see our  [Help Center article](https://help.lob.com/print-and-mail/building-a-mail-strategy/managing-mail-settings/declaring-mail-use-type).
 * @export
 * @enum {string}
 */
var PscUseType;
(function (PscUseType) {
    PscUseType["Marketing"] = "marketing";
    PscUseType["Operational"] = "operational";
    PscUseType["Null"] = "null";
})(PscUseType || (PscUseType = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Customize and place a QR code on the creative at the required position.
 * @export
 * @class QrCode
 */
class QrCode {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.position) !== "undefined") {
            this.position = input.position;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.top) !== "undefined") {
            this.top = input.top;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.right) !== "undefined") {
            this.right = input.right;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.left) !== "undefined") {
            this.left = input.left;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.bottom) !== "undefined") {
            this.bottom = input.bottom;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.redirect_url) !== "undefined") {
            this.redirect_url = input.redirect_url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.width) !== "undefined") {
            this.width = input.width;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var QrCodePositionEnum;
(function (QrCodePositionEnum) {
    QrCodePositionEnum["Fixed"] = "fixed";
    QrCodePositionEnum["Relative"] = "relative";
})(QrCodePositionEnum || (QrCodePositionEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * The mapping of column headers in your file to Lob-required fields for the resource created. See our <a href=\"https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/campaign-audience-guide#required-columns-2\" target=\"_blank\">Campaign Audience Guide</a> for additional details.
 * @export
 * @class RequiredAddressColumnMapping
 */
class RequiredAddressColumnMapping {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.name) !== "undefined") {
            this.name = input.name;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.address_line1) !== "undefined") {
            this.address_line1 = input.address_line1;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.address_city) !== "undefined") {
            this.address_city = input.address_city;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.address_state) !== "undefined") {
            this.address_state = input.address_state;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.address_zip) !== "undefined") {
            this.address_zip = input.address_zip;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class ReturnEnvelope
 */
class ReturnEnvelope {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.alias) !== "undefined") {
            this.alias = input.alias;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.url) !== "undefined") {
            this.url = input.url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class ReverseGeocode
 */
class ReverseGeocode {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.addresses) !== "undefined") {
            this.addresses = input.addresses;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
    }
    get id() {
        return (this._id || undefined);
    }
    set id(newValue) {
        if (newValue && !/^us_reverse_geocode_[a-zA-Z0-9_]+$/.test(newValue)) {
            throw new Error("Invalid id provided");
        }
        this._id = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var ReverseGeocodeObjectEnum;
(function (ReverseGeocodeObjectEnum) {
    ReverseGeocodeObjectEnum["UsReverseGeocodeLookup"] = "us_reverse_geocode_lookup";
})(ReverseGeocodeObjectEnum || (ReverseGeocodeObjectEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class SelfMailer
 */
class SelfMailer {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.to) !== "undefined") {
            this.to = input.to;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.from) !== "undefined") {
            this.from = input.from;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.size) !== "undefined") {
            this.size = input.size;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.description) !== "undefined") {
            this.description = input.description;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.metadata) !== "undefined") {
            this.metadata = input.metadata;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.mail_type) !== "undefined") {
            this.mail_type = input.mail_type;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.merge_variables) !== "undefined") {
            this.merge_variables = input.merge_variables;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.send_date) !== "undefined") {
            this.send_date = input.send_date;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.outside_template_id) !== "undefined") {
            this.outside_template_id = input.outside_template_id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.inside_template_id) !== "undefined") {
            this.inside_template_id = input.inside_template_id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.outside_template_version_id) !== "undefined") {
            this.outside_template_version_id = input.outside_template_version_id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.inside_template_version_id) !== "undefined") {
            this.inside_template_version_id = input.inside_template_version_id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.tracking_events) !== "undefined") {
            this.tracking_events = input.tracking_events;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.url) !== "undefined") {
            this.url = input.url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.use_type) !== "undefined") {
            this.use_type = input.use_type;
        }
    }
    get id() {
        return this._id;
    }
    set id(newValue) {
        if (newValue && !/^sfm_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid id provided");
        }
        this._id = newValue;
    }
    get outside_template_id() {
        return (this._outside_template_id || null || undefined);
    }
    set outside_template_id(newValue) {
        if (newValue && !/^tmpl_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid outside_template_id provided");
        }
        this._outside_template_id = newValue;
    }
    get inside_template_id() {
        return (this._inside_template_id || null || undefined);
    }
    set inside_template_id(newValue) {
        if (newValue && !/^tmpl_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid inside_template_id provided");
        }
        this._inside_template_id = newValue;
    }
    get outside_template_version_id() {
        return (this._outside_template_version_id || null || undefined);
    }
    set outside_template_version_id(newValue) {
        if (newValue && !/^vrsn_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid outside_template_version_id provided");
        }
        this._outside_template_version_id = newValue;
    }
    get inside_template_version_id() {
        return (this._inside_template_version_id || null || undefined);
    }
    set inside_template_version_id(newValue) {
        if (newValue && !/^vrsn_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid inside_template_version_id provided");
        }
        this._inside_template_version_id = newValue;
    }
    get url() {
        return this._url;
    }
    set url(newValue) {
        if (newValue &&
            !/^https:\/\/(lob-assets|lob-assets-staging)\.com\/(letters|postcards|bank-accounts|checks|self-mailers|cards)\/[a-z]{3,4}_[a-z0-9]{15,16}(\.pdf|_thumb_[a-z]+_[0-9]+\.png)\?(version=[a-z0-9-]*&)?expires=[0-9]{10}&signature=[a-zA-Z0-9-_]+$/.test(newValue)) {
            throw new Error("Invalid url provided");
        }
        this._url = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var SelfMailerObjectEnum;
(function (SelfMailerObjectEnum) {
    SelfMailerObjectEnum["SelfMailer"] = "self_mailer";
})(SelfMailerObjectEnum || (SelfMailerObjectEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Lob uses RESTful HTTP response codes to indicate success or failure of an API request. In general, 2xx indicates success, 4xx indicate an input error, and 5xx indicates an error on Lob\'s end.
 * @export
 * @class SelfMailerDeletion
 */
class SelfMailerDeletion {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.deleted) !== "undefined") {
            this.deleted = input.deleted;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
    }
    get id() {
        return (this._id || undefined);
    }
    set id(newValue) {
        if (newValue && !/^sfm_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid id provided");
        }
        this._id = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var SelfMailerDeletionObjectEnum;
(function (SelfMailerDeletionObjectEnum) {
    SelfMailerDeletionObjectEnum["SelfMailerDeleted"] = "self_mailer_deleted";
})(SelfMailerDeletionObjectEnum || (SelfMailerDeletionObjectEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class SelfMailerEditable
 */
class SelfMailerEditable {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.to) !== "undefined") {
            this.to = input.to;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.from) !== "undefined") {
            this.from = input.from;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.size) !== "undefined") {
            this.size = input.size;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.description) !== "undefined") {
            this.description = input.description;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.metadata) !== "undefined") {
            this.metadata = input.metadata;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.mail_type) !== "undefined") {
            this.mail_type = input.mail_type;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.merge_variables) !== "undefined") {
            this.merge_variables = input.merge_variables;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.send_date) !== "undefined") {
            this.send_date = input.send_date;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.inside) !== "undefined") {
            this.inside = input.inside;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.outside) !== "undefined") {
            this.outside = input.outside;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.billing_group_id) !== "undefined") {
            this.billing_group_id = input.billing_group_id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.use_type) !== "undefined") {
            this.use_type = input.use_type;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class SelfMailerList
 */
class SelfMailerList {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.data) !== "undefined") {
            this.data = input.data;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.next_url) !== "undefined") {
            this.next_url = input.next_url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.previous_url) !== "undefined") {
            this.previous_url = input.previous_url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.count) !== "undefined") {
            this.count = input.count;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.total_count) !== "undefined") {
            this.total_count = input.total_count;
        }
    }
    get nextPageToken() {
        var _a;
        if (!this.next_url) {
            return undefined;
        }
        return (_a = this.next_url
            .split("?")[1]
            .split("&")
            .find((raw) => raw.includes("after="))) === null || _a === void 0 ? void 0 : _a.split("=")[1];
    }
    get previousPageToken() {
        var _a;
        if (!this.previous_url) {
            return undefined;
        }
        return (_a = this.previous_url
            .split("?")[1]
            .split("&")
            .find((raw) => raw.includes("before="))) === null || _a === void 0 ? void 0 : _a.split("=")[1];
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Specifies the size of the self mailer.
 * @export
 * @enum {string}
 */
var SelfMailerSize;
(function (SelfMailerSize) {
    SelfMailerSize["_6x18Bifold"] = "6x18_bifold";
    SelfMailerSize["_11x9Bifold"] = "11x9_bifold";
    SelfMailerSize["_12x9Bifold"] = "12x9_bifold";
})(SelfMailerSize || (SelfMailerSize = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * The use type for each mailpiece. Can be one of marketing, operational, or null. Null use_type is only allowed if an account default use_type is selected in Account Settings. For more information on use_type, see our  [Help Center article](https://help.lob.com/print-and-mail/building-a-mail-strategy/managing-mail-settings/declaring-mail-use-type).
 * @export
 * @enum {string}
 */
var SfmUseType;
(function (SfmUseType) {
    SfmUseType["Marketing"] = "marketing";
    SfmUseType["Operational"] = "operational";
    SfmUseType["Null"] = "null";
})(SfmUseType || (SfmUseType = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class SortBy
 */
class SortBy {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.date_created) !== "undefined") {
            this.date_created = input.date_created;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.send_date) !== "undefined") {
            this.send_date = input.send_date;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var SortByDateCreatedEnum;
(function (SortByDateCreatedEnum) {
    SortByDateCreatedEnum["Asc"] = "asc";
    SortByDateCreatedEnum["Desc"] = "desc";
})(SortByDateCreatedEnum || (SortByDateCreatedEnum = {}));
/**
 * @export
 * @enum {string}
 */
var SortBySendDateEnum;
(function (SortBySendDateEnum) {
    SortBySendDateEnum["Asc"] = "asc";
    SortBySendDateEnum["Desc"] = "desc";
})(SortBySendDateEnum || (SortBySendDateEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class SortBy1
 */
class SortBy1 {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.date_created) !== "undefined") {
            this.date_created = input.date_created;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.send_date) !== "undefined") {
            this.send_date = input.send_date;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var SortBy1DateCreatedEnum;
(function (SortBy1DateCreatedEnum) {
    SortBy1DateCreatedEnum["Asc"] = "asc";
    SortBy1DateCreatedEnum["Desc"] = "desc";
})(SortBy1DateCreatedEnum || (SortBy1DateCreatedEnum = {}));
/**
 * @export
 * @enum {string}
 */
var SortBy1SendDateEnum;
(function (SortBy1SendDateEnum) {
    SortBy1SendDateEnum["Asc"] = "asc";
    SortBy1SendDateEnum["Desc"] = "desc";
})(SortBy1SendDateEnum || (SortBy1SendDateEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class SortBy2
 */
class SortBy2 {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.date_created) !== "undefined") {
            this.date_created = input.date_created;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.send_date) !== "undefined") {
            this.send_date = input.send_date;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var SortBy2DateCreatedEnum;
(function (SortBy2DateCreatedEnum) {
    SortBy2DateCreatedEnum["Asc"] = "asc";
    SortBy2DateCreatedEnum["Desc"] = "desc";
})(SortBy2DateCreatedEnum || (SortBy2DateCreatedEnum = {}));
/**
 * @export
 * @enum {string}
 */
var SortBy2SendDateEnum;
(function (SortBy2SendDateEnum) {
    SortBy2SendDateEnum["Asc"] = "asc";
    SortBy2SendDateEnum["Desc"] = "desc";
})(SortBy2SendDateEnum || (SortBy2SendDateEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class SortBy3
 */
class SortBy3 {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.date_created) !== "undefined") {
            this.date_created = input.date_created;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.send_date) !== "undefined") {
            this.send_date = input.send_date;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var SortBy3DateCreatedEnum;
(function (SortBy3DateCreatedEnum) {
    SortBy3DateCreatedEnum["Asc"] = "asc";
    SortBy3DateCreatedEnum["Desc"] = "desc";
})(SortBy3DateCreatedEnum || (SortBy3DateCreatedEnum = {}));
/**
 * @export
 * @enum {string}
 */
var SortBy3SendDateEnum;
(function (SortBy3SendDateEnum) {
    SortBy3SendDateEnum["Asc"] = "asc";
    SortBy3SendDateEnum["Desc"] = "desc";
})(SortBy3SendDateEnum || (SortBy3SendDateEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class SortByDateModified
 */
class SortByDateModified {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.date_created) !== "undefined") {
            this.date_created = input.date_created;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.date_modified) !== "undefined") {
            this.date_modified = input.date_modified;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var SortByDateModifiedDateCreatedEnum;
(function (SortByDateModifiedDateCreatedEnum) {
    SortByDateModifiedDateCreatedEnum["Asc"] = "asc";
    SortByDateModifiedDateCreatedEnum["Desc"] = "desc";
})(SortByDateModifiedDateCreatedEnum || (SortByDateModifiedDateCreatedEnum = {}));
/**
 * @export
 * @enum {string}
 */
var SortByDateModifiedDateModifiedEnum;
(function (SortByDateModifiedDateModifiedEnum) {
    SortByDateModifiedDateModifiedEnum["Asc"] = "asc";
    SortByDateModifiedDateModifiedEnum["Desc"] = "desc";
})(SortByDateModifiedDateModifiedEnum || (SortByDateModifiedDateModifiedEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class Suggestions
 */
class Suggestions {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.primary_line) !== "undefined") {
            this.primary_line = input.primary_line;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.city) !== "undefined") {
            this.city = input.city;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.state) !== "undefined") {
            this.state = input.state;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.zip_code) !== "undefined") {
            this.zip_code = input.zip_code;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var SuggestionsObjectEnum;
(function (SuggestionsObjectEnum) {
    SuggestionsObjectEnum["UsAutocompletion"] = "us_autocompletion";
})(SuggestionsObjectEnum || (SuggestionsObjectEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class Template
 */
class Template {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.description) !== "undefined") {
            this.description = input.description;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.versions) !== "undefined") {
            this.versions = input.versions;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.published_version) !== "undefined") {
            this.published_version = input.published_version;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.metadata) !== "undefined") {
            this.metadata = input.metadata;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.date_created) !== "undefined") {
            this.date_created = input.date_created;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.date_modified) !== "undefined") {
            this.date_modified = input.date_modified;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.deleted) !== "undefined") {
            this.deleted = input.deleted;
        }
    }
    get id() {
        return this._id;
    }
    set id(newValue) {
        if (newValue && !/^tmpl_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid id provided");
        }
        this._id = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var TemplateObjectEnum;
(function (TemplateObjectEnum) {
    TemplateObjectEnum["Template"] = "template";
})(TemplateObjectEnum || (TemplateObjectEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Lob uses RESTful HTTP response codes to indicate success or failure of an API request. In general, 2xx indicates success, 4xx indicate an input error, and 5xx indicates an error on Lob\'s end.
 * @export
 * @class TemplateDeletion
 */
class TemplateDeletion {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.deleted) !== "undefined") {
            this.deleted = input.deleted;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
    }
    get id() {
        return (this._id || undefined);
    }
    set id(newValue) {
        if (newValue && !/^tmpl_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid id provided");
        }
        this._id = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var TemplateDeletionObjectEnum;
(function (TemplateDeletionObjectEnum) {
    TemplateDeletionObjectEnum["TemplateDeleted"] = "template_deleted";
})(TemplateDeletionObjectEnum || (TemplateDeletionObjectEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class TemplateList
 */
class TemplateList {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.data) !== "undefined") {
            this.data = input.data;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.next_url) !== "undefined") {
            this.next_url = input.next_url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.previous_url) !== "undefined") {
            this.previous_url = input.previous_url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.count) !== "undefined") {
            this.count = input.count;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.total_count) !== "undefined") {
            this.total_count = input.total_count;
        }
    }
    get nextPageToken() {
        var _a;
        if (!this.next_url) {
            return undefined;
        }
        return (_a = this.next_url
            .split("?")[1]
            .split("&")
            .find((raw) => raw.includes("after="))) === null || _a === void 0 ? void 0 : _a.split("=")[1];
    }
    get previousPageToken() {
        var _a;
        if (!this.previous_url) {
            return undefined;
        }
        return (_a = this.previous_url
            .split("?")[1]
            .split("&")
            .find((raw) => raw.includes("before="))) === null || _a === void 0 ? void 0 : _a.split("=")[1];
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class TemplateUpdate
 */
class TemplateUpdate {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.description) !== "undefined") {
            this.description = input.description;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.published_version) !== "undefined") {
            this.published_version = input.published_version;
        }
    }
    get published_version() {
        return (this._published_version || undefined);
    }
    set published_version(newValue) {
        if (newValue && !/^vrsn_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid published_version provided");
        }
        this._published_version = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class TemplateVersion
 */
class TemplateVersion {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.description) !== "undefined") {
            this.description = input.description;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.html) !== "undefined") {
            this.html = input.html;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.engine) !== "undefined") {
            this.engine = input.engine;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.suggest_json_editor) !== "undefined") {
            this.suggest_json_editor = input.suggest_json_editor;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.merge_variables) !== "undefined") {
            this.merge_variables = input.merge_variables;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.date_created) !== "undefined") {
            this.date_created = input.date_created;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.date_modified) !== "undefined") {
            this.date_modified = input.date_modified;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.deleted) !== "undefined") {
            this.deleted = input.deleted;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
    }
    get id() {
        return this._id;
    }
    set id(newValue) {
        if (newValue && !/^vrsn_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid id provided");
        }
        this._id = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var TemplateVersionObjectEnum;
(function (TemplateVersionObjectEnum) {
    TemplateVersionObjectEnum["Version"] = "version";
})(TemplateVersionObjectEnum || (TemplateVersionObjectEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Lob uses RESTful HTTP response codes to indicate success or failure of an API request. In general, 2xx indicates success, 4xx indicate an input error, and 5xx indicates an error on Lob\'s end.
 * @export
 * @class TemplateVersionDeletion
 */
class TemplateVersionDeletion {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.deleted) !== "undefined") {
            this.deleted = input.deleted;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
    }
    get id() {
        return (this._id || undefined);
    }
    set id(newValue) {
        if (newValue && !/^vrsn_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid id provided");
        }
        this._id = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var TemplateVersionDeletionObjectEnum;
(function (TemplateVersionDeletionObjectEnum) {
    TemplateVersionDeletionObjectEnum["TemplateVersionDeleted"] = "template_version_deleted";
})(TemplateVersionDeletionObjectEnum || (TemplateVersionDeletionObjectEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class TemplateVersionList
 */
class TemplateVersionList {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.data) !== "undefined") {
            this.data = input.data;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.next_url) !== "undefined") {
            this.next_url = input.next_url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.previous_url) !== "undefined") {
            this.previous_url = input.previous_url;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.count) !== "undefined") {
            this.count = input.count;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.total_count) !== "undefined") {
            this.total_count = input.total_count;
        }
    }
    get nextPageToken() {
        var _a;
        if (!this.next_url) {
            return undefined;
        }
        return (_a = this.next_url
            .split("?")[1]
            .split("&")
            .find((raw) => raw.includes("after="))) === null || _a === void 0 ? void 0 : _a.split("=")[1];
    }
    get previousPageToken() {
        var _a;
        if (!this.previous_url) {
            return undefined;
        }
        return (_a = this.previous_url
            .split("?")[1]
            .split("&")
            .find((raw) => raw.includes("before="))) === null || _a === void 0 ? void 0 : _a.split("=")[1];
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class TemplateVersionUpdatable
 */
class TemplateVersionUpdatable {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.description) !== "undefined") {
            this.description = input.description;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.engine) !== "undefined") {
            this.engine = input.engine;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class TemplateVersionWritable
 */
class TemplateVersionWritable {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.description) !== "undefined") {
            this.description = input.description;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.html) !== "undefined") {
            this.html = input.html;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.engine) !== "undefined") {
            this.engine = input.engine;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class TemplateWritable
 */
class TemplateWritable {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.description) !== "undefined") {
            this.description = input.description;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.html) !== "undefined") {
            this.html = input.html;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.metadata) !== "undefined") {
            this.metadata = input.metadata;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.engine) !== "undefined") {
            this.engine = input.engine;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class Thumbnail
 */
class Thumbnail {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.small) !== "undefined") {
            this.small = input.small;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.medium) !== "undefined") {
            this.medium = input.medium;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.large) !== "undefined") {
            this.large = input.large;
        }
    }
    get small() {
        return (this._small || undefined);
    }
    set small(newValue) {
        if (newValue &&
            !/^https:\/\/(lob-assets|lob-assets-staging)\.com\/(letters|postcards|bank-accounts|checks|self-mailers|cards)\/[a-z]{3,4}_[a-z0-9]{15,16}(\.pdf|_thumb_[a-z]+_[0-9]+\.png)\?(version=[a-z0-9-]*&)?expires=[0-9]{10}&signature=[a-zA-Z0-9-_]+$/.test(newValue)) {
            throw new Error("Invalid small provided");
        }
        this._small = newValue;
    }
    get medium() {
        return (this._medium || undefined);
    }
    set medium(newValue) {
        if (newValue &&
            !/^https:\/\/(lob-assets|lob-assets-staging)\.com\/(letters|postcards|bank-accounts|checks|self-mailers|cards)\/[a-z]{3,4}_[a-z0-9]{15,16}(\.pdf|_thumb_[a-z]+_[0-9]+\.png)\?(version=[a-z0-9-]*&)?expires=[0-9]{10}&signature=[a-zA-Z0-9-_]+$/.test(newValue)) {
            throw new Error("Invalid medium provided");
        }
        this._medium = newValue;
    }
    get large() {
        return (this._large || undefined);
    }
    set large(newValue) {
        if (newValue &&
            !/^https:\/\/(lob-assets|lob-assets-staging)\.com\/(letters|postcards|bank-accounts|checks|self-mailers|cards)\/[a-z]{3,4}_[a-z0-9]{15,16}(\.pdf|_thumb_[a-z]+_[0-9]+\.png)\?(version=[a-z0-9-]*&)?expires=[0-9]{10}&signature=[a-zA-Z0-9-_]+$/.test(newValue)) {
            throw new Error("Invalid large provided");
        }
        this._large = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class TrackingEventCertified
 */
class TrackingEventCertified {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.type) !== "undefined") {
            this.type = input.type;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.name) !== "undefined") {
            this.name = input.name;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.details) !== "undefined") {
            this.details = input.details;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.location) !== "undefined") {
            this.location = input.location;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.time) !== "undefined") {
            this.time = input.time;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.date_created) !== "undefined") {
            this.date_created = input.date_created;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.date_modified) !== "undefined") {
            this.date_modified = input.date_modified;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
    }
    get id() {
        return this._id;
    }
    set id(newValue) {
        if (newValue && !/^evnt_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid id provided");
        }
        this._id = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var TrackingEventCertifiedTypeEnum;
(function (TrackingEventCertifiedTypeEnum) {
    TrackingEventCertifiedTypeEnum["Certified"] = "certified";
})(TrackingEventCertifiedTypeEnum || (TrackingEventCertifiedTypeEnum = {}));
/**
 * @export
 * @enum {string}
 */
var TrackingEventCertifiedNameEnum;
(function (TrackingEventCertifiedNameEnum) {
    TrackingEventCertifiedNameEnum["Mailed"] = "Mailed";
    TrackingEventCertifiedNameEnum["InTransit"] = "In Transit";
    TrackingEventCertifiedNameEnum["InLocalArea"] = "In Local Area";
    TrackingEventCertifiedNameEnum["ProcessedForDelivery"] = "Processed for Delivery";
    TrackingEventCertifiedNameEnum["PickupAvailable"] = "Pickup Available";
    TrackingEventCertifiedNameEnum["Delivered"] = "Delivered";
    TrackingEventCertifiedNameEnum["ReRouted"] = "Re-Routed";
    TrackingEventCertifiedNameEnum["ReturnedToSender"] = "Returned to Sender";
    TrackingEventCertifiedNameEnum["Issue"] = "Issue";
})(TrackingEventCertifiedNameEnum || (TrackingEventCertifiedNameEnum = {}));
/**
 * @export
 * @enum {string}
 */
var TrackingEventCertifiedObjectEnum;
(function (TrackingEventCertifiedObjectEnum) {
    TrackingEventCertifiedObjectEnum["TrackingEvent"] = "tracking_event";
})(TrackingEventCertifiedObjectEnum || (TrackingEventCertifiedObjectEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class TrackingEventDetails
 */
class TrackingEventDetails {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.event) !== "undefined") {
            this.event = input.event;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.description) !== "undefined") {
            this.description = input.description;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.notes) !== "undefined") {
            this.notes = input.notes;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.action_required) !== "undefined") {
            this.action_required = input.action_required;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var TrackingEventDetailsEventEnum;
(function (TrackingEventDetailsEventEnum) {
    TrackingEventDetailsEventEnum["PackageAccepted"] = "package_accepted";
    TrackingEventDetailsEventEnum["PackageArrived"] = "package_arrived";
    TrackingEventDetailsEventEnum["PackageDeparted"] = "package_departed";
    TrackingEventDetailsEventEnum["PackageProcessing"] = "package_processing";
    TrackingEventDetailsEventEnum["PackageProcessed"] = "package_processed";
    TrackingEventDetailsEventEnum["PackageInLocalArea"] = "package_in_local_area";
    TrackingEventDetailsEventEnum["DeliveryScheduled"] = "delivery_scheduled";
    TrackingEventDetailsEventEnum["OutForDelivery"] = "out_for_delivery";
    TrackingEventDetailsEventEnum["PickupAvailable"] = "pickup_available";
    TrackingEventDetailsEventEnum["Delivered"] = "delivered";
    TrackingEventDetailsEventEnum["PackageForwarded"] = "package_forwarded";
    TrackingEventDetailsEventEnum["ReturnedToSender"] = "returned_to_sender";
    TrackingEventDetailsEventEnum["AddressIssue"] = "address_issue";
    TrackingEventDetailsEventEnum["ContactCarrier"] = "contact_carrier";
    TrackingEventDetailsEventEnum["Delayed"] = "delayed";
    TrackingEventDetailsEventEnum["DeliveryAttempted"] = "delivery_attempted";
    TrackingEventDetailsEventEnum["DeliveryRescheduled"] = "delivery_rescheduled";
    TrackingEventDetailsEventEnum["LocationInaccessible"] = "location_inaccessible";
    TrackingEventDetailsEventEnum["NoticeLeft"] = "notice_left";
    TrackingEventDetailsEventEnum["PackageDamaged"] = "package_damaged";
    TrackingEventDetailsEventEnum["PackageDisposed"] = "package_disposed";
    TrackingEventDetailsEventEnum["PackageHeld"] = "package_held";
    TrackingEventDetailsEventEnum["PackageLost"] = "package_lost";
    TrackingEventDetailsEventEnum["PackageUnclaimed"] = "package_unclaimed";
    TrackingEventDetailsEventEnum["PackageUndeliverable"] = "package_undeliverable";
    TrackingEventDetailsEventEnum["RescheduleDelivery"] = "reschedule_delivery";
    TrackingEventDetailsEventEnum["Other"] = "other";
})(TrackingEventDetailsEventEnum || (TrackingEventDetailsEventEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class TrackingEventNormal
 */
class TrackingEventNormal {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.type) !== "undefined") {
            this.type = input.type;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.name) !== "undefined") {
            this.name = input.name;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.details) !== "undefined") {
            this.details = input.details;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.location) !== "undefined") {
            this.location = input.location;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.time) !== "undefined") {
            this.time = input.time;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.date_created) !== "undefined") {
            this.date_created = input.date_created;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.date_modified) !== "undefined") {
            this.date_modified = input.date_modified;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
    }
    get id() {
        return (this._id || undefined);
    }
    set id(newValue) {
        if (newValue && !/^evnt_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid id provided");
        }
        this._id = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var TrackingEventNormalTypeEnum;
(function (TrackingEventNormalTypeEnum) {
    TrackingEventNormalTypeEnum["Normal"] = "normal";
})(TrackingEventNormalTypeEnum || (TrackingEventNormalTypeEnum = {}));
/**
 * @export
 * @enum {string}
 */
var TrackingEventNormalNameEnum;
(function (TrackingEventNormalNameEnum) {
    TrackingEventNormalNameEnum["InTransit"] = "In Transit";
    TrackingEventNormalNameEnum["InLocalArea"] = "In Local Area";
    TrackingEventNormalNameEnum["ProcessedForDelivery"] = "Processed for Delivery";
    TrackingEventNormalNameEnum["ReRouted"] = "Re-Routed";
    TrackingEventNormalNameEnum["ReturnedToSender"] = "Returned to Sender";
    TrackingEventNormalNameEnum["Mailed"] = "Mailed";
})(TrackingEventNormalNameEnum || (TrackingEventNormalNameEnum = {}));
/**
 * @export
 * @enum {string}
 */
var TrackingEventNormalDetailsEnum;
(function (TrackingEventNormalDetailsEnum) {
    TrackingEventNormalDetailsEnum["Null"] = "null";
})(TrackingEventNormalDetailsEnum || (TrackingEventNormalDetailsEnum = {}));
/**
 * @export
 * @enum {string}
 */
var TrackingEventNormalObjectEnum;
(function (TrackingEventNormalObjectEnum) {
    TrackingEventNormalObjectEnum["TrackingEvent"] = "tracking_event";
})(TrackingEventNormalObjectEnum || (TrackingEventNormalObjectEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class Upload
 */
class Upload {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.accountId) !== "undefined") {
            this.accountId = input.accountId;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.mode) !== "undefined") {
            this.mode = input.mode;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.failuresUrl) !== "undefined") {
            this.failuresUrl = input.failuresUrl;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.originalFilename) !== "undefined") {
            this.originalFilename = input.originalFilename;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.state) !== "undefined") {
            this.state = input.state;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.totalMailpieces) !== "undefined") {
            this.totalMailpieces = input.totalMailpieces;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.failedMailpieces) !== "undefined") {
            this.failedMailpieces = input.failedMailpieces;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.validatedMailpieces) !== "undefined") {
            this.validatedMailpieces = input.validatedMailpieces;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.bytesProcessed) !== "undefined") {
            this.bytesProcessed = input.bytesProcessed;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.dateCreated) !== "undefined") {
            this.dateCreated = input.dateCreated;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.dateModified) !== "undefined") {
            this.dateModified = input.dateModified;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.requiredAddressColumnMapping) !== "undefined") {
            this.requiredAddressColumnMapping = input.requiredAddressColumnMapping;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.optionalAddressColumnMapping) !== "undefined") {
            this.optionalAddressColumnMapping = input.optionalAddressColumnMapping;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.metadata) !== "undefined") {
            this.metadata = input.metadata;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.mergeVariableColumnMapping) !== "undefined") {
            this.mergeVariableColumnMapping = input.mergeVariableColumnMapping;
        }
    }
    get id() {
        return this._id;
    }
    set id(newValue) {
        if (newValue && !/^upl_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid id provided");
        }
        this._id = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var UploadModeEnum;
(function (UploadModeEnum) {
    UploadModeEnum["Test"] = "test";
    UploadModeEnum["Live"] = "live";
})(UploadModeEnum || (UploadModeEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class UploadCreateExport
 */
class UploadCreateExport {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.message) !== "undefined") {
            this.message = input.message;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.exportId) !== "undefined") {
            this.exportId = input.exportId;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var UploadCreateExportMessageEnum;
(function (UploadCreateExportMessageEnum) {
    UploadCreateExportMessageEnum["ExportIsProcessing"] = "Export is processing.";
})(UploadCreateExportMessageEnum || (UploadCreateExportMessageEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class UploadFile
 */
class UploadFile {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.message) !== "undefined") {
            this.message = input.message;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.filename) !== "undefined") {
            this.filename = input.filename;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var UploadFileMessageEnum;
(function (UploadFileMessageEnum) {
    UploadFileMessageEnum["FileUploadedSuccessfully"] = "File uploaded successfully";
})(UploadFileMessageEnum || (UploadFileMessageEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * The `state` property on the `upload` object. As the file is processed, the `state` will change from `Ready for Validation` to `Validating` and then will be either `Scheduled` (successfully processed) or `Errored` (Unsuccessfully processed).
 * @export
 * @enum {string}
 */
var UploadState;
(function (UploadState) {
    UploadState["Preprocessing"] = "Preprocessing";
    UploadState["Draft"] = "Draft";
    UploadState["ReadyForValidation"] = "Ready for Validation";
    UploadState["Validating"] = "Validating";
    UploadState["Scheduled"] = "Scheduled";
    UploadState["Cancelled"] = "Cancelled";
    UploadState["Errored"] = "Errored";
})(UploadState || (UploadState = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class UploadUpdatable
 */
class UploadUpdatable {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.originalFilename) !== "undefined") {
            this.originalFilename = input.originalFilename;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.requiredAddressColumnMapping) !== "undefined") {
            this.requiredAddressColumnMapping = input.requiredAddressColumnMapping;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.optionalAddressColumnMapping) !== "undefined") {
            this.optionalAddressColumnMapping = input.optionalAddressColumnMapping;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.metadata) !== "undefined") {
            this.metadata = input.metadata;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.mergeVariableColumnMapping) !== "undefined") {
            this.mergeVariableColumnMapping = input.mergeVariableColumnMapping;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class UploadWritable
 */
class UploadWritable {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.campaignId) !== "undefined") {
            this.campaignId = input.campaignId;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.requiredAddressColumnMapping) !== "undefined") {
            this.requiredAddressColumnMapping = input.requiredAddressColumnMapping;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.optionalAddressColumnMapping) !== "undefined") {
            this.optionalAddressColumnMapping = input.optionalAddressColumnMapping;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.metadata) !== "undefined") {
            this.metadata = input.metadata;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.mergeVariableColumnMapping) !== "undefined") {
            this.mergeVariableColumnMapping = input.mergeVariableColumnMapping;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * The list of column headers in your file as an array that you want as metadata associated with each mailpiece. See our <a href=\"https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/campaign-audience-guide#required-columns-2\" target=\"_blank\">Campaign Audience Guide</a> for additional details.
 * @export
 * @class UploadsMetadata
 */
class UploadsMetadata {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.columns) !== "undefined") {
            this.columns = input.columns;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class UsAutocompletions
 */
class UsAutocompletions {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.suggestions) !== "undefined") {
            this.suggestions = input.suggestions;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
    }
    get id() {
        return (this._id || undefined);
    }
    set id(newValue) {
        if (newValue && !/^us_auto_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid id provided");
        }
        this._id = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var UsAutocompletionsObjectEnum;
(function (UsAutocompletionsObjectEnum) {
    UsAutocompletionsObjectEnum["UsAutocompletion"] = "us_autocompletion";
})(UsAutocompletionsObjectEnum || (UsAutocompletionsObjectEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class UsAutocompletionsWritable
 */
class UsAutocompletionsWritable {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.address_prefix) !== "undefined") {
            this.address_prefix = input.address_prefix;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.city) !== "undefined") {
            this.city = input.city;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.state) !== "undefined") {
            this.state = input.state;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.zip_code) !== "undefined") {
            this.zip_code = input.zip_code;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.geo_ip_sort) !== "undefined") {
            this.geo_ip_sort = input.geo_ip_sort;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * A nested object containing a breakdown of each component of an address.
 * @export
 * @class UsComponents
 */
class UsComponents {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.primary_number) !== "undefined") {
            this.primary_number = input.primary_number;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.street_predirection) !== "undefined") {
            this.street_predirection = input.street_predirection;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.street_name) !== "undefined") {
            this.street_name = input.street_name;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.street_suffix) !== "undefined") {
            this.street_suffix = input.street_suffix;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.street_postdirection) !== "undefined") {
            this.street_postdirection = input.street_postdirection;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.secondary_designator) !== "undefined") {
            this.secondary_designator = input.secondary_designator;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.secondary_number) !== "undefined") {
            this.secondary_number = input.secondary_number;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.pmb_designator) !== "undefined") {
            this.pmb_designator = input.pmb_designator;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.pmb_number) !== "undefined") {
            this.pmb_number = input.pmb_number;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.extra_secondary_designator) !== "undefined") {
            this.extra_secondary_designator = input.extra_secondary_designator;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.extra_secondary_number) !== "undefined") {
            this.extra_secondary_number = input.extra_secondary_number;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.city) !== "undefined") {
            this.city = input.city;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.state) !== "undefined") {
            this.state = input.state;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.zip_code) !== "undefined") {
            this.zip_code = input.zip_code;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.zip_code_plus_4) !== "undefined") {
            this.zip_code_plus_4 = input.zip_code_plus_4;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.zip_code_type) !== "undefined") {
            this.zip_code_type = input.zip_code_type;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.delivery_point_barcode) !== "undefined") {
            this.delivery_point_barcode = input.delivery_point_barcode;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.address_type) !== "undefined") {
            this.address_type = input.address_type;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.record_type) !== "undefined") {
            this.record_type = input.record_type;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.default_building_address) !== "undefined") {
            this.default_building_address = input.default_building_address;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.county) !== "undefined") {
            this.county = input.county;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.county_fips) !== "undefined") {
            this.county_fips = input.county_fips;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.carrier_route) !== "undefined") {
            this.carrier_route = input.carrier_route;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.carrier_route_type) !== "undefined") {
            this.carrier_route_type = input.carrier_route_type;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.latitude) !== "undefined") {
            this.latitude = input.latitude;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.longitude) !== "undefined") {
            this.longitude = input.longitude;
        }
    }
    get zip_code() {
        return this._zip_code;
    }
    set zip_code(newValue) {
        if (newValue && !/^\d{5}$/.test(newValue)) {
            throw new Error("Invalid zip_code provided");
        }
        this._zip_code = newValue;
    }
    get zip_code_plus_4() {
        return this._zip_code_plus_4;
    }
    set zip_code_plus_4(newValue) {
        if (newValue && !/^\d{4}$/.test(newValue)) {
            throw new Error("Invalid zip_code_plus_4 provided");
        }
        this._zip_code_plus_4 = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var UsComponentsStreetPredirectionEnum;
(function (UsComponentsStreetPredirectionEnum) {
    UsComponentsStreetPredirectionEnum["N"] = "N";
    UsComponentsStreetPredirectionEnum["S"] = "S";
    UsComponentsStreetPredirectionEnum["E"] = "E";
    UsComponentsStreetPredirectionEnum["W"] = "W";
    UsComponentsStreetPredirectionEnum["Ne"] = "NE";
    UsComponentsStreetPredirectionEnum["Sw"] = "SW";
    UsComponentsStreetPredirectionEnum["Se"] = "SE";
    UsComponentsStreetPredirectionEnum["Nw"] = "NW";
    UsComponentsStreetPredirectionEnum["Empty"] = "";
})(UsComponentsStreetPredirectionEnum || (UsComponentsStreetPredirectionEnum = {}));
/**
 * @export
 * @enum {string}
 */
var UsComponentsStreetPostdirectionEnum;
(function (UsComponentsStreetPostdirectionEnum) {
    UsComponentsStreetPostdirectionEnum["N"] = "N";
    UsComponentsStreetPostdirectionEnum["S"] = "S";
    UsComponentsStreetPostdirectionEnum["E"] = "E";
    UsComponentsStreetPostdirectionEnum["W"] = "W";
    UsComponentsStreetPostdirectionEnum["Ne"] = "NE";
    UsComponentsStreetPostdirectionEnum["Sw"] = "SW";
    UsComponentsStreetPostdirectionEnum["Se"] = "SE";
    UsComponentsStreetPostdirectionEnum["Nw"] = "NW";
    UsComponentsStreetPostdirectionEnum["Empty"] = "";
})(UsComponentsStreetPostdirectionEnum || (UsComponentsStreetPostdirectionEnum = {}));
/**
 * @export
 * @enum {string}
 */
var UsComponentsAddressTypeEnum;
(function (UsComponentsAddressTypeEnum) {
    UsComponentsAddressTypeEnum["Residential"] = "residential";
    UsComponentsAddressTypeEnum["Commercial"] = "commercial";
    UsComponentsAddressTypeEnum["Empty"] = "";
})(UsComponentsAddressTypeEnum || (UsComponentsAddressTypeEnum = {}));
/**
 * @export
 * @enum {string}
 */
var UsComponentsRecordTypeEnum;
(function (UsComponentsRecordTypeEnum) {
    UsComponentsRecordTypeEnum["Street"] = "street";
    UsComponentsRecordTypeEnum["Highrise"] = "highrise";
    UsComponentsRecordTypeEnum["Firm"] = "firm";
    UsComponentsRecordTypeEnum["PoBox"] = "po_box";
    UsComponentsRecordTypeEnum["RuralRoute"] = "rural_route";
    UsComponentsRecordTypeEnum["GeneralDelivery"] = "general_delivery";
    UsComponentsRecordTypeEnum["Empty"] = "";
})(UsComponentsRecordTypeEnum || (UsComponentsRecordTypeEnum = {}));
/**
 * @export
 * @enum {string}
 */
var UsComponentsCarrierRouteTypeEnum;
(function (UsComponentsCarrierRouteTypeEnum) {
    UsComponentsCarrierRouteTypeEnum["CityDelivery"] = "city_delivery";
    UsComponentsCarrierRouteTypeEnum["RuralRoute"] = "rural_route";
    UsComponentsCarrierRouteTypeEnum["HighwayContract"] = "highway_contract";
    UsComponentsCarrierRouteTypeEnum["PoBox"] = "po_box";
    UsComponentsCarrierRouteTypeEnum["GeneralDelivery"] = "general_delivery";
    UsComponentsCarrierRouteTypeEnum["Empty"] = "";
})(UsComponentsCarrierRouteTypeEnum || (UsComponentsCarrierRouteTypeEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class UsVerification
 */
class UsVerification {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.recipient) !== "undefined") {
            this.recipient = input.recipient;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.primary_line) !== "undefined") {
            this.primary_line = input.primary_line;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.secondary_line) !== "undefined") {
            this.secondary_line = input.secondary_line;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.urbanization) !== "undefined") {
            this.urbanization = input.urbanization;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.last_line) !== "undefined") {
            this.last_line = input.last_line;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.deliverability) !== "undefined") {
            this.deliverability = input.deliverability;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.valid_address) !== "undefined") {
            this.valid_address = input.valid_address;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.components) !== "undefined") {
            this.components = input.components;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.deliverability_analysis) !== "undefined") {
            this.deliverability_analysis = input.deliverability_analysis;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.lob_confidence_score) !== "undefined") {
            this.lob_confidence_score = input.lob_confidence_score;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
    }
    get id() {
        return (this._id || undefined);
    }
    set id(newValue) {
        if (newValue && !/^us_ver_[a-zA-Z0-9_]+$/.test(newValue)) {
            throw new Error("Invalid id provided");
        }
        this._id = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var UsVerificationDeliverabilityEnum;
(function (UsVerificationDeliverabilityEnum) {
    UsVerificationDeliverabilityEnum["Deliverable"] = "deliverable";
    UsVerificationDeliverabilityEnum["DeliverableUnnecessaryUnit"] = "deliverable_unnecessary_unit";
    UsVerificationDeliverabilityEnum["DeliverableIncorrectUnit"] = "deliverable_incorrect_unit";
    UsVerificationDeliverabilityEnum["DeliverableMissingUnit"] = "deliverable_missing_unit";
    UsVerificationDeliverabilityEnum["Undeliverable"] = "undeliverable";
})(UsVerificationDeliverabilityEnum || (UsVerificationDeliverabilityEnum = {}));
/**
 * @export
 * @enum {string}
 */
var UsVerificationValidAddressEnum;
(function (UsVerificationValidAddressEnum) {
    UsVerificationValidAddressEnum["True"] = "true";
    UsVerificationValidAddressEnum["False"] = "false";
})(UsVerificationValidAddressEnum || (UsVerificationValidAddressEnum = {}));
/**
 * @export
 * @enum {string}
 */
var UsVerificationObjectEnum;
(function (UsVerificationObjectEnum) {
    UsVerificationObjectEnum["UsVerification"] = "us_verification";
})(UsVerificationObjectEnum || (UsVerificationObjectEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * A model used to represent an entry in a result list where the entry can either be a us_verification or an Error. The SDK will perform necessary casting into the correct corresponding type.
 * @export
 * @class UsVerificationOrError
 */
class UsVerificationOrError {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.recipient) !== "undefined") {
            this.recipient = input.recipient;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.primary_line) !== "undefined") {
            this.primary_line = input.primary_line;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.secondary_line) !== "undefined") {
            this.secondary_line = input.secondary_line;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.urbanization) !== "undefined") {
            this.urbanization = input.urbanization;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.last_line) !== "undefined") {
            this.last_line = input.last_line;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.deliverability) !== "undefined") {
            this.deliverability = input.deliverability;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.components) !== "undefined") {
            this.components = input.components;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.deliverability_analysis) !== "undefined") {
            this.deliverability_analysis = input.deliverability_analysis;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.lob_confidence_score) !== "undefined") {
            this.lob_confidence_score = input.lob_confidence_score;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.error) !== "undefined") {
            this.error = input.error;
        }
    }
    get id() {
        return (this._id || undefined);
    }
    set id(newValue) {
        if (newValue && !/^us_ver_[a-zA-Z0-9_]+$/.test(newValue)) {
            throw new Error("Invalid id provided");
        }
        this._id = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var UsVerificationOrErrorDeliverabilityEnum;
(function (UsVerificationOrErrorDeliverabilityEnum) {
    UsVerificationOrErrorDeliverabilityEnum["Deliverable"] = "deliverable";
    UsVerificationOrErrorDeliverabilityEnum["DeliverableUnnecessaryUnit"] = "deliverable_unnecessary_unit";
    UsVerificationOrErrorDeliverabilityEnum["DeliverableIncorrectUnit"] = "deliverable_incorrect_unit";
    UsVerificationOrErrorDeliverabilityEnum["DeliverableMissingUnit"] = "deliverable_missing_unit";
    UsVerificationOrErrorDeliverabilityEnum["Undeliverable"] = "undeliverable";
})(UsVerificationOrErrorDeliverabilityEnum || (UsVerificationOrErrorDeliverabilityEnum = {}));
/**
 * @export
 * @enum {string}
 */
var UsVerificationOrErrorObjectEnum;
(function (UsVerificationOrErrorObjectEnum) {
    UsVerificationOrErrorObjectEnum["UsVerification"] = "us_verification";
})(UsVerificationOrErrorObjectEnum || (UsVerificationOrErrorObjectEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/**
 *
 * @export
 * @class UsVerifications
 */
class UsVerifications {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.addresses) !== "undefined") {
            this.addresses = input.addresses;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.errors) !== "undefined") {
            this.errors = input.errors;
        }
    }
    set addresses(items) {
        if (!this._addresses) {
            this._addresses = [];
        }
        if (!this._error_addresses) {
            this._error_addresses = [];
        }
        for (const item of items) {
            if (item.id) {
                this._addresses.push(new UsVerification(item));
            }
            if (item.error) {
                this._error_addresses.push(new BulkError(item));
            }
        }
    }
    get addresses() {
        return this._addresses || [];
    }
    get errorAddresses() {
        return this._error_addresses || [];
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class UsVerificationsWritable
 */
class UsVerificationsWritable {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.address) !== "undefined") {
            this.address = input.address;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.recipient) !== "undefined") {
            this.recipient = input.recipient;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.primary_line) !== "undefined") {
            this.primary_line = input.primary_line;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.secondary_line) !== "undefined") {
            this.secondary_line = input.secondary_line;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.urbanization) !== "undefined") {
            this.urbanization = input.urbanization;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.city) !== "undefined") {
            this.city = input.city;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.state) !== "undefined") {
            this.state = input.state;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.zip_code) !== "undefined") {
            this.zip_code = input.zip_code;
        }
    }
    get zip_code() {
        return (this._zip_code || undefined);
    }
    set zip_code(newValue) {
        if (newValue && !/^\d{5}((-)?\d{4})?$/.test(newValue)) {
            throw new Error("Invalid zip_code provided");
        }
        this._zip_code = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class ValidationError
 */
class ValidationError {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.loc) !== "undefined") {
            this.loc = input.loc;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.msg) !== "undefined") {
            this.msg = input.msg;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.type) !== "undefined") {
            this.type = input.type;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class Zip
 */
class Zip {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.zip_code) !== "undefined") {
            this.zip_code = input.zip_code;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.id) !== "undefined") {
            this.id = input.id;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.cities) !== "undefined") {
            this.cities = input.cities;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.zip_code_type) !== "undefined") {
            this.zip_code_type = input.zip_code_type;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.object) !== "undefined") {
            this.object = input.object;
        }
    }
    get zip_code() {
        return (this._zip_code || undefined);
    }
    set zip_code(newValue) {
        if (newValue && !/^\d{5}$/.test(newValue)) {
            throw new Error("Invalid zip_code provided");
        }
        this._zip_code = newValue;
    }
    get id() {
        return this._id;
    }
    set id(newValue) {
        if (newValue && !/^us_zip_[a-zA-Z0-9]+$/.test(newValue)) {
            throw new Error("Invalid id provided");
        }
        this._id = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * @export
 * @enum {string}
 */
var ZipObjectEnum;
(function (ZipObjectEnum) {
    ZipObjectEnum["UsZipLookup"] = "us_zip_lookup";
})(ZipObjectEnum || (ZipObjectEnum = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * A description of the ZIP code type. For more detailed information about each ZIP code type, see [US Verification Details](#tag/US-Verification-Types).
 * @export
 * @enum {string}
 */
var ZipCodeType;
(function (ZipCodeType) {
    ZipCodeType["Standard"] = "standard";
    ZipCodeType["PoBox"] = "po_box";
    ZipCodeType["Unique"] = "unique";
    ZipCodeType["Military"] = "military";
    ZipCodeType["Empty"] = "";
})(ZipCodeType || (ZipCodeType = {}));
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class ZipEditable
 */
class ZipEditable {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.zip_code) !== "undefined") {
            this.zip_code = input.zip_code;
        }
    }
    get zip_code() {
        return (this._zip_code || undefined);
    }
    set zip_code(newValue) {
        if (newValue && !/^\d{5}$/.test(newValue)) {
            throw new Error("Invalid zip_code provided");
        }
        this._zip_code = newValue;
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @class ZipLookupCity
 */
class ZipLookupCity {
    constructor(input) {
        if (typeof (input === null || input === void 0 ? void 0 : input.city) !== "undefined") {
            this.city = input.city;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.state) !== "undefined") {
            this.state = input.state;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.county) !== "undefined") {
            this.county = input.county;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.county_fips) !== "undefined") {
            this.county_fips = input.county_fips;
        }
        if (typeof (input === null || input === void 0 ? void 0 : input.preferred) !== "undefined") {
            this.preferred = input.preferred;
        }
    }
    toJSON() {
        let out = {};
        for (const [key, value] of Object.entries(this)) {
            out = Object.assign({}, out, {
                [key[0] === "_" ? key.substr(1, key.length) : key]: value,
            });
        }
        return out;
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/**
 * AddressesApi - axios parameter creator
 * @export
 */
const AddressesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Creates a new address given information
         * @summary create
         * @param {AddressEditable} addressEditable
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressCreate: async (addressEditable, options = {}) => {
            // verify required parameter 'addressEditable' is not null or undefined
            assertParamExists("addressCreate", "addressEditable", addressEditable);
            const localVarPath = `/addresses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            localVarHeaderParameter["Content-Type"] = "application/json";
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(addressEditable, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the details of an existing address.
         * @summary delete
         * @param {string} adrId id of the address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressDelete: async (adrId, options = {}) => {
            // verify required parameter 'adrId' is not null or undefined
            assertParamExists("addressDelete", "adrId", adrId);
            const localVarPath = `/addresses/{adr_id}`.replace(`{${"adr_id"}}`, encodeURIComponent(String(adrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "DELETE" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the details of an existing address.
         * @summary get
         * @param {string} adrId id of the address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressRetrieve: async (adrId, options = {}) => {
            // verify required parameter 'adrId' is not null or undefined
            assertParamExists("addressRetrieve", "adrId", adrId);
            const localVarPath = `/addresses/{adr_id}`.replace(`{${"adr_id"}}`, encodeURIComponent(String(adrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of your addresses.
         * @summary list
         * @param {number} [limit] How many results to return.
         * @param {string} [before] A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response.
         * @param {string} [after] A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response.
         * @param {Array<string>} [include] Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;.
         * @param {{ [key: string]: string; }} [dateCreated] Filter by date created.
         * @param {{ [key: string]: string; }} [metadata] Filter by metadata key-value pair&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressesList: async (limit, before, after, include, dateCreated, metadata, options = {}) => {
            const localVarPath = `/addresses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            if (limit !== undefined) {
                localVarQueryParameter["limit"] = limit;
            }
            if (before !== undefined) {
                localVarQueryParameter["before"] = before;
            }
            if (after !== undefined) {
                localVarQueryParameter["after"] = after;
            }
            if (include) {
                localVarQueryParameter["include"] = valueToString(include);
            }
            if (dateCreated !== undefined) {
                localVarQueryParameter["date_created"] = valueToString(dateCreated);
            }
            if (metadata !== undefined) {
                localVarQueryParameter["metadata"] = valueToString(metadata);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * AddressesApi - functional programming interface
 * @export
 */
const AddressesApiFp = function (configuration) {
    const localVarAxiosParamCreator = AddressesApiAxiosParamCreator(configuration);
    return {
        /**
         * Creates a new address given information
         * @summary create
         * @param {AddressEditable} addressEditable
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addressCreate(addressEditable, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addressCreate(addressEditable, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes the details of an existing address.
         * @summary delete
         * @param {string} adrId id of the address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addressDelete(adrId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addressDelete(adrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the details of an existing address.
         * @summary get
         * @param {string} adrId id of the address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addressRetrieve(adrId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addressRetrieve(adrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of your addresses.
         * @summary list
         * @param {number} [limit] How many results to return.
         * @param {string} [before] A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response.
         * @param {string} [after] A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response.
         * @param {Array<string>} [include] Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;.
         * @param {{ [key: string]: string; }} [dateCreated] Filter by date created.
         * @param {{ [key: string]: string; }} [metadata] Filter by metadata key-value pair&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addressesList(limit, before, after, include, dateCreated, metadata, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addressesList(limit, before, after, include, dateCreated, metadata, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * AddressesApi - object-oriented interface
 * @export
 * @class AddressesApi
 * @extends {BaseAPI}
 */
class AddressesApi extends BaseAPI {
    /**
     * Creates a new address given information
     * @summary create
     * @param {AddressEditable} addressEditable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressesApi
     */
    create(addressEditable, options) {
        return AddressesApiFp(this.configuration)
            .addressCreate(addressEditable, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new Address(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
    /**
     * Deletes the details of an existing address.
     * @summary delete
     * @param {string} adrId id of the address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressesApi
     */
    delete(adrId, options) {
        return AddressesApiFp(this.configuration)
            .addressDelete(adrId, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new AddressDeletion(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
    /**
     * Retrieves the details of an existing address.
     * @summary get
     * @param {string} adrId id of the address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressesApi
     */
    get(adrId, options) {
        return AddressesApiFp(this.configuration)
            .addressRetrieve(adrId, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new Address(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
    /**
     * Returns a list of your addresses.
     * @summary list
     * @param {number} [limit] How many results to return.
     * @param {string} [before] A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response.
     * @param {string} [after] A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response.
     * @param {Array<string>} [include] Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;.
     * @param {{ [key: string]: string; }} [dateCreated] Filter by date created.
     * @param {{ [key: string]: string; }} [metadata] Filter by metadata key-value pair&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressesApi
     */
    list(limit, before, after, include, dateCreated, metadata, options) {
        return AddressesApiFp(this.configuration)
            .addressesList(limit, before, after, include, dateCreated, metadata, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new AddressList(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/**
 * BankAccountsApi - axios parameter creator
 * @export
 */
const BankAccountsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Creates a new bank account with the provided properties. Bank accounts created in live mode will need to be verified via micro deposits before being able to send live checks. The deposits will appear in the bank account in 2-3 business days and have the description \"VERIFICATION\".
         * @summary create
         * @param {BankAccountWritable} bankAccountWritable
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountCreate: async (bankAccountWritable, options = {}) => {
            // verify required parameter 'bankAccountWritable' is not null or undefined
            assertParamExists("bankAccountCreate", "bankAccountWritable", bankAccountWritable);
            const localVarPath = `/bank_accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            localVarHeaderParameter["Content-Type"] = "application/json";
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(bankAccountWritable, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Permanently deletes a bank account. It cannot be undone.
         * @summary delete
         * @param {string} bankId id of the bank account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountDelete: async (bankId, options = {}) => {
            // verify required parameter 'bankId' is not null or undefined
            assertParamExists("bankAccountDelete", "bankId", bankId);
            const localVarPath = `/bank_accounts/{bank_id}`.replace(`{${"bank_id"}}`, encodeURIComponent(String(bankId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "DELETE" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the details of an existing bank account. You need only supply the unique bank account identifier that was returned upon bank account creation.
         * @summary get
         * @param {string} bankId id of the bank account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountRetrieve: async (bankId, options = {}) => {
            // verify required parameter 'bankId' is not null or undefined
            assertParamExists("bankAccountRetrieve", "bankId", bankId);
            const localVarPath = `/bank_accounts/{bank_id}`.replace(`{${"bank_id"}}`, encodeURIComponent(String(bankId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verify a bank account in order to create a check.
         * @summary verify
         * @param {string} bankId id of the bank account to be verified
         * @param {BankAccountVerify} bankAccountVerify
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountVerify: async (bankId, bankAccountVerify, options = {}) => {
            // verify required parameter 'bankId' is not null or undefined
            assertParamExists("bankAccountVerify", "bankId", bankId);
            // verify required parameter 'bankAccountVerify' is not null or undefined
            assertParamExists("bankAccountVerify", "bankAccountVerify", bankAccountVerify);
            const localVarPath = `/bank_accounts/{bank_id}/verify`.replace(`{${"bank_id"}}`, encodeURIComponent(String(bankId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            localVarHeaderParameter["Content-Type"] = "application/json";
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(bankAccountVerify, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of your bank accounts. The bank accounts are returned sorted by creation date, with the most recently created bank accounts appearing first.
         * @summary list
         * @param {number} [limit] How many results to return.
         * @param {string} [before] A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response.
         * @param {string} [after] A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response.
         * @param {Array<string>} [include] Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;.
         * @param {{ [key: string]: string; }} [dateCreated] Filter by date created.
         * @param {{ [key: string]: string; }} [metadata] Filter by metadata key-value pair&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsList: async (limit, before, after, include, dateCreated, metadata, options = {}) => {
            const localVarPath = `/bank_accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            if (limit !== undefined) {
                localVarQueryParameter["limit"] = limit;
            }
            if (before !== undefined) {
                localVarQueryParameter["before"] = before;
            }
            if (after !== undefined) {
                localVarQueryParameter["after"] = after;
            }
            if (include) {
                localVarQueryParameter["include"] = valueToString(include);
            }
            if (dateCreated !== undefined) {
                localVarQueryParameter["date_created"] = valueToString(dateCreated);
            }
            if (metadata !== undefined) {
                localVarQueryParameter["metadata"] = valueToString(metadata);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * BankAccountsApi - functional programming interface
 * @export
 */
const BankAccountsApiFp = function (configuration) {
    const localVarAxiosParamCreator = BankAccountsApiAxiosParamCreator(configuration);
    return {
        /**
         * Creates a new bank account with the provided properties. Bank accounts created in live mode will need to be verified via micro deposits before being able to send live checks. The deposits will appear in the bank account in 2-3 business days and have the description \"VERIFICATION\".
         * @summary create
         * @param {BankAccountWritable} bankAccountWritable
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bankAccountCreate(bankAccountWritable, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bankAccountCreate(bankAccountWritable, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Permanently deletes a bank account. It cannot be undone.
         * @summary delete
         * @param {string} bankId id of the bank account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bankAccountDelete(bankId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bankAccountDelete(bankId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the details of an existing bank account. You need only supply the unique bank account identifier that was returned upon bank account creation.
         * @summary get
         * @param {string} bankId id of the bank account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bankAccountRetrieve(bankId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bankAccountRetrieve(bankId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Verify a bank account in order to create a check.
         * @summary verify
         * @param {string} bankId id of the bank account to be verified
         * @param {BankAccountVerify} bankAccountVerify
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bankAccountVerify(bankId, bankAccountVerify, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bankAccountVerify(bankId, bankAccountVerify, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of your bank accounts. The bank accounts are returned sorted by creation date, with the most recently created bank accounts appearing first.
         * @summary list
         * @param {number} [limit] How many results to return.
         * @param {string} [before] A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response.
         * @param {string} [after] A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response.
         * @param {Array<string>} [include] Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;.
         * @param {{ [key: string]: string; }} [dateCreated] Filter by date created.
         * @param {{ [key: string]: string; }} [metadata] Filter by metadata key-value pair&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bankAccountsList(limit, before, after, include, dateCreated, metadata, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bankAccountsList(limit, before, after, include, dateCreated, metadata, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * BankAccountsApi - object-oriented interface
 * @export
 * @class BankAccountsApi
 * @extends {BaseAPI}
 */
class BankAccountsApi extends BaseAPI {
    /**
     * Creates a new bank account with the provided properties. Bank accounts created in live mode will need to be verified via micro deposits before being able to send live checks. The deposits will appear in the bank account in 2-3 business days and have the description \"VERIFICATION\".
     * @summary create
     * @param {BankAccountWritable} bankAccountWritable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    create(bankAccountWritable, options) {
        return BankAccountsApiFp(this.configuration)
            .bankAccountCreate(bankAccountWritable, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new BankAccount(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
    /**
     * Permanently deletes a bank account. It cannot be undone.
     * @summary delete
     * @param {string} bankId id of the bank account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    delete(bankId, options) {
        return BankAccountsApiFp(this.configuration)
            .bankAccountDelete(bankId, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new BankAccountDeletion(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
    /**
     * Retrieves the details of an existing bank account. You need only supply the unique bank account identifier that was returned upon bank account creation.
     * @summary get
     * @param {string} bankId id of the bank account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    get(bankId, options) {
        return BankAccountsApiFp(this.configuration)
            .bankAccountRetrieve(bankId, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new BankAccount(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
    /**
     * Verify a bank account in order to create a check.
     * @summary verify
     * @param {string} bankId id of the bank account to be verified
     * @param {BankAccountVerify} bankAccountVerify
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    verify(bankId, bankAccountVerify, options) {
        return BankAccountsApiFp(this.configuration)
            .bankAccountVerify(bankId, bankAccountVerify, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new BankAccount(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
    /**
     * Returns a list of your bank accounts. The bank accounts are returned sorted by creation date, with the most recently created bank accounts appearing first.
     * @summary list
     * @param {number} [limit] How many results to return.
     * @param {string} [before] A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response.
     * @param {string} [after] A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response.
     * @param {Array<string>} [include] Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;.
     * @param {{ [key: string]: string; }} [dateCreated] Filter by date created.
     * @param {{ [key: string]: string; }} [metadata] Filter by metadata key-value pair&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    list(limit, before, after, include, dateCreated, metadata, options) {
        return BankAccountsApiFp(this.configuration)
            .bankAccountsList(limit, before, after, include, dateCreated, metadata, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new BankAccountList(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/**
 * BillingGroupsApi - axios parameter creator
 * @export
 */
const BillingGroupsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Creates a new billing_group with the provided properties.
         * @summary create
         * @param {BillingGroupEditable} billingGroupEditable
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        billingGroupCreate: async (billingGroupEditable, options = {}) => {
            // verify required parameter 'billingGroupEditable' is not null or undefined
            assertParamExists("billingGroupCreate", "billingGroupEditable", billingGroupEditable);
            const localVarPath = `/billing_groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            localVarHeaderParameter["Content-Type"] = "application/json";
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(billingGroupEditable, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the details of an existing billing_group. You need only supply the unique billing_group identifier that was returned upon billing_group creation.
         * @summary get
         * @param {string} bgId id of the billing_group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        billingGroupRetrieve: async (bgId, options = {}) => {
            // verify required parameter 'bgId' is not null or undefined
            assertParamExists("billingGroupRetrieve", "bgId", bgId);
            const localVarPath = `/billing_groups/{bg_id}`.replace(`{${"bg_id"}}`, encodeURIComponent(String(bgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates all editable attributes of the billing_group with the given id.
         * @summary update
         * @param {string} bgId id of the billing_group
         * @param {BillingGroupEditable} billingGroupEditable
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        billingGroupUpdate: async (bgId, billingGroupEditable, options = {}) => {
            // verify required parameter 'bgId' is not null or undefined
            assertParamExists("billingGroupUpdate", "bgId", bgId);
            // verify required parameter 'billingGroupEditable' is not null or undefined
            assertParamExists("billingGroupUpdate", "billingGroupEditable", billingGroupEditable);
            const localVarPath = `/billing_groups/{bg_id}`.replace(`{${"bg_id"}}`, encodeURIComponent(String(bgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            localVarHeaderParameter["Content-Type"] = "application/json";
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(billingGroupEditable, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of your billing_groups. The billing_groups are returned sorted by creation date, with the most recently created billing_groups appearing first.
         * @summary list
         * @param {number} [limit] How many results to return.
         * @param {number} [offset] An integer that designates the offset at which to begin returning results. Defaults to 0.
         * @param {Array<string>} [include] Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;.
         * @param {{ [key: string]: string; }} [dateCreated] Filter by date created.
         * @param {{ [key: string]: string; }} [dateModified] Filter by date modified.
         * @param {object} [sortByDateModified] Sorts items by ascending or descending dates. Use either &#x60;date_created&#x60; or &#x60;date_modfied&#x60;, not both.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        billingGroupsList: async (limit, offset, include, dateCreated, dateModified, sortByDateModified, options = {}) => {
            const localVarPath = `/billing_groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            if (limit !== undefined) {
                localVarQueryParameter["limit"] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter["offset"] = offset;
            }
            if (include) {
                localVarQueryParameter["include"] = valueToString(include);
            }
            if (dateCreated !== undefined) {
                localVarQueryParameter["date_created"] = valueToString(dateCreated);
            }
            if (dateModified !== undefined) {
                localVarQueryParameter["date_modified"] = valueToString(dateModified);
            }
            if (sortByDateModified !== undefined) {
                localVarQueryParameter["sort_by"] = valueToString(sortByDateModified);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * BillingGroupsApi - functional programming interface
 * @export
 */
const BillingGroupsApiFp = function (configuration) {
    const localVarAxiosParamCreator = BillingGroupsApiAxiosParamCreator(configuration);
    return {
        /**
         * Creates a new billing_group with the provided properties.
         * @summary create
         * @param {BillingGroupEditable} billingGroupEditable
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async billingGroupCreate(billingGroupEditable, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.billingGroupCreate(billingGroupEditable, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the details of an existing billing_group. You need only supply the unique billing_group identifier that was returned upon billing_group creation.
         * @summary get
         * @param {string} bgId id of the billing_group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async billingGroupRetrieve(bgId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.billingGroupRetrieve(bgId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates all editable attributes of the billing_group with the given id.
         * @summary update
         * @param {string} bgId id of the billing_group
         * @param {BillingGroupEditable} billingGroupEditable
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async billingGroupUpdate(bgId, billingGroupEditable, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.billingGroupUpdate(bgId, billingGroupEditable, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of your billing_groups. The billing_groups are returned sorted by creation date, with the most recently created billing_groups appearing first.
         * @summary list
         * @param {number} [limit] How many results to return.
         * @param {number} [offset] An integer that designates the offset at which to begin returning results. Defaults to 0.
         * @param {Array<string>} [include] Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;.
         * @param {{ [key: string]: string; }} [dateCreated] Filter by date created.
         * @param {{ [key: string]: string; }} [dateModified] Filter by date modified.
         * @param {object} [sortByDateModified] Sorts items by ascending or descending dates. Use either &#x60;date_created&#x60; or &#x60;date_modfied&#x60;, not both.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async billingGroupsList(limit, offset, include, dateCreated, dateModified, sortByDateModified, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.billingGroupsList(limit, offset, include, dateCreated, dateModified, sortByDateModified, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * BillingGroupsApi - object-oriented interface
 * @export
 * @class BillingGroupsApi
 * @extends {BaseAPI}
 */
class BillingGroupsApi extends BaseAPI {
    /**
     * Creates a new billing_group with the provided properties.
     * @summary create
     * @param {BillingGroupEditable} billingGroupEditable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingGroupsApi
     */
    create(billingGroupEditable, options) {
        return BillingGroupsApiFp(this.configuration)
            .billingGroupCreate(billingGroupEditable, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new BillingGroup(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
    /**
     * Retrieves the details of an existing billing_group. You need only supply the unique billing_group identifier that was returned upon billing_group creation.
     * @summary get
     * @param {string} bgId id of the billing_group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingGroupsApi
     */
    get(bgId, options) {
        return BillingGroupsApiFp(this.configuration)
            .billingGroupRetrieve(bgId, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new BillingGroup(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
    /**
     * Updates all editable attributes of the billing_group with the given id.
     * @summary update
     * @param {string} bgId id of the billing_group
     * @param {BillingGroupEditable} billingGroupEditable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingGroupsApi
     */
    update(bgId, billingGroupEditable, options) {
        return BillingGroupsApiFp(this.configuration)
            .billingGroupUpdate(bgId, billingGroupEditable, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new BillingGroup(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
    /**
     * Returns a list of your billing_groups. The billing_groups are returned sorted by creation date, with the most recently created billing_groups appearing first.
     * @summary list
     * @param {number} [limit] How many results to return.
     * @param {number} [offset] An integer that designates the offset at which to begin returning results. Defaults to 0.
     * @param {Array<string>} [include] Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;.
     * @param {{ [key: string]: string; }} [dateCreated] Filter by date created.
     * @param {{ [key: string]: string; }} [dateModified] Filter by date modified.
     * @param {object} [sortByDateModified] Sorts items by ascending or descending dates. Use either &#x60;date_created&#x60; or &#x60;date_modfied&#x60;, not both.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingGroupsApi
     */
    list(limit, offset, include, dateCreated, dateModified, sortByDateModified, options) {
        return BillingGroupsApiFp(this.configuration)
            .billingGroupsList(limit, offset, include, dateCreated, dateModified, sortByDateModified, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new BillingGroupList(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/**
 * CardOrdersApi - axios parameter creator
 * @export
 */
const CardOrdersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Creates a new card order given information
         * @summary create
         * @param {string} cardId The ID of the card to which the card orders belong.
         * @param {CardOrderEditable} cardOrderEditable
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cardOrderCreate: async (cardId, cardOrderEditable, options = {}) => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists("cardOrderCreate", "cardId", cardId);
            // verify required parameter 'cardOrderEditable' is not null or undefined
            assertParamExists("cardOrderCreate", "cardOrderEditable", cardOrderEditable);
            const localVarPath = `/cards/{card_id}/orders`.replace(`{${"card_id"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            localVarHeaderParameter["Content-Type"] = "application/json";
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(cardOrderEditable, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the card orders associated with the given card id.
         * @summary get
         * @param {string} cardId The ID of the card to which the card orders belong.
         * @param {number} [limit] How many results to return.
         * @param {number} [offset] An integer that designates the offset at which to begin returning results. Defaults to 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cardOrdersRetrieve: async (cardId, limit, offset, options = {}) => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists("cardOrdersRetrieve", "cardId", cardId);
            const localVarPath = `/cards/{card_id}/orders`.replace(`{${"card_id"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            if (limit !== undefined) {
                localVarQueryParameter["limit"] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter["offset"] = offset;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * CardOrdersApi - functional programming interface
 * @export
 */
const CardOrdersApiFp = function (configuration) {
    const localVarAxiosParamCreator = CardOrdersApiAxiosParamCreator(configuration);
    return {
        /**
         * Creates a new card order given information
         * @summary create
         * @param {string} cardId The ID of the card to which the card orders belong.
         * @param {CardOrderEditable} cardOrderEditable
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cardOrderCreate(cardId, cardOrderEditable, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cardOrderCreate(cardId, cardOrderEditable, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the card orders associated with the given card id.
         * @summary get
         * @param {string} cardId The ID of the card to which the card orders belong.
         * @param {number} [limit] How many results to return.
         * @param {number} [offset] An integer that designates the offset at which to begin returning results. Defaults to 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cardOrdersRetrieve(cardId, limit, offset, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cardOrdersRetrieve(cardId, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * CardOrdersApi - object-oriented interface
 * @export
 * @class CardOrdersApi
 * @extends {BaseAPI}
 */
class CardOrdersApi extends BaseAPI {
    /**
     * Creates a new card order given information
     * @summary create
     * @param {string} cardId The ID of the card to which the card orders belong.
     * @param {CardOrderEditable} cardOrderEditable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardOrdersApi
     */
    create(cardId, cardOrderEditable, options) {
        return CardOrdersApiFp(this.configuration)
            .cardOrderCreate(cardId, cardOrderEditable, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new CardOrder(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
    /**
     * Retrieves the card orders associated with the given card id.
     * @summary get
     * @param {string} cardId The ID of the card to which the card orders belong.
     * @param {number} [limit] How many results to return.
     * @param {number} [offset] An integer that designates the offset at which to begin returning results. Defaults to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardOrdersApi
     */
    get(cardId, limit, offset, options) {
        return CardOrdersApiFp(this.configuration)
            .cardOrdersRetrieve(cardId, limit, offset, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new CardOrderList(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/**
 * CardsApi - axios parameter creator
 * @export
 */
const CardsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Creates a new card given information
         * @summary create
         * @param {CardEditable} cardEditable
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cardCreate: async (cardEditable, options = {}) => {
            // verify required parameter 'cardEditable' is not null or undefined
            assertParamExists("cardCreate", "cardEditable", cardEditable);
            const localVarPath = `/cards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            localVarHeaderParameter["Content-Type"] = "application/json";
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(cardEditable, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an existing card. You need only supply the unique identifier that was returned upon card creation.
         * @summary delete
         * @param {string} cardId id of the card
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cardDelete: async (cardId, options = {}) => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists("cardDelete", "cardId", cardId);
            const localVarPath = `/cards/{card_id}`.replace(`{${"card_id"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "DELETE" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the details of an existing card. You need only supply the unique customer identifier that was returned upon card creation.
         * @summary get
         * @param {string} cardId id of the card
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cardRetrieve: async (cardId, options = {}) => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists("cardRetrieve", "cardId", cardId);
            const localVarPath = `/cards/{card_id}`.replace(`{${"card_id"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the details of an existing card. You need only supply the unique identifier that was returned upon card creation.
         * @summary update
         * @param {string} cardId id of the card
         * @param {CardUpdatable} cardUpdatable
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cardUpdate: async (cardId, cardUpdatable, options = {}) => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists("cardUpdate", "cardId", cardId);
            // verify required parameter 'cardUpdatable' is not null or undefined
            assertParamExists("cardUpdate", "cardUpdatable", cardUpdatable);
            const localVarPath = `/cards/{card_id}`.replace(`{${"card_id"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            localVarHeaderParameter["Content-Type"] = "application/json";
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(cardUpdatable, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of your cards. The cards are returned sorted by creation date, with the most recently created addresses appearing first.
         * @summary list
         * @param {number} [limit] How many results to return.
         * @param {string} [before] A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response.
         * @param {string} [after] A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response.
         * @param {Array<string>} [include] Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cardsList: async (limit, before, after, include, options = {}) => {
            const localVarPath = `/cards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            if (limit !== undefined) {
                localVarQueryParameter["limit"] = limit;
            }
            if (before !== undefined) {
                localVarQueryParameter["before"] = before;
            }
            if (after !== undefined) {
                localVarQueryParameter["after"] = after;
            }
            if (include) {
                localVarQueryParameter["include"] = valueToString(include);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * CardsApi - functional programming interface
 * @export
 */
const CardsApiFp = function (configuration) {
    const localVarAxiosParamCreator = CardsApiAxiosParamCreator(configuration);
    return {
        /**
         * Creates a new card given information
         * @summary create
         * @param {CardEditable} cardEditable
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cardCreate(cardEditable, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cardCreate(cardEditable, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an existing card. You need only supply the unique identifier that was returned upon card creation.
         * @summary delete
         * @param {string} cardId id of the card
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cardDelete(cardId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cardDelete(cardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the details of an existing card. You need only supply the unique customer identifier that was returned upon card creation.
         * @summary get
         * @param {string} cardId id of the card
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cardRetrieve(cardId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cardRetrieve(cardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the details of an existing card. You need only supply the unique identifier that was returned upon card creation.
         * @summary update
         * @param {string} cardId id of the card
         * @param {CardUpdatable} cardUpdatable
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cardUpdate(cardId, cardUpdatable, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cardUpdate(cardId, cardUpdatable, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of your cards. The cards are returned sorted by creation date, with the most recently created addresses appearing first.
         * @summary list
         * @param {number} [limit] How many results to return.
         * @param {string} [before] A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response.
         * @param {string} [after] A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response.
         * @param {Array<string>} [include] Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cardsList(limit, before, after, include, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cardsList(limit, before, after, include, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * CardsApi - object-oriented interface
 * @export
 * @class CardsApi
 * @extends {BaseAPI}
 */
class CardsApi extends BaseAPI {
    /**
     * Creates a new card given information
     * @summary create
     * @param {CardEditable} cardEditable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsApi
     */
    create(cardEditable, options) {
        return CardsApiFp(this.configuration)
            .cardCreate(cardEditable, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new Card(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
    /**
     * Delete an existing card. You need only supply the unique identifier that was returned upon card creation.
     * @summary delete
     * @param {string} cardId id of the card
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsApi
     */
    delete(cardId, options) {
        return CardsApiFp(this.configuration)
            .cardDelete(cardId, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new CardDeletion(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
    /**
     * Retrieves the details of an existing card. You need only supply the unique customer identifier that was returned upon card creation.
     * @summary get
     * @param {string} cardId id of the card
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsApi
     */
    get(cardId, options) {
        return CardsApiFp(this.configuration)
            .cardRetrieve(cardId, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new Card(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
    /**
     * Update the details of an existing card. You need only supply the unique identifier that was returned upon card creation.
     * @summary update
     * @param {string} cardId id of the card
     * @param {CardUpdatable} cardUpdatable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsApi
     */
    update(cardId, cardUpdatable, options) {
        return CardsApiFp(this.configuration)
            .cardUpdate(cardId, cardUpdatable, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new Card(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
    /**
     * Returns a list of your cards. The cards are returned sorted by creation date, with the most recently created addresses appearing first.
     * @summary list
     * @param {number} [limit] How many results to return.
     * @param {string} [before] A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response.
     * @param {string} [after] A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response.
     * @param {Array<string>} [include] Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsApi
     */
    list(limit, before, after, include, options) {
        return CardsApiFp(this.configuration)
            .cardsList(limit, before, after, include, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new CardList(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/**
 * ChecksApi - axios parameter creator
 * @export
 */
const ChecksApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Completely removes a check from production. This can only be done if the check has a `send_date` and the `send_date` has not yet passed. If the check is successfully canceled, you will not be charged for it. Read more on [cancellation windows](#section/Cancellation-Windows) and [scheduling](#section/Scheduled-Mailings). Scheduling and cancellation is a premium feature. Upgrade to the appropriate [Print & Mail Edition](https://dashboard.lob.com/#/settings/editions) to gain access.
         * @summary cancel
         * @param {string} chkId id of the check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkCancel: async (chkId, options = {}) => {
            // verify required parameter 'chkId' is not null or undefined
            assertParamExists("checkCancel", "chkId", chkId);
            const localVarPath = `/checks/{chk_id}`.replace(`{${"chk_id"}}`, encodeURIComponent(String(chkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "DELETE" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new check with the provided properties.
         * @summary create
         * @param {CheckEditable} checkEditable
         * @param {string} [idempotencyKey] A string of no longer than 256 characters that uniquely identifies this resource. For more help integrating idempotency keys, refer to our [implementation guide](https://www.lob.com/guides#idempotent_request).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkCreate: async (checkEditable, idempotencyKey, options = {}) => {
            // verify required parameter 'checkEditable' is not null or undefined
            assertParamExists("checkCreate", "checkEditable", checkEditable);
            const localVarPath = `/checks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            if (idempotencyKey !== undefined && idempotencyKey !== null) {
                localVarHeaderParameter["Idempotency-Key"] = String(idempotencyKey);
            }
            localVarHeaderParameter["Content-Type"] = "application/json";
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(checkEditable, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the details of an existing check. You need only supply the unique check identifier that was returned upon check creation.
         * @summary get
         * @param {string} chkId id of the check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkRetrieve: async (chkId, options = {}) => {
            // verify required parameter 'chkId' is not null or undefined
            assertParamExists("checkRetrieve", "chkId", chkId);
            const localVarPath = `/checks/{chk_id}`.replace(`{${"chk_id"}}`, encodeURIComponent(String(chkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of your checks. The checks are returned sorted by creation date, with the most recently created checks appearing first.
         * @summary list
         * @param {number} [limit] How many results to return.
         * @param {string} [before] A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response.
         * @param {string} [after] A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response.
         * @param {Array<string>} [include] Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;.
         * @param {{ [key: string]: string; }} [dateCreated] Filter by date created.
         * @param {{ [key: string]: string; }} [metadata] Filter by metadata key-value pair&#x60;.
         * @param {boolean} [scheduled] * &#x60;true&#x60; - only return orders (past or future) where &#x60;send_date&#x60; is greater than &#x60;date_created&#x60; * &#x60;false&#x60; - only return orders where &#x60;send_date&#x60; is equal to &#x60;date_created&#x60;
         * @param {{ [key: string]: string; }} [sendDate] Filter by date sent.
         * @param {MailType} [mailType] A string designating the mail postage type: * &#x60;usps_first_class&#x60; - (default) * &#x60;usps_standard&#x60; - a [cheaper option](https://lob.com/pricing/print-mail#compare) which is less predictable and takes longer to deliver. &#x60;usps_standard&#x60; cannot be used with &#x60;4x6&#x60; postcards or for any postcards sent outside of the United States.
         * @param {object} [sortBy] Sorts items by ascending or descending dates. Use either &#x60;date_created&#x60; or &#x60;send_date&#x60;, not both.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checksList: async (limit, before, after, include, dateCreated, metadata, scheduled, sendDate, mailType, sortBy, options = {}) => {
            const localVarPath = `/checks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            if (limit !== undefined) {
                localVarQueryParameter["limit"] = limit;
            }
            if (before !== undefined) {
                localVarQueryParameter["before"] = before;
            }
            if (after !== undefined) {
                localVarQueryParameter["after"] = after;
            }
            if (include) {
                localVarQueryParameter["include"] = valueToString(include);
            }
            if (dateCreated !== undefined) {
                localVarQueryParameter["date_created"] = valueToString(dateCreated);
            }
            if (metadata !== undefined) {
                localVarQueryParameter["metadata"] = valueToString(metadata);
            }
            if (scheduled !== undefined) {
                localVarQueryParameter["scheduled"] = scheduled;
            }
            if (sendDate !== undefined) {
                localVarQueryParameter["send_date"] = valueToString(sendDate);
            }
            if (mailType !== undefined) {
                localVarQueryParameter["mail_type"] = valueToString(mailType);
            }
            if (sortBy !== undefined) {
                localVarQueryParameter["sort_by"] = valueToString(sortBy);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ChecksApi - functional programming interface
 * @export
 */
const ChecksApiFp = function (configuration) {
    const localVarAxiosParamCreator = ChecksApiAxiosParamCreator(configuration);
    return {
        /**
         * Completely removes a check from production. This can only be done if the check has a `send_date` and the `send_date` has not yet passed. If the check is successfully canceled, you will not be charged for it. Read more on [cancellation windows](#section/Cancellation-Windows) and [scheduling](#section/Scheduled-Mailings). Scheduling and cancellation is a premium feature. Upgrade to the appropriate [Print & Mail Edition](https://dashboard.lob.com/#/settings/editions) to gain access.
         * @summary cancel
         * @param {string} chkId id of the check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkCancel(chkId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkCancel(chkId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new check with the provided properties.
         * @summary create
         * @param {CheckEditable} checkEditable
         * @param {string} [idempotencyKey] A string of no longer than 256 characters that uniquely identifies this resource. For more help integrating idempotency keys, refer to our [implementation guide](https://www.lob.com/guides#idempotent_request).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkCreate(checkEditable, idempotencyKey, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkCreate(checkEditable, idempotencyKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the details of an existing check. You need only supply the unique check identifier that was returned upon check creation.
         * @summary get
         * @param {string} chkId id of the check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkRetrieve(chkId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkRetrieve(chkId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of your checks. The checks are returned sorted by creation date, with the most recently created checks appearing first.
         * @summary list
         * @param {number} [limit] How many results to return.
         * @param {string} [before] A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response.
         * @param {string} [after] A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response.
         * @param {Array<string>} [include] Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;.
         * @param {{ [key: string]: string; }} [dateCreated] Filter by date created.
         * @param {{ [key: string]: string; }} [metadata] Filter by metadata key-value pair&#x60;.
         * @param {boolean} [scheduled] * &#x60;true&#x60; - only return orders (past or future) where &#x60;send_date&#x60; is greater than &#x60;date_created&#x60; * &#x60;false&#x60; - only return orders where &#x60;send_date&#x60; is equal to &#x60;date_created&#x60;
         * @param {{ [key: string]: string; }} [sendDate] Filter by date sent.
         * @param {MailType} [mailType] A string designating the mail postage type: * &#x60;usps_first_class&#x60; - (default) * &#x60;usps_standard&#x60; - a [cheaper option](https://lob.com/pricing/print-mail#compare) which is less predictable and takes longer to deliver. &#x60;usps_standard&#x60; cannot be used with &#x60;4x6&#x60; postcards or for any postcards sent outside of the United States.
         * @param {object} [sortBy] Sorts items by ascending or descending dates. Use either &#x60;date_created&#x60; or &#x60;send_date&#x60;, not both.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checksList(limit, before, after, include, dateCreated, metadata, scheduled, sendDate, mailType, sortBy, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checksList(limit, before, after, include, dateCreated, metadata, scheduled, sendDate, mailType, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * ChecksApi - object-oriented interface
 * @export
 * @class ChecksApi
 * @extends {BaseAPI}
 */
class ChecksApi extends BaseAPI {
    /**
     * Completely removes a check from production. This can only be done if the check has a `send_date` and the `send_date` has not yet passed. If the check is successfully canceled, you will not be charged for it. Read more on [cancellation windows](#section/Cancellation-Windows) and [scheduling](#section/Scheduled-Mailings). Scheduling and cancellation is a premium feature. Upgrade to the appropriate [Print & Mail Edition](https://dashboard.lob.com/#/settings/editions) to gain access.
     * @summary cancel
     * @param {string} chkId id of the check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChecksApi
     */
    cancel(chkId, options) {
        return ChecksApiFp(this.configuration)
            .checkCancel(chkId, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new CheckDeletion(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
    /**
     * Creates a new check with the provided properties.
     * @summary create
     * @param {CheckEditable} checkEditable
     * @param {string} [idempotencyKey] A string of no longer than 256 characters that uniquely identifies this resource. For more help integrating idempotency keys, refer to our [implementation guide](https://www.lob.com/guides#idempotent_request).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChecksApi
     */
    create(checkEditable, idempotencyKey, options) {
        return ChecksApiFp(this.configuration)
            .checkCreate(checkEditable, idempotencyKey, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new Check(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
    /**
     * Retrieves the details of an existing check. You need only supply the unique check identifier that was returned upon check creation.
     * @summary get
     * @param {string} chkId id of the check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChecksApi
     */
    get(chkId, options) {
        return ChecksApiFp(this.configuration)
            .checkRetrieve(chkId, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new Check(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
    /**
     * Returns a list of your checks. The checks are returned sorted by creation date, with the most recently created checks appearing first.
     * @summary list
     * @param {number} [limit] How many results to return.
     * @param {string} [before] A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response.
     * @param {string} [after] A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response.
     * @param {Array<string>} [include] Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;.
     * @param {{ [key: string]: string; }} [dateCreated] Filter by date created.
     * @param {{ [key: string]: string; }} [metadata] Filter by metadata key-value pair&#x60;.
     * @param {boolean} [scheduled] * &#x60;true&#x60; - only return orders (past or future) where &#x60;send_date&#x60; is greater than &#x60;date_created&#x60; * &#x60;false&#x60; - only return orders where &#x60;send_date&#x60; is equal to &#x60;date_created&#x60;
     * @param {{ [key: string]: string; }} [sendDate] Filter by date sent.
     * @param {MailType} [mailType] A string designating the mail postage type: * &#x60;usps_first_class&#x60; - (default) * &#x60;usps_standard&#x60; - a [cheaper option](https://lob.com/pricing/print-mail#compare) which is less predictable and takes longer to deliver. &#x60;usps_standard&#x60; cannot be used with &#x60;4x6&#x60; postcards or for any postcards sent outside of the United States.
     * @param {object} [sortBy] Sorts items by ascending or descending dates. Use either &#x60;date_created&#x60; or &#x60;send_date&#x60;, not both.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChecksApi
     */
    list(limit, before, after, include, dateCreated, metadata, scheduled, sendDate, mailType, sortBy, options) {
        return ChecksApiFp(this.configuration)
            .checksList(limit, before, after, include, dateCreated, metadata, scheduled, sendDate, mailType, sortBy, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new CheckList(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/**
 * IntlAutocompletionsApi - axios parameter creator
 * @export
 */
const IntlAutocompletionsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Given an address prefix consisting of a partial primary line and country, as well as optional input of city, state, and zip code, this functionality returns up to 10 full International address suggestions. Not all of them will turn out to be valid addresses; they\'ll need to be [verified](#operation/intl_verification).
         * @summary autocomplete
         * @param {IntlAutocompletionsWritable} intlAutocompletionsWritable
         * @param {'native' | 'match'} [xLangOutput] * &#x60;native&#x60; - Translate response to the native language of the country in the request * &#x60;match&#x60; - match the response to the language in the request  Default response is in English.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        intlAutocompletion: async (intlAutocompletionsWritable, xLangOutput, options = {}) => {
            // verify required parameter 'intlAutocompletionsWritable' is not null or undefined
            assertParamExists("intlAutocompletion", "intlAutocompletionsWritable", intlAutocompletionsWritable);
            const localVarPath = `/intl_autocompletions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            if (xLangOutput !== undefined && xLangOutput !== null) {
                localVarHeaderParameter["x-lang-output"] = String(xLangOutput);
            }
            localVarHeaderParameter["Content-Type"] = "application/json";
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(intlAutocompletionsWritable, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * IntlAutocompletionsApi - functional programming interface
 * @export
 */
const IntlAutocompletionsApiFp = function (configuration) {
    const localVarAxiosParamCreator = IntlAutocompletionsApiAxiosParamCreator(configuration);
    return {
        /**
         * Given an address prefix consisting of a partial primary line and country, as well as optional input of city, state, and zip code, this functionality returns up to 10 full International address suggestions. Not all of them will turn out to be valid addresses; they\'ll need to be [verified](#operation/intl_verification).
         * @summary autocomplete
         * @param {IntlAutocompletionsWritable} intlAutocompletionsWritable
         * @param {'native' | 'match'} [xLangOutput] * &#x60;native&#x60; - Translate response to the native language of the country in the request * &#x60;match&#x60; - match the response to the language in the request  Default response is in English.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async intlAutocompletion(intlAutocompletionsWritable, xLangOutput, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.intlAutocompletion(intlAutocompletionsWritable, xLangOutput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * IntlAutocompletionsApi - object-oriented interface
 * @export
 * @class IntlAutocompletionsApi
 * @extends {BaseAPI}
 */
class IntlAutocompletionsApi extends BaseAPI {
    /**
     * Given an address prefix consisting of a partial primary line and country, as well as optional input of city, state, and zip code, this functionality returns up to 10 full International address suggestions. Not all of them will turn out to be valid addresses; they\'ll need to be [verified](#operation/intl_verification).
     * @summary autocomplete
     * @param {IntlAutocompletionsWritable} intlAutocompletionsWritable
     * @param {'native' | 'match'} [xLangOutput] * &#x60;native&#x60; - Translate response to the native language of the country in the request * &#x60;match&#x60; - match the response to the language in the request  Default response is in English.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntlAutocompletionsApi
     */
    autocomplete(intlAutocompletionsWritable, xLangOutput, options) {
        return IntlAutocompletionsApiFp(this.configuration)
            .intlAutocompletion(intlAutocompletionsWritable, xLangOutput, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new IntlAutocompletions(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/**
 * IntlVerificationsApi - axios parameter creator
 * @export
 */
const IntlVerificationsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Verify a list of international (except US or US territories) address with a live API key.
         * @summary verifyBulk
         * @param {IntlVerificationsPayload} intlVerificationsPayload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkIntlVerifications: async (intlVerificationsPayload, options = {}) => {
            // verify required parameter 'intlVerificationsPayload' is not null or undefined
            assertParamExists("bulkIntlVerifications", "intlVerificationsPayload", intlVerificationsPayload);
            const localVarPath = `/bulk/intl_verifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            localVarHeaderParameter["Content-Type"] = "application/json";
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(intlVerificationsPayload, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verify an international (except US or US territories) address with a live API key.
         * @summary verifySingle
         * @param {IntlVerificationWritable} intlVerificationWritable
         * @param {'native' | 'match'} [xLangOutput] * &#x60;native&#x60; - Translate response to the native language of the country in the request * &#x60;match&#x60; - match the response to the language in the request  Default response is in English.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        intlVerification: async (intlVerificationWritable, xLangOutput, options = {}) => {
            // verify required parameter 'intlVerificationWritable' is not null or undefined
            assertParamExists("intlVerification", "intlVerificationWritable", intlVerificationWritable);
            const localVarPath = `/intl_verifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            if (xLangOutput !== undefined && xLangOutput !== null) {
                localVarHeaderParameter["x-lang-output"] = String(xLangOutput);
            }
            localVarHeaderParameter["Content-Type"] = "application/json";
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(intlVerificationWritable, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * IntlVerificationsApi - functional programming interface
 * @export
 */
const IntlVerificationsApiFp = function (configuration) {
    const localVarAxiosParamCreator = IntlVerificationsApiAxiosParamCreator(configuration);
    return {
        /**
         * Verify a list of international (except US or US territories) address with a live API key.
         * @summary verifyBulk
         * @param {IntlVerificationsPayload} intlVerificationsPayload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkIntlVerifications(intlVerificationsPayload, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkIntlVerifications(intlVerificationsPayload, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Verify an international (except US or US territories) address with a live API key.
         * @summary verifySingle
         * @param {IntlVerificationWritable} intlVerificationWritable
         * @param {'native' | 'match'} [xLangOutput] * &#x60;native&#x60; - Translate response to the native language of the country in the request * &#x60;match&#x60; - match the response to the language in the request  Default response is in English.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async intlVerification(intlVerificationWritable, xLangOutput, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.intlVerification(intlVerificationWritable, xLangOutput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * IntlVerificationsApi - object-oriented interface
 * @export
 * @class IntlVerificationsApi
 * @extends {BaseAPI}
 */
class IntlVerificationsApi extends BaseAPI {
    /**
     * Verify a list of international (except US or US territories) address with a live API key.
     * @summary verifyBulk
     * @param {IntlVerificationsPayload} intlVerificationsPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntlVerificationsApi
     */
    verifyBulk(intlVerificationsPayload, options) {
        return IntlVerificationsApiFp(this.configuration)
            .bulkIntlVerifications(intlVerificationsPayload, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new IntlVerifications(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
    /**
     * Verify an international (except US or US territories) address with a live API key.
     * @summary verifySingle
     * @param {IntlVerificationWritable} intlVerificationWritable
     * @param {'native' | 'match'} [xLangOutput] * &#x60;native&#x60; - Translate response to the native language of the country in the request * &#x60;match&#x60; - match the response to the language in the request  Default response is in English.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntlVerificationsApi
     */
    verifySingle(intlVerificationWritable, xLangOutput, options) {
        return IntlVerificationsApiFp(this.configuration)
            .intlVerification(intlVerificationWritable, xLangOutput, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new IntlVerification(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/**
 * LettersApi - axios parameter creator
 * @export
 */
const LettersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Completely removes a letter from production. This can only be done if the letter has a `send_date` and the `send_date` has not yet passed. If the letter is successfully canceled, you will not be charged for it. Read more on [cancellation windows](#section/Cancellation-Windows) and [scheduling](#section/Scheduled-Mailings). Scheduling and cancellation is a premium feature. Upgrade to the appropriate [Print & Mail Edition](https://dashboard.lob.com/#/settings/editions) to gain access.
         * @summary cancel
         * @param {string} ltrId id of the letter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        letterCancel: async (ltrId, options = {}) => {
            // verify required parameter 'ltrId' is not null or undefined
            assertParamExists("letterCancel", "ltrId", ltrId);
            const localVarPath = `/letters/{ltr_id}`.replace(`{${"ltr_id"}}`, encodeURIComponent(String(ltrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "DELETE" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new letter given information
         * @summary create
         * @param {LetterEditable} letterEditable
         * @param {string} [idempotencyKey] A string of no longer than 256 characters that uniquely identifies this resource. For more help integrating idempotency keys, refer to our [implementation guide](https://www.lob.com/guides#idempotent_request).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        letterCreate: async (letterEditable, idempotencyKey, options = {}) => {
            // verify required parameter 'letterEditable' is not null or undefined
            assertParamExists("letterCreate", "letterEditable", letterEditable);
            const localVarPath = `/letters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            if (idempotencyKey !== undefined && idempotencyKey !== null) {
                localVarHeaderParameter["Idempotency-Key"] = String(idempotencyKey);
            }
            localVarHeaderParameter["Content-Type"] = "application/json";
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(letterEditable, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the details of an existing letter. You need only supply the unique letter identifier that was returned upon letter creation.
         * @summary get
         * @param {string} ltrId id of the letter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        letterRetrieve: async (ltrId, options = {}) => {
            // verify required parameter 'ltrId' is not null or undefined
            assertParamExists("letterRetrieve", "ltrId", ltrId);
            const localVarPath = `/letters/{ltr_id}`.replace(`{${"ltr_id"}}`, encodeURIComponent(String(ltrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of your letters. The letters are returned sorted by creation date, with the most recently created letters appearing first.
         * @summary list
         * @param {number} [limit] How many results to return.
         * @param {string} [before] A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response.
         * @param {string} [after] A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response.
         * @param {Array<string>} [include] Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;.
         * @param {{ [key: string]: string; }} [dateCreated] Filter by date created.
         * @param {{ [key: string]: string; }} [metadata] Filter by metadata key-value pair&#x60;.
         * @param {boolean} [color] Set to &#x60;true&#x60; to return only color letters. Set to &#x60;false&#x60; to return only black &amp; white letters.
         * @param {boolean} [scheduled] * &#x60;true&#x60; - only return orders (past or future) where &#x60;send_date&#x60; is greater than &#x60;date_created&#x60; * &#x60;false&#x60; - only return orders where &#x60;send_date&#x60; is equal to &#x60;date_created&#x60;
         * @param {{ [key: string]: string; }} [sendDate] Filter by date sent.
         * @param {MailType} [mailType] A string designating the mail postage type: * &#x60;usps_first_class&#x60; - (default) * &#x60;usps_standard&#x60; - a [cheaper option](https://lob.com/pricing/print-mail#compare) which is less predictable and takes longer to deliver. &#x60;usps_standard&#x60; cannot be used with &#x60;4x6&#x60; postcards or for any postcards sent outside of the United States.
         * @param {object} [sortBy] Sorts items by ascending or descending dates. Use either &#x60;date_created&#x60; or &#x60;send_date&#x60;, not both.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lettersList: async (limit, before, after, include, dateCreated, metadata, color, scheduled, sendDate, mailType, sortBy, options = {}) => {
            const localVarPath = `/letters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            if (limit !== undefined) {
                localVarQueryParameter["limit"] = limit;
            }
            if (before !== undefined) {
                localVarQueryParameter["before"] = before;
            }
            if (after !== undefined) {
                localVarQueryParameter["after"] = after;
            }
            if (include) {
                localVarQueryParameter["include"] = valueToString(include);
            }
            if (dateCreated !== undefined) {
                localVarQueryParameter["date_created"] = valueToString(dateCreated);
            }
            if (metadata !== undefined) {
                localVarQueryParameter["metadata"] = valueToString(metadata);
            }
            if (color !== undefined) {
                localVarQueryParameter["color"] = color;
            }
            if (scheduled !== undefined) {
                localVarQueryParameter["scheduled"] = scheduled;
            }
            if (sendDate !== undefined) {
                localVarQueryParameter["send_date"] = valueToString(sendDate);
            }
            if (mailType !== undefined) {
                localVarQueryParameter["mail_type"] = valueToString(mailType);
            }
            if (sortBy !== undefined) {
                localVarQueryParameter["sort_by"] = valueToString(sortBy);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * LettersApi - functional programming interface
 * @export
 */
const LettersApiFp = function (configuration) {
    const localVarAxiosParamCreator = LettersApiAxiosParamCreator(configuration);
    return {
        /**
         * Completely removes a letter from production. This can only be done if the letter has a `send_date` and the `send_date` has not yet passed. If the letter is successfully canceled, you will not be charged for it. Read more on [cancellation windows](#section/Cancellation-Windows) and [scheduling](#section/Scheduled-Mailings). Scheduling and cancellation is a premium feature. Upgrade to the appropriate [Print & Mail Edition](https://dashboard.lob.com/#/settings/editions) to gain access.
         * @summary cancel
         * @param {string} ltrId id of the letter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async letterCancel(ltrId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.letterCancel(ltrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new letter given information
         * @summary create
         * @param {LetterEditable} letterEditable
         * @param {string} [idempotencyKey] A string of no longer than 256 characters that uniquely identifies this resource. For more help integrating idempotency keys, refer to our [implementation guide](https://www.lob.com/guides#idempotent_request).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async letterCreate(letterEditable, idempotencyKey, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.letterCreate(letterEditable, idempotencyKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the details of an existing letter. You need only supply the unique letter identifier that was returned upon letter creation.
         * @summary get
         * @param {string} ltrId id of the letter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async letterRetrieve(ltrId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.letterRetrieve(ltrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of your letters. The letters are returned sorted by creation date, with the most recently created letters appearing first.
         * @summary list
         * @param {number} [limit] How many results to return.
         * @param {string} [before] A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response.
         * @param {string} [after] A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response.
         * @param {Array<string>} [include] Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;.
         * @param {{ [key: string]: string; }} [dateCreated] Filter by date created.
         * @param {{ [key: string]: string; }} [metadata] Filter by metadata key-value pair&#x60;.
         * @param {boolean} [color] Set to &#x60;true&#x60; to return only color letters. Set to &#x60;false&#x60; to return only black &amp; white letters.
         * @param {boolean} [scheduled] * &#x60;true&#x60; - only return orders (past or future) where &#x60;send_date&#x60; is greater than &#x60;date_created&#x60; * &#x60;false&#x60; - only return orders where &#x60;send_date&#x60; is equal to &#x60;date_created&#x60;
         * @param {{ [key: string]: string; }} [sendDate] Filter by date sent.
         * @param {MailType} [mailType] A string designating the mail postage type: * &#x60;usps_first_class&#x60; - (default) * &#x60;usps_standard&#x60; - a [cheaper option](https://lob.com/pricing/print-mail#compare) which is less predictable and takes longer to deliver. &#x60;usps_standard&#x60; cannot be used with &#x60;4x6&#x60; postcards or for any postcards sent outside of the United States.
         * @param {object} [sortBy] Sorts items by ascending or descending dates. Use either &#x60;date_created&#x60; or &#x60;send_date&#x60;, not both.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lettersList(limit, before, after, include, dateCreated, metadata, color, scheduled, sendDate, mailType, sortBy, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lettersList(limit, before, after, include, dateCreated, metadata, color, scheduled, sendDate, mailType, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * LettersApi - object-oriented interface
 * @export
 * @class LettersApi
 * @extends {BaseAPI}
 */
class LettersApi extends BaseAPI {
    /**
     * Completely removes a letter from production. This can only be done if the letter has a `send_date` and the `send_date` has not yet passed. If the letter is successfully canceled, you will not be charged for it. Read more on [cancellation windows](#section/Cancellation-Windows) and [scheduling](#section/Scheduled-Mailings). Scheduling and cancellation is a premium feature. Upgrade to the appropriate [Print & Mail Edition](https://dashboard.lob.com/#/settings/editions) to gain access.
     * @summary cancel
     * @param {string} ltrId id of the letter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LettersApi
     */
    cancel(ltrId, options) {
        return LettersApiFp(this.configuration)
            .letterCancel(ltrId, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new LetterDeletion(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
    /**
     * Creates a new letter given information
     * @summary create
     * @param {LetterEditable} letterEditable
     * @param {string} [idempotencyKey] A string of no longer than 256 characters that uniquely identifies this resource. For more help integrating idempotency keys, refer to our [implementation guide](https://www.lob.com/guides#idempotent_request).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LettersApi
     */
    create(letterEditable, idempotencyKey, options) {
        return LettersApiFp(this.configuration)
            .letterCreate(letterEditable, idempotencyKey, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new Letter(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
    /**
     * Retrieves the details of an existing letter. You need only supply the unique letter identifier that was returned upon letter creation.
     * @summary get
     * @param {string} ltrId id of the letter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LettersApi
     */
    get(ltrId, options) {
        return LettersApiFp(this.configuration)
            .letterRetrieve(ltrId, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new Letter(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
    /**
     * Returns a list of your letters. The letters are returned sorted by creation date, with the most recently created letters appearing first.
     * @summary list
     * @param {number} [limit] How many results to return.
     * @param {string} [before] A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response.
     * @param {string} [after] A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response.
     * @param {Array<string>} [include] Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;.
     * @param {{ [key: string]: string; }} [dateCreated] Filter by date created.
     * @param {{ [key: string]: string; }} [metadata] Filter by metadata key-value pair&#x60;.
     * @param {boolean} [color] Set to &#x60;true&#x60; to return only color letters. Set to &#x60;false&#x60; to return only black &amp; white letters.
     * @param {boolean} [scheduled] * &#x60;true&#x60; - only return orders (past or future) where &#x60;send_date&#x60; is greater than &#x60;date_created&#x60; * &#x60;false&#x60; - only return orders where &#x60;send_date&#x60; is equal to &#x60;date_created&#x60;
     * @param {{ [key: string]: string; }} [sendDate] Filter by date sent.
     * @param {MailType} [mailType] A string designating the mail postage type: * &#x60;usps_first_class&#x60; - (default) * &#x60;usps_standard&#x60; - a [cheaper option](https://lob.com/pricing/print-mail#compare) which is less predictable and takes longer to deliver. &#x60;usps_standard&#x60; cannot be used with &#x60;4x6&#x60; postcards or for any postcards sent outside of the United States.
     * @param {object} [sortBy] Sorts items by ascending or descending dates. Use either &#x60;date_created&#x60; or &#x60;send_date&#x60;, not both.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LettersApi
     */
    list(limit, before, after, include, dateCreated, metadata, color, scheduled, sendDate, mailType, sortBy, options) {
        return LettersApiFp(this.configuration)
            .lettersList(limit, before, after, include, dateCreated, metadata, color, scheduled, sendDate, mailType, sortBy, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new LetterList(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/**
 * PostcardsApi - axios parameter creator
 * @export
 */
const PostcardsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Creates a new postcard given information
         * @summary create
         * @param {PostcardEditable} postcardEditable
         * @param {string} [idempotencyKey] A string of no longer than 256 characters that uniquely identifies this resource. For more help integrating idempotency keys, refer to our [implementation guide](https://www.lob.com/guides#idempotent_request).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postcardCreate: async (postcardEditable, idempotencyKey, options = {}) => {
            // verify required parameter 'postcardEditable' is not null or undefined
            assertParamExists("postcardCreate", "postcardEditable", postcardEditable);
            const localVarPath = `/postcards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            if (idempotencyKey !== undefined && idempotencyKey !== null) {
                localVarHeaderParameter["Idempotency-Key"] = String(idempotencyKey);
            }
            localVarHeaderParameter["Content-Type"] = "application/json";
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(postcardEditable, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Completely removes a postcard from production. This can only be done if the postcard has a `send_date` and the `send_date` has not yet passed. If the postcard is successfully canceled, you will not be charged for it. Read more on [cancellation windows](#section/Cancellation-Windows) and [scheduling](#section/Scheduled-Mailings). Scheduling and cancellation is a premium feature. Upgrade to the appropriate [Print & Mail Edition](https://dashboard.lob.com/#/settings/editions) to gain access.
         * @summary cancel
         * @param {string} pscId id of the postcard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postcardDelete: async (pscId, options = {}) => {
            // verify required parameter 'pscId' is not null or undefined
            assertParamExists("postcardDelete", "pscId", pscId);
            const localVarPath = `/postcards/{psc_id}`.replace(`{${"psc_id"}}`, encodeURIComponent(String(pscId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "DELETE" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the details of an existing postcard. You need only supply the unique customer identifier that was returned upon postcard creation.
         * @summary get
         * @param {string} pscId id of the postcard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postcardRetrieve: async (pscId, options = {}) => {
            // verify required parameter 'pscId' is not null or undefined
            assertParamExists("postcardRetrieve", "pscId", pscId);
            const localVarPath = `/postcards/{psc_id}`.replace(`{${"psc_id"}}`, encodeURIComponent(String(pscId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of your postcards. The addresses are returned sorted by creation date, with the most recently created addresses appearing first.
         * @summary list
         * @param {number} [limit] How many results to return.
         * @param {string} [before] A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response.
         * @param {string} [after] A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response.
         * @param {Array<string>} [include] Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;.
         * @param {{ [key: string]: string; }} [dateCreated] Filter by date created.
         * @param {{ [key: string]: string; }} [metadata] Filter by metadata key-value pair&#x60;.
         * @param {Array<PostcardSize>} [size] Specifies the size of the postcard. Only &#x60;4x6&#x60; postcards can be sent to international destinations.
         * @param {boolean} [scheduled] * &#x60;true&#x60; - only return orders (past or future) where &#x60;send_date&#x60; is greater than &#x60;date_created&#x60; * &#x60;false&#x60; - only return orders where &#x60;send_date&#x60; is equal to &#x60;date_created&#x60;
         * @param {{ [key: string]: string; }} [sendDate] Filter by date sent.
         * @param {MailType} [mailType] A string designating the mail postage type: * &#x60;usps_first_class&#x60; - (default) * &#x60;usps_standard&#x60; - a [cheaper option](https://lob.com/pricing/print-mail#compare) which is less predictable and takes longer to deliver. &#x60;usps_standard&#x60; cannot be used with &#x60;4x6&#x60; postcards or for any postcards sent outside of the United States.
         * @param {object} [sortBy] Sorts items by ascending or descending dates. Use either &#x60;date_created&#x60; or &#x60;send_date&#x60;, not both.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postcardsList: async (limit, before, after, include, dateCreated, metadata, size, scheduled, sendDate, mailType, sortBy, options = {}) => {
            const localVarPath = `/postcards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            if (limit !== undefined) {
                localVarQueryParameter["limit"] = limit;
            }
            if (before !== undefined) {
                localVarQueryParameter["before"] = before;
            }
            if (after !== undefined) {
                localVarQueryParameter["after"] = after;
            }
            if (include) {
                localVarQueryParameter["include"] = valueToString(include);
            }
            if (dateCreated !== undefined) {
                localVarQueryParameter["date_created"] = valueToString(dateCreated);
            }
            if (metadata !== undefined) {
                localVarQueryParameter["metadata"] = valueToString(metadata);
            }
            if (size) {
                localVarQueryParameter["size"] = valueToString(size);
            }
            if (scheduled !== undefined) {
                localVarQueryParameter["scheduled"] = scheduled;
            }
            if (sendDate !== undefined) {
                localVarQueryParameter["send_date"] = valueToString(sendDate);
            }
            if (mailType !== undefined) {
                localVarQueryParameter["mail_type"] = valueToString(mailType);
            }
            if (sortBy !== undefined) {
                localVarQueryParameter["sort_by"] = valueToString(sortBy);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * PostcardsApi - functional programming interface
 * @export
 */
const PostcardsApiFp = function (configuration) {
    const localVarAxiosParamCreator = PostcardsApiAxiosParamCreator(configuration);
    return {
        /**
         * Creates a new postcard given information
         * @summary create
         * @param {PostcardEditable} postcardEditable
         * @param {string} [idempotencyKey] A string of no longer than 256 characters that uniquely identifies this resource. For more help integrating idempotency keys, refer to our [implementation guide](https://www.lob.com/guides#idempotent_request).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postcardCreate(postcardEditable, idempotencyKey, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postcardCreate(postcardEditable, idempotencyKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Completely removes a postcard from production. This can only be done if the postcard has a `send_date` and the `send_date` has not yet passed. If the postcard is successfully canceled, you will not be charged for it. Read more on [cancellation windows](#section/Cancellation-Windows) and [scheduling](#section/Scheduled-Mailings). Scheduling and cancellation is a premium feature. Upgrade to the appropriate [Print & Mail Edition](https://dashboard.lob.com/#/settings/editions) to gain access.
         * @summary cancel
         * @param {string} pscId id of the postcard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postcardDelete(pscId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postcardDelete(pscId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the details of an existing postcard. You need only supply the unique customer identifier that was returned upon postcard creation.
         * @summary get
         * @param {string} pscId id of the postcard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postcardRetrieve(pscId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postcardRetrieve(pscId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of your postcards. The addresses are returned sorted by creation date, with the most recently created addresses appearing first.
         * @summary list
         * @param {number} [limit] How many results to return.
         * @param {string} [before] A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response.
         * @param {string} [after] A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response.
         * @param {Array<string>} [include] Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;.
         * @param {{ [key: string]: string; }} [dateCreated] Filter by date created.
         * @param {{ [key: string]: string; }} [metadata] Filter by metadata key-value pair&#x60;.
         * @param {Array<PostcardSize>} [size] Specifies the size of the postcard. Only &#x60;4x6&#x60; postcards can be sent to international destinations.
         * @param {boolean} [scheduled] * &#x60;true&#x60; - only return orders (past or future) where &#x60;send_date&#x60; is greater than &#x60;date_created&#x60; * &#x60;false&#x60; - only return orders where &#x60;send_date&#x60; is equal to &#x60;date_created&#x60;
         * @param {{ [key: string]: string; }} [sendDate] Filter by date sent.
         * @param {MailType} [mailType] A string designating the mail postage type: * &#x60;usps_first_class&#x60; - (default) * &#x60;usps_standard&#x60; - a [cheaper option](https://lob.com/pricing/print-mail#compare) which is less predictable and takes longer to deliver. &#x60;usps_standard&#x60; cannot be used with &#x60;4x6&#x60; postcards or for any postcards sent outside of the United States.
         * @param {object} [sortBy] Sorts items by ascending or descending dates. Use either &#x60;date_created&#x60; or &#x60;send_date&#x60;, not both.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postcardsList(limit, before, after, include, dateCreated, metadata, size, scheduled, sendDate, mailType, sortBy, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postcardsList(limit, before, after, include, dateCreated, metadata, size, scheduled, sendDate, mailType, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * PostcardsApi - object-oriented interface
 * @export
 * @class PostcardsApi
 * @extends {BaseAPI}
 */
class PostcardsApi extends BaseAPI {
    /**
     * Creates a new postcard given information
     * @summary create
     * @param {PostcardEditable} postcardEditable
     * @param {string} [idempotencyKey] A string of no longer than 256 characters that uniquely identifies this resource. For more help integrating idempotency keys, refer to our [implementation guide](https://www.lob.com/guides#idempotent_request).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostcardsApi
     */
    create(postcardEditable, idempotencyKey, options) {
        return PostcardsApiFp(this.configuration)
            .postcardCreate(postcardEditable, idempotencyKey, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new Postcard(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
    /**
     * Completely removes a postcard from production. This can only be done if the postcard has a `send_date` and the `send_date` has not yet passed. If the postcard is successfully canceled, you will not be charged for it. Read more on [cancellation windows](#section/Cancellation-Windows) and [scheduling](#section/Scheduled-Mailings). Scheduling and cancellation is a premium feature. Upgrade to the appropriate [Print & Mail Edition](https://dashboard.lob.com/#/settings/editions) to gain access.
     * @summary cancel
     * @param {string} pscId id of the postcard
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostcardsApi
     */
    cancel(pscId, options) {
        return PostcardsApiFp(this.configuration)
            .postcardDelete(pscId, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new PostcardDeletion(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
    /**
     * Retrieves the details of an existing postcard. You need only supply the unique customer identifier that was returned upon postcard creation.
     * @summary get
     * @param {string} pscId id of the postcard
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostcardsApi
     */
    get(pscId, options) {
        return PostcardsApiFp(this.configuration)
            .postcardRetrieve(pscId, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new Postcard(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
    /**
     * Returns a list of your postcards. The addresses are returned sorted by creation date, with the most recently created addresses appearing first.
     * @summary list
     * @param {number} [limit] How many results to return.
     * @param {string} [before] A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response.
     * @param {string} [after] A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response.
     * @param {Array<string>} [include] Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;.
     * @param {{ [key: string]: string; }} [dateCreated] Filter by date created.
     * @param {{ [key: string]: string; }} [metadata] Filter by metadata key-value pair&#x60;.
     * @param {Array<PostcardSize>} [size] Specifies the size of the postcard. Only &#x60;4x6&#x60; postcards can be sent to international destinations.
     * @param {boolean} [scheduled] * &#x60;true&#x60; - only return orders (past or future) where &#x60;send_date&#x60; is greater than &#x60;date_created&#x60; * &#x60;false&#x60; - only return orders where &#x60;send_date&#x60; is equal to &#x60;date_created&#x60;
     * @param {{ [key: string]: string; }} [sendDate] Filter by date sent.
     * @param {MailType} [mailType] A string designating the mail postage type: * &#x60;usps_first_class&#x60; - (default) * &#x60;usps_standard&#x60; - a [cheaper option](https://lob.com/pricing/print-mail#compare) which is less predictable and takes longer to deliver. &#x60;usps_standard&#x60; cannot be used with &#x60;4x6&#x60; postcards or for any postcards sent outside of the United States.
     * @param {object} [sortBy] Sorts items by ascending or descending dates. Use either &#x60;date_created&#x60; or &#x60;send_date&#x60;, not both.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostcardsApi
     */
    list(limit, before, after, include, dateCreated, metadata, size, scheduled, sendDate, mailType, sortBy, options) {
        return PostcardsApiFp(this.configuration)
            .postcardsList(limit, before, after, include, dateCreated, metadata, size, scheduled, sendDate, mailType, sortBy, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new PostcardList(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/**
 * ReverseGeocodeLookupsApi - axios parameter creator
 * @export
 */
const ReverseGeocodeLookupsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Reverse geocode a valid US location with a live API key.
         * @summary lookup
         * @param {Location} location
         * @param {number} [size] Determines the number of locations returned. Possible values are between 1 and 50 and any number higher will be rounded down to 50. Default size is a list of 5 reverse geocoded locations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reverseGeocodeLookup: async (location, size, options = {}) => {
            // verify required parameter 'location' is not null or undefined
            assertParamExists("reverseGeocodeLookup", "location", location);
            const localVarPath = `/us_reverse_geocode_lookups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            if (size !== undefined) {
                localVarQueryParameter["size"] = size;
            }
            localVarHeaderParameter["Content-Type"] = "application/json";
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(location, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ReverseGeocodeLookupsApi - functional programming interface
 * @export
 */
const ReverseGeocodeLookupsApiFp = function (configuration) {
    const localVarAxiosParamCreator = ReverseGeocodeLookupsApiAxiosParamCreator(configuration);
    return {
        /**
         * Reverse geocode a valid US location with a live API key.
         * @summary lookup
         * @param {Location} location
         * @param {number} [size] Determines the number of locations returned. Possible values are between 1 and 50 and any number higher will be rounded down to 50. Default size is a list of 5 reverse geocoded locations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reverseGeocodeLookup(location, size, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reverseGeocodeLookup(location, size, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * ReverseGeocodeLookupsApi - object-oriented interface
 * @export
 * @class ReverseGeocodeLookupsApi
 * @extends {BaseAPI}
 */
class ReverseGeocodeLookupsApi extends BaseAPI {
    /**
     * Reverse geocode a valid US location with a live API key.
     * @summary lookup
     * @param {Location} location
     * @param {number} [size] Determines the number of locations returned. Possible values are between 1 and 50 and any number higher will be rounded down to 50. Default size is a list of 5 reverse geocoded locations.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReverseGeocodeLookupsApi
     */
    lookup(location, size, options) {
        return ReverseGeocodeLookupsApiFp(this.configuration)
            .reverseGeocodeLookup(location, size, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new ReverseGeocode(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/**
 * SelfMailersApi - axios parameter creator
 * @export
 */
const SelfMailersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Creates a new self_mailer given information
         * @summary create
         * @param {SelfMailerEditable} selfMailerEditable
         * @param {string} [idempotencyKey] A string of no longer than 256 characters that uniquely identifies this resource. For more help integrating idempotency keys, refer to our [implementation guide](https://www.lob.com/guides#idempotent_request).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selfMailerCreate: async (selfMailerEditable, idempotencyKey, options = {}) => {
            // verify required parameter 'selfMailerEditable' is not null or undefined
            assertParamExists("selfMailerCreate", "selfMailerEditable", selfMailerEditable);
            const localVarPath = `/self_mailers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            if (idempotencyKey !== undefined && idempotencyKey !== null) {
                localVarHeaderParameter["Idempotency-Key"] = String(idempotencyKey);
            }
            localVarHeaderParameter["Content-Type"] = "application/json";
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(selfMailerEditable, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Completely removes a self mailer from production. This can only be done if the self mailer\'s `send_date` has not yet passed.
         * @summary delete
         * @param {string} sfmId id of the self_mailer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selfMailerDelete: async (sfmId, options = {}) => {
            // verify required parameter 'sfmId' is not null or undefined
            assertParamExists("selfMailerDelete", "sfmId", sfmId);
            const localVarPath = `/self_mailers/{sfm_id}`.replace(`{${"sfm_id"}}`, encodeURIComponent(String(sfmId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "DELETE" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the details of an existing self_mailer. You need only supply the unique self_mailer identifier that was returned upon self_mailer creation.
         * @summary get
         * @param {string} sfmId id of the self_mailer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selfMailerRetrieve: async (sfmId, options = {}) => {
            // verify required parameter 'sfmId' is not null or undefined
            assertParamExists("selfMailerRetrieve", "sfmId", sfmId);
            const localVarPath = `/self_mailers/{sfm_id}`.replace(`{${"sfm_id"}}`, encodeURIComponent(String(sfmId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of your self_mailers. The self_mailers are returned sorted by creation date, with the most recently created self_mailers appearing first.
         * @summary list
         * @param {number} [limit] How many results to return.
         * @param {string} [before] A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response.
         * @param {string} [after] A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response.
         * @param {Array<string>} [include] Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;.
         * @param {{ [key: string]: string; }} [dateCreated] Filter by date created.
         * @param {{ [key: string]: string; }} [metadata] Filter by metadata key-value pair&#x60;.
         * @param {Array<SelfMailerSize>} [size] The self mailer sizes to be returned.
         * @param {boolean} [scheduled] * &#x60;true&#x60; - only return orders (past or future) where &#x60;send_date&#x60; is greater than &#x60;date_created&#x60; * &#x60;false&#x60; - only return orders where &#x60;send_date&#x60; is equal to &#x60;date_created&#x60;
         * @param {{ [key: string]: string; }} [sendDate] Filter by date sent.
         * @param {MailType} [mailType] A string designating the mail postage type: * &#x60;usps_first_class&#x60; - (default) * &#x60;usps_standard&#x60; - a [cheaper option](https://lob.com/pricing/print-mail#compare) which is less predictable and takes longer to deliver. &#x60;usps_standard&#x60; cannot be used with &#x60;4x6&#x60; postcards or for any postcards sent outside of the United States.
         * @param {object} [sortBy] Sorts items by ascending or descending dates. Use either &#x60;date_created&#x60; or &#x60;send_date&#x60;, not both.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selfMailersList: async (limit, before, after, include, dateCreated, metadata, size, scheduled, sendDate, mailType, sortBy, options = {}) => {
            const localVarPath = `/self_mailers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            if (limit !== undefined) {
                localVarQueryParameter["limit"] = limit;
            }
            if (before !== undefined) {
                localVarQueryParameter["before"] = before;
            }
            if (after !== undefined) {
                localVarQueryParameter["after"] = after;
            }
            if (include) {
                localVarQueryParameter["include"] = valueToString(include);
            }
            if (dateCreated !== undefined) {
                localVarQueryParameter["date_created"] = valueToString(dateCreated);
            }
            if (metadata !== undefined) {
                localVarQueryParameter["metadata"] = valueToString(metadata);
            }
            if (size) {
                localVarQueryParameter["size"] = valueToString(size);
            }
            if (scheduled !== undefined) {
                localVarQueryParameter["scheduled"] = scheduled;
            }
            if (sendDate !== undefined) {
                localVarQueryParameter["send_date"] = valueToString(sendDate);
            }
            if (mailType !== undefined) {
                localVarQueryParameter["mail_type"] = valueToString(mailType);
            }
            if (sortBy !== undefined) {
                localVarQueryParameter["sort_by"] = valueToString(sortBy);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * SelfMailersApi - functional programming interface
 * @export
 */
const SelfMailersApiFp = function (configuration) {
    const localVarAxiosParamCreator = SelfMailersApiAxiosParamCreator(configuration);
    return {
        /**
         * Creates a new self_mailer given information
         * @summary create
         * @param {SelfMailerEditable} selfMailerEditable
         * @param {string} [idempotencyKey] A string of no longer than 256 characters that uniquely identifies this resource. For more help integrating idempotency keys, refer to our [implementation guide](https://www.lob.com/guides#idempotent_request).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selfMailerCreate(selfMailerEditable, idempotencyKey, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selfMailerCreate(selfMailerEditable, idempotencyKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Completely removes a self mailer from production. This can only be done if the self mailer\'s `send_date` has not yet passed.
         * @summary delete
         * @param {string} sfmId id of the self_mailer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selfMailerDelete(sfmId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selfMailerDelete(sfmId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the details of an existing self_mailer. You need only supply the unique self_mailer identifier that was returned upon self_mailer creation.
         * @summary get
         * @param {string} sfmId id of the self_mailer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selfMailerRetrieve(sfmId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selfMailerRetrieve(sfmId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of your self_mailers. The self_mailers are returned sorted by creation date, with the most recently created self_mailers appearing first.
         * @summary list
         * @param {number} [limit] How many results to return.
         * @param {string} [before] A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response.
         * @param {string} [after] A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response.
         * @param {Array<string>} [include] Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;.
         * @param {{ [key: string]: string; }} [dateCreated] Filter by date created.
         * @param {{ [key: string]: string; }} [metadata] Filter by metadata key-value pair&#x60;.
         * @param {Array<SelfMailerSize>} [size] The self mailer sizes to be returned.
         * @param {boolean} [scheduled] * &#x60;true&#x60; - only return orders (past or future) where &#x60;send_date&#x60; is greater than &#x60;date_created&#x60; * &#x60;false&#x60; - only return orders where &#x60;send_date&#x60; is equal to &#x60;date_created&#x60;
         * @param {{ [key: string]: string; }} [sendDate] Filter by date sent.
         * @param {MailType} [mailType] A string designating the mail postage type: * &#x60;usps_first_class&#x60; - (default) * &#x60;usps_standard&#x60; - a [cheaper option](https://lob.com/pricing/print-mail#compare) which is less predictable and takes longer to deliver. &#x60;usps_standard&#x60; cannot be used with &#x60;4x6&#x60; postcards or for any postcards sent outside of the United States.
         * @param {object} [sortBy] Sorts items by ascending or descending dates. Use either &#x60;date_created&#x60; or &#x60;send_date&#x60;, not both.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selfMailersList(limit, before, after, include, dateCreated, metadata, size, scheduled, sendDate, mailType, sortBy, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selfMailersList(limit, before, after, include, dateCreated, metadata, size, scheduled, sendDate, mailType, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * SelfMailersApi - object-oriented interface
 * @export
 * @class SelfMailersApi
 * @extends {BaseAPI}
 */
class SelfMailersApi extends BaseAPI {
    /**
     * Creates a new self_mailer given information
     * @summary create
     * @param {SelfMailerEditable} selfMailerEditable
     * @param {string} [idempotencyKey] A string of no longer than 256 characters that uniquely identifies this resource. For more help integrating idempotency keys, refer to our [implementation guide](https://www.lob.com/guides#idempotent_request).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SelfMailersApi
     */
    create(selfMailerEditable, idempotencyKey, options) {
        return SelfMailersApiFp(this.configuration)
            .selfMailerCreate(selfMailerEditable, idempotencyKey, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new SelfMailer(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
    /**
     * Completely removes a self mailer from production. This can only be done if the self mailer\'s `send_date` has not yet passed.
     * @summary delete
     * @param {string} sfmId id of the self_mailer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SelfMailersApi
     */
    delete(sfmId, options) {
        return SelfMailersApiFp(this.configuration)
            .selfMailerDelete(sfmId, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new SelfMailerDeletion(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
    /**
     * Retrieves the details of an existing self_mailer. You need only supply the unique self_mailer identifier that was returned upon self_mailer creation.
     * @summary get
     * @param {string} sfmId id of the self_mailer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SelfMailersApi
     */
    get(sfmId, options) {
        return SelfMailersApiFp(this.configuration)
            .selfMailerRetrieve(sfmId, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new SelfMailer(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
    /**
     * Returns a list of your self_mailers. The self_mailers are returned sorted by creation date, with the most recently created self_mailers appearing first.
     * @summary list
     * @param {number} [limit] How many results to return.
     * @param {string} [before] A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response.
     * @param {string} [after] A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response.
     * @param {Array<string>} [include] Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;.
     * @param {{ [key: string]: string; }} [dateCreated] Filter by date created.
     * @param {{ [key: string]: string; }} [metadata] Filter by metadata key-value pair&#x60;.
     * @param {Array<SelfMailerSize>} [size] The self mailer sizes to be returned.
     * @param {boolean} [scheduled] * &#x60;true&#x60; - only return orders (past or future) where &#x60;send_date&#x60; is greater than &#x60;date_created&#x60; * &#x60;false&#x60; - only return orders where &#x60;send_date&#x60; is equal to &#x60;date_created&#x60;
     * @param {{ [key: string]: string; }} [sendDate] Filter by date sent.
     * @param {MailType} [mailType] A string designating the mail postage type: * &#x60;usps_first_class&#x60; - (default) * &#x60;usps_standard&#x60; - a [cheaper option](https://lob.com/pricing/print-mail#compare) which is less predictable and takes longer to deliver. &#x60;usps_standard&#x60; cannot be used with &#x60;4x6&#x60; postcards or for any postcards sent outside of the United States.
     * @param {object} [sortBy] Sorts items by ascending or descending dates. Use either &#x60;date_created&#x60; or &#x60;send_date&#x60;, not both.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SelfMailersApi
     */
    list(limit, before, after, include, dateCreated, metadata, size, scheduled, sendDate, mailType, sortBy, options) {
        return SelfMailersApiFp(this.configuration)
            .selfMailersList(limit, before, after, include, dateCreated, metadata, size, scheduled, sendDate, mailType, sortBy, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new SelfMailerList(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/**
 * TemplateVersionsApi - axios parameter creator
 * @export
 */
const TemplateVersionsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Creates a new template version attached to the specified template.
         * @summary create
         * @param {string} tmplId The ID of the template the new version will be attached to
         * @param {TemplateVersionWritable} templateVersionWritable
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTemplateVersion: async (tmplId, templateVersionWritable, options = {}) => {
            // verify required parameter 'tmplId' is not null or undefined
            assertParamExists("createTemplateVersion", "tmplId", tmplId);
            // verify required parameter 'templateVersionWritable' is not null or undefined
            assertParamExists("createTemplateVersion", "templateVersionWritable", templateVersionWritable);
            const localVarPath = `/templates/{tmpl_id}/versions`.replace(`{${"tmpl_id"}}`, encodeURIComponent(String(tmplId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            localVarHeaderParameter["Content-Type"] = "application/json";
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(templateVersionWritable, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Permanently deletes a template version. A template\'s `published_version` can not be deleted.
         * @summary delete
         * @param {string} tmplId The ID of the template to which the version belongs.
         * @param {string} vrsnId id of the template_version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateVersionDelete: async (tmplId, vrsnId, options = {}) => {
            // verify required parameter 'tmplId' is not null or undefined
            assertParamExists("templateVersionDelete", "tmplId", tmplId);
            // verify required parameter 'vrsnId' is not null or undefined
            assertParamExists("templateVersionDelete", "vrsnId", vrsnId);
            const localVarPath = `/templates/{tmpl_id}/versions/{vrsn_id}`
                .replace(`{${"tmpl_id"}}`, encodeURIComponent(String(tmplId)))
                .replace(`{${"vrsn_id"}}`, encodeURIComponent(String(vrsnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "DELETE" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the template version with the given template and version ids.
         * @summary get
         * @param {string} tmplId The ID of the template to which the version belongs.
         * @param {string} vrsnId id of the template_version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateVersionRetrieve: async (tmplId, vrsnId, options = {}) => {
            // verify required parameter 'tmplId' is not null or undefined
            assertParamExists("templateVersionRetrieve", "tmplId", tmplId);
            // verify required parameter 'vrsnId' is not null or undefined
            assertParamExists("templateVersionRetrieve", "vrsnId", vrsnId);
            const localVarPath = `/templates/{tmpl_id}/versions/{vrsn_id}`
                .replace(`{${"tmpl_id"}}`, encodeURIComponent(String(tmplId)))
                .replace(`{${"vrsn_id"}}`, encodeURIComponent(String(vrsnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the template version with the given template and version ids.
         * @summary update
         * @param {string} tmplId The ID of the template to which the version belongs.
         * @param {string} vrsnId id of the template_version
         * @param {TemplateVersionUpdatable} templateVersionUpdatable
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateVersionUpdate: async (tmplId, vrsnId, templateVersionUpdatable, options = {}) => {
            // verify required parameter 'tmplId' is not null or undefined
            assertParamExists("templateVersionUpdate", "tmplId", tmplId);
            // verify required parameter 'vrsnId' is not null or undefined
            assertParamExists("templateVersionUpdate", "vrsnId", vrsnId);
            // verify required parameter 'templateVersionUpdatable' is not null or undefined
            assertParamExists("templateVersionUpdate", "templateVersionUpdatable", templateVersionUpdatable);
            const localVarPath = `/templates/{tmpl_id}/versions/{vrsn_id}`
                .replace(`{${"tmpl_id"}}`, encodeURIComponent(String(tmplId)))
                .replace(`{${"vrsn_id"}}`, encodeURIComponent(String(vrsnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            localVarHeaderParameter["Content-Type"] = "application/json";
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(templateVersionUpdatable, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of template versions for the given template ID. The template versions are sorted by creation date, with the most recently created appearing first.
         * @summary list
         * @param {string} tmplId The ID of the template associated with the retrieved versions
         * @param {number} [limit] How many results to return.
         * @param {string} [before] A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response.
         * @param {string} [after] A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response.
         * @param {Array<string>} [include] Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;.
         * @param {{ [key: string]: string; }} [dateCreated] Filter by date created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateVersionsList: async (tmplId, limit, before, after, include, dateCreated, options = {}) => {
            // verify required parameter 'tmplId' is not null or undefined
            assertParamExists("templateVersionsList", "tmplId", tmplId);
            const localVarPath = `/templates/{tmpl_id}/versions`.replace(`{${"tmpl_id"}}`, encodeURIComponent(String(tmplId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            if (limit !== undefined) {
                localVarQueryParameter["limit"] = limit;
            }
            if (before !== undefined) {
                localVarQueryParameter["before"] = before;
            }
            if (after !== undefined) {
                localVarQueryParameter["after"] = after;
            }
            if (include) {
                localVarQueryParameter["include"] = valueToString(include);
            }
            if (dateCreated !== undefined) {
                localVarQueryParameter["date_created"] = valueToString(dateCreated);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * TemplateVersionsApi - functional programming interface
 * @export
 */
const TemplateVersionsApiFp = function (configuration) {
    const localVarAxiosParamCreator = TemplateVersionsApiAxiosParamCreator(configuration);
    return {
        /**
         * Creates a new template version attached to the specified template.
         * @summary create
         * @param {string} tmplId The ID of the template the new version will be attached to
         * @param {TemplateVersionWritable} templateVersionWritable
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTemplateVersion(tmplId, templateVersionWritable, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTemplateVersion(tmplId, templateVersionWritable, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Permanently deletes a template version. A template\'s `published_version` can not be deleted.
         * @summary delete
         * @param {string} tmplId The ID of the template to which the version belongs.
         * @param {string} vrsnId id of the template_version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templateVersionDelete(tmplId, vrsnId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.templateVersionDelete(tmplId, vrsnId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the template version with the given template and version ids.
         * @summary get
         * @param {string} tmplId The ID of the template to which the version belongs.
         * @param {string} vrsnId id of the template_version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templateVersionRetrieve(tmplId, vrsnId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.templateVersionRetrieve(tmplId, vrsnId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the template version with the given template and version ids.
         * @summary update
         * @param {string} tmplId The ID of the template to which the version belongs.
         * @param {string} vrsnId id of the template_version
         * @param {TemplateVersionUpdatable} templateVersionUpdatable
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templateVersionUpdate(tmplId, vrsnId, templateVersionUpdatable, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.templateVersionUpdate(tmplId, vrsnId, templateVersionUpdatable, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of template versions for the given template ID. The template versions are sorted by creation date, with the most recently created appearing first.
         * @summary list
         * @param {string} tmplId The ID of the template associated with the retrieved versions
         * @param {number} [limit] How many results to return.
         * @param {string} [before] A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response.
         * @param {string} [after] A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response.
         * @param {Array<string>} [include] Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;.
         * @param {{ [key: string]: string; }} [dateCreated] Filter by date created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templateVersionsList(tmplId, limit, before, after, include, dateCreated, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.templateVersionsList(tmplId, limit, before, after, include, dateCreated, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * TemplateVersionsApi - object-oriented interface
 * @export
 * @class TemplateVersionsApi
 * @extends {BaseAPI}
 */
class TemplateVersionsApi extends BaseAPI {
    /**
     * Creates a new template version attached to the specified template.
     * @summary create
     * @param {string} tmplId The ID of the template the new version will be attached to
     * @param {TemplateVersionWritable} templateVersionWritable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateVersionsApi
     */
    create(tmplId, templateVersionWritable, options) {
        return TemplateVersionsApiFp(this.configuration)
            .createTemplateVersion(tmplId, templateVersionWritable, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new TemplateVersion(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
    /**
     * Permanently deletes a template version. A template\'s `published_version` can not be deleted.
     * @summary delete
     * @param {string} tmplId The ID of the template to which the version belongs.
     * @param {string} vrsnId id of the template_version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateVersionsApi
     */
    delete(tmplId, vrsnId, options) {
        return TemplateVersionsApiFp(this.configuration)
            .templateVersionDelete(tmplId, vrsnId, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new TemplateVersionDeletion(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
    /**
     * Retrieves the template version with the given template and version ids.
     * @summary get
     * @param {string} tmplId The ID of the template to which the version belongs.
     * @param {string} vrsnId id of the template_version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateVersionsApi
     */
    get(tmplId, vrsnId, options) {
        return TemplateVersionsApiFp(this.configuration)
            .templateVersionRetrieve(tmplId, vrsnId, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new TemplateVersion(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
    /**
     * Updates the template version with the given template and version ids.
     * @summary update
     * @param {string} tmplId The ID of the template to which the version belongs.
     * @param {string} vrsnId id of the template_version
     * @param {TemplateVersionUpdatable} templateVersionUpdatable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateVersionsApi
     */
    update(tmplId, vrsnId, templateVersionUpdatable, options) {
        return TemplateVersionsApiFp(this.configuration)
            .templateVersionUpdate(tmplId, vrsnId, templateVersionUpdatable, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new TemplateVersion(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
    /**
     * Returns a list of template versions for the given template ID. The template versions are sorted by creation date, with the most recently created appearing first.
     * @summary list
     * @param {string} tmplId The ID of the template associated with the retrieved versions
     * @param {number} [limit] How many results to return.
     * @param {string} [before] A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response.
     * @param {string} [after] A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response.
     * @param {Array<string>} [include] Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;.
     * @param {{ [key: string]: string; }} [dateCreated] Filter by date created.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateVersionsApi
     */
    list(tmplId, limit, before, after, include, dateCreated, options) {
        return TemplateVersionsApiFp(this.configuration)
            .templateVersionsList(tmplId, limit, before, after, include, dateCreated, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new TemplateVersionList(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/**
 * TemplatesApi - axios parameter creator
 * @export
 */
const TemplatesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Creates a new template for use with the Print & Mail API. In Live mode, you can only have as many non-deleted templates as allotted in your current [Print & Mail Edition](https://dashboard.lob.com/#/settings/editions). If you attempt to create a template past your limit, you will receive a `403` error. There is no limit in Test mode.
         * @summary create
         * @param {TemplateWritable} templateWritable
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTemplate: async (templateWritable, options = {}) => {
            // verify required parameter 'templateWritable' is not null or undefined
            assertParamExists("createTemplate", "templateWritable", templateWritable);
            const localVarPath = `/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            localVarHeaderParameter["Content-Type"] = "application/json";
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(templateWritable, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Permanently deletes a template.
         * @summary delete
         * @param {string} tmplId id of the template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateDelete: async (tmplId, options = {}) => {
            // verify required parameter 'tmplId' is not null or undefined
            assertParamExists("templateDelete", "tmplId", tmplId);
            const localVarPath = `/templates/{tmpl_id}`.replace(`{${"tmpl_id"}}`, encodeURIComponent(String(tmplId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "DELETE" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the details of an existing template.
         * @summary get
         * @param {string} tmplId id of the template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateRetrieve: async (tmplId, options = {}) => {
            // verify required parameter 'tmplId' is not null or undefined
            assertParamExists("templateRetrieve", "tmplId", tmplId);
            const localVarPath = `/templates/{tmpl_id}`.replace(`{${"tmpl_id"}}`, encodeURIComponent(String(tmplId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the description and/or published version of the template with the given id.
         * @summary update
         * @param {string} tmplId id of the template
         * @param {TemplateUpdate} templateUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateUpdate: async (tmplId, templateUpdate, options = {}) => {
            // verify required parameter 'tmplId' is not null or undefined
            assertParamExists("templateUpdate", "tmplId", tmplId);
            // verify required parameter 'templateUpdate' is not null or undefined
            assertParamExists("templateUpdate", "templateUpdate", templateUpdate);
            const localVarPath = `/templates/{tmpl_id}`.replace(`{${"tmpl_id"}}`, encodeURIComponent(String(tmplId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            localVarHeaderParameter["Content-Type"] = "application/json";
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(templateUpdate, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of your templates. The templates are returned sorted by creation date, with the most recently created templates appearing first.
         * @summary list
         * @param {number} [limit] How many results to return.
         * @param {string} [before] A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response.
         * @param {string} [after] A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response.
         * @param {Array<string>} [include] Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;.
         * @param {{ [key: string]: string; }} [dateCreated] Filter by date created.
         * @param {{ [key: string]: string; }} [metadata] Filter by metadata key-value pair&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesList: async (limit, before, after, include, dateCreated, metadata, options = {}) => {
            const localVarPath = `/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            if (limit !== undefined) {
                localVarQueryParameter["limit"] = limit;
            }
            if (before !== undefined) {
                localVarQueryParameter["before"] = before;
            }
            if (after !== undefined) {
                localVarQueryParameter["after"] = after;
            }
            if (include) {
                localVarQueryParameter["include"] = valueToString(include);
            }
            if (dateCreated !== undefined) {
                localVarQueryParameter["date_created"] = valueToString(dateCreated);
            }
            if (metadata !== undefined) {
                localVarQueryParameter["metadata"] = valueToString(metadata);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * TemplatesApi - functional programming interface
 * @export
 */
const TemplatesApiFp = function (configuration) {
    const localVarAxiosParamCreator = TemplatesApiAxiosParamCreator(configuration);
    return {
        /**
         * Creates a new template for use with the Print & Mail API. In Live mode, you can only have as many non-deleted templates as allotted in your current [Print & Mail Edition](https://dashboard.lob.com/#/settings/editions). If you attempt to create a template past your limit, you will receive a `403` error. There is no limit in Test mode.
         * @summary create
         * @param {TemplateWritable} templateWritable
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTemplate(templateWritable, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTemplate(templateWritable, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Permanently deletes a template.
         * @summary delete
         * @param {string} tmplId id of the template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templateDelete(tmplId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.templateDelete(tmplId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the details of an existing template.
         * @summary get
         * @param {string} tmplId id of the template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templateRetrieve(tmplId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.templateRetrieve(tmplId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the description and/or published version of the template with the given id.
         * @summary update
         * @param {string} tmplId id of the template
         * @param {TemplateUpdate} templateUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templateUpdate(tmplId, templateUpdate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.templateUpdate(tmplId, templateUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of your templates. The templates are returned sorted by creation date, with the most recently created templates appearing first.
         * @summary list
         * @param {number} [limit] How many results to return.
         * @param {string} [before] A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response.
         * @param {string} [after] A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response.
         * @param {Array<string>} [include] Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;.
         * @param {{ [key: string]: string; }} [dateCreated] Filter by date created.
         * @param {{ [key: string]: string; }} [metadata] Filter by metadata key-value pair&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templatesList(limit, before, after, include, dateCreated, metadata, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.templatesList(limit, before, after, include, dateCreated, metadata, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * TemplatesApi - object-oriented interface
 * @export
 * @class TemplatesApi
 * @extends {BaseAPI}
 */
class TemplatesApi extends BaseAPI {
    /**
     * Creates a new template for use with the Print & Mail API. In Live mode, you can only have as many non-deleted templates as allotted in your current [Print & Mail Edition](https://dashboard.lob.com/#/settings/editions). If you attempt to create a template past your limit, you will receive a `403` error. There is no limit in Test mode.
     * @summary create
     * @param {TemplateWritable} templateWritable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApi
     */
    create(templateWritable, options) {
        return TemplatesApiFp(this.configuration)
            .createTemplate(templateWritable, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new Template(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
    /**
     * Permanently deletes a template.
     * @summary delete
     * @param {string} tmplId id of the template
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApi
     */
    delete(tmplId, options) {
        return TemplatesApiFp(this.configuration)
            .templateDelete(tmplId, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new TemplateDeletion(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
    /**
     * Retrieves the details of an existing template.
     * @summary get
     * @param {string} tmplId id of the template
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApi
     */
    get(tmplId, options) {
        return TemplatesApiFp(this.configuration)
            .templateRetrieve(tmplId, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new Template(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
    /**
     * Updates the description and/or published version of the template with the given id.
     * @summary update
     * @param {string} tmplId id of the template
     * @param {TemplateUpdate} templateUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApi
     */
    update(tmplId, templateUpdate, options) {
        return TemplatesApiFp(this.configuration)
            .templateUpdate(tmplId, templateUpdate, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new Template(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
    /**
     * Returns a list of your templates. The templates are returned sorted by creation date, with the most recently created templates appearing first.
     * @summary list
     * @param {number} [limit] How many results to return.
     * @param {string} [before] A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response.
     * @param {string} [after] A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response.
     * @param {Array<string>} [include] Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;.
     * @param {{ [key: string]: string; }} [dateCreated] Filter by date created.
     * @param {{ [key: string]: string; }} [metadata] Filter by metadata key-value pair&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApi
     */
    list(limit, before, after, include, dateCreated, metadata, options) {
        return TemplatesApiFp(this.configuration)
            .templatesList(limit, before, after, include, dateCreated, metadata, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new TemplateList(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/**
 * UsAutocompletionsApi - axios parameter creator
 * @export
 */
const UsAutocompletionsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Given an address prefix consisting of a partial primary line, as well as optional input of city, state, and zip code, this functionality returns up to 10 full US address suggestions. Not all of them will turn out to be valid addresses; they\'ll need to be [verified](#operation/verification_us).
         * @summary autocomplete
         * @param {UsAutocompletionsWritable} usAutocompletionsWritable
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usAutocompletion: async (usAutocompletionsWritable, options = {}) => {
            // verify required parameter 'usAutocompletionsWritable' is not null or undefined
            assertParamExists("usAutocompletion", "usAutocompletionsWritable", usAutocompletionsWritable);
            const localVarPath = `/us_autocompletions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            localVarHeaderParameter["Content-Type"] = "application/json";
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(usAutocompletionsWritable, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * UsAutocompletionsApi - functional programming interface
 * @export
 */
const UsAutocompletionsApiFp = function (configuration) {
    const localVarAxiosParamCreator = UsAutocompletionsApiAxiosParamCreator(configuration);
    return {
        /**
         * Given an address prefix consisting of a partial primary line, as well as optional input of city, state, and zip code, this functionality returns up to 10 full US address suggestions. Not all of them will turn out to be valid addresses; they\'ll need to be [verified](#operation/verification_us).
         * @summary autocomplete
         * @param {UsAutocompletionsWritable} usAutocompletionsWritable
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usAutocompletion(usAutocompletionsWritable, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usAutocompletion(usAutocompletionsWritable, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * UsAutocompletionsApi - object-oriented interface
 * @export
 * @class UsAutocompletionsApi
 * @extends {BaseAPI}
 */
class UsAutocompletionsApi extends BaseAPI {
    /**
     * Given an address prefix consisting of a partial primary line, as well as optional input of city, state, and zip code, this functionality returns up to 10 full US address suggestions. Not all of them will turn out to be valid addresses; they\'ll need to be [verified](#operation/verification_us).
     * @summary autocomplete
     * @param {UsAutocompletionsWritable} usAutocompletionsWritable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsAutocompletionsApi
     */
    autocomplete(usAutocompletionsWritable, options) {
        return UsAutocompletionsApiFp(this.configuration)
            .usAutocompletion(usAutocompletionsWritable, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new UsAutocompletions(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/**
 * UsVerificationsApi - axios parameter creator
 * @export
 */
const UsVerificationsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Verify a list of US or US territory addresses with a live API key.
         * @summary verifyBulk
         * @param {MultipleComponentsList} multipleComponentsList
         * @param {'upper' | 'proper'} [_case] Casing of the verified address. Possible values are &#x60;upper&#x60; and &#x60;proper&#x60; for uppercased (e.g. \&quot;PO BOX\&quot;) and proper-cased (e.g. \&quot;PO Box\&quot;), respectively.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkUsVerifications: async (multipleComponentsList, _case, options = {}) => {
            // verify required parameter 'multipleComponentsList' is not null or undefined
            assertParamExists("bulkUsVerifications", "multipleComponentsList", multipleComponentsList);
            const localVarPath = `/bulk/us_verifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            if (_case !== undefined) {
                localVarQueryParameter["case"] = _case;
            }
            localVarHeaderParameter["Content-Type"] = "application/json";
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(multipleComponentsList, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verify a US or US territory address with a live API key.
         * @summary verifySingle
         * @param {UsVerificationsWritable} usVerificationsWritable
         * @param {'upper' | 'proper'} [_case] Casing of the verified address. Possible values are &#x60;upper&#x60; and &#x60;proper&#x60; for uppercased (e.g. \&quot;PO BOX\&quot;) and proper-cased (e.g. \&quot;PO Box\&quot;), respectively.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usVerification: async (usVerificationsWritable, _case, options = {}) => {
            // verify required parameter 'usVerificationsWritable' is not null or undefined
            assertParamExists("usVerification", "usVerificationsWritable", usVerificationsWritable);
            const localVarPath = `/us_verifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            if (_case !== undefined) {
                localVarQueryParameter["case"] = _case;
            }
            localVarHeaderParameter["Content-Type"] = "application/json";
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(usVerificationsWritable, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * UsVerificationsApi - functional programming interface
 * @export
 */
const UsVerificationsApiFp = function (configuration) {
    const localVarAxiosParamCreator = UsVerificationsApiAxiosParamCreator(configuration);
    return {
        /**
         * Verify a list of US or US territory addresses with a live API key.
         * @summary verifyBulk
         * @param {MultipleComponentsList} multipleComponentsList
         * @param {'upper' | 'proper'} [_case] Casing of the verified address. Possible values are &#x60;upper&#x60; and &#x60;proper&#x60; for uppercased (e.g. \&quot;PO BOX\&quot;) and proper-cased (e.g. \&quot;PO Box\&quot;), respectively.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkUsVerifications(multipleComponentsList, _case, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkUsVerifications(multipleComponentsList, _case, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Verify a US or US territory address with a live API key.
         * @summary verifySingle
         * @param {UsVerificationsWritable} usVerificationsWritable
         * @param {'upper' | 'proper'} [_case] Casing of the verified address. Possible values are &#x60;upper&#x60; and &#x60;proper&#x60; for uppercased (e.g. \&quot;PO BOX\&quot;) and proper-cased (e.g. \&quot;PO Box\&quot;), respectively.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usVerification(usVerificationsWritable, _case, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usVerification(usVerificationsWritable, _case, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * UsVerificationsApi - object-oriented interface
 * @export
 * @class UsVerificationsApi
 * @extends {BaseAPI}
 */
class UsVerificationsApi extends BaseAPI {
    /**
     * Verify a list of US or US territory addresses with a live API key.
     * @summary verifyBulk
     * @param {MultipleComponentsList} multipleComponentsList
     * @param {'upper' | 'proper'} [_case] Casing of the verified address. Possible values are &#x60;upper&#x60; and &#x60;proper&#x60; for uppercased (e.g. \&quot;PO BOX\&quot;) and proper-cased (e.g. \&quot;PO Box\&quot;), respectively.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsVerificationsApi
     */
    verifyBulk(multipleComponentsList, _case, options) {
        return UsVerificationsApiFp(this.configuration)
            .bulkUsVerifications(multipleComponentsList, _case, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new UsVerifications(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
    /**
     * Verify a US or US territory address with a live API key.
     * @summary verifySingle
     * @param {UsVerificationsWritable} usVerificationsWritable
     * @param {'upper' | 'proper'} [_case] Casing of the verified address. Possible values are &#x60;upper&#x60; and &#x60;proper&#x60; for uppercased (e.g. \&quot;PO BOX\&quot;) and proper-cased (e.g. \&quot;PO Box\&quot;), respectively.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsVerificationsApi
     */
    verifySingle(usVerificationsWritable, _case, options) {
        return UsVerificationsApiFp(this.configuration)
            .usVerification(usVerificationsWritable, _case, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new UsVerification(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/**
 * ZipLookupsApi - axios parameter creator
 * @export
 */
const ZipLookupsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Returns information about a ZIP code
         * @summary lookup
         * @param {ZipEditable} zipEditable
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zipLookup: async (zipEditable, options = {}) => {
            // verify required parameter 'zipEditable' is not null or undefined
            assertParamExists("zipLookup", "zipEditable", zipEditable);
            const localVarPath = `/us_zip_lookups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            localVarHeaderParameter["Content-Type"] = "application/json";
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(zipEditable, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ZipLookupsApi - functional programming interface
 * @export
 */
const ZipLookupsApiFp = function (configuration) {
    const localVarAxiosParamCreator = ZipLookupsApiAxiosParamCreator(configuration);
    return {
        /**
         * Returns information about a ZIP code
         * @summary lookup
         * @param {ZipEditable} zipEditable
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zipLookup(zipEditable, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.zipLookup(zipEditable, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * ZipLookupsApi - object-oriented interface
 * @export
 * @class ZipLookupsApi
 * @extends {BaseAPI}
 */
class ZipLookupsApi extends BaseAPI {
    /**
     * Returns information about a ZIP code
     * @summary lookup
     * @param {ZipEditable} zipEditable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZipLookupsApi
     */
    lookup(zipEditable, options) {
        return ZipLookupsApiFp(this.configuration)
            .zipLookup(zipEditable, options)
            .then((request) => request(this.axios, this.basePath))
            .then(function (response) {
            return new Zip(response.data);
        })
            .catch((error) => {
            var _a, _b, _c;
            if ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) {
                error.message = error.response.data.error.message;
            }
            throw error;
        });
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
class Configuration {
    constructor(param = {}) {
        this.apiKey = param.apiKey;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.baseOptions = param.baseOptions;
        this.formDataCtor = param.formDataCtor;
    }
    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    isJsonMime(mime) {
        const jsonMime = new RegExp("^(application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(;.*)?$", "i");
        return (mime !== null &&
            (jsonMime.test(mime) ||
                mime.toLowerCase() === "application/json-patch+json"));
    }
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

export { Address, AddressDeletion, AddressDeletionObjectEnum, AddressDomestic, AddressDomesticExpanded, AddressEditable, AddressList, AddressObjectEnum, AddressesApi, AddressesApiAxiosParamCreator, AddressesApiFp, BankAccount, BankAccountAccountTypeEnum, BankAccountDeletion, BankAccountDeletionObjectEnum, BankAccountList, BankAccountObjectEnum, BankAccountVerify, BankAccountWritable, BankAccountsApi, BankAccountsApiAxiosParamCreator, BankAccountsApiFp, BankTypeEnum, BillingGroup, BillingGroupEditable, BillingGroupList, BillingGroupObjectEnum, BillingGroupsApi, BillingGroupsApiAxiosParamCreator, BillingGroupsApiFp, Buckslip, BuckslipDeletion, BuckslipEditable, BuckslipEditableSizeEnum, BuckslipFinishEnum, BuckslipObjectEnum, BuckslipOrder, BuckslipOrderEditable, BuckslipOrderStatusEnum, BuckslipOrdersList, BuckslipSizeEnum, BuckslipStatusEnum, BuckslipStockEnum, BuckslipUpdatable, BuckslipWeightEnum, BuckslipsList, BulkError, BulkErrorProperties, BulkErrorPropertiesStatusCodeEnum, Campaign, CampaignCreative, CampaignCreativeObjectEnum, CampaignCreativeResourceTypeEnum, CampaignDeletion, CampaignObjectEnum, CampaignUpdatable, CampaignWritable, CampaignsList, Card, CardDeletion, CardDeletionObjectEnum, CardEditable, CardEditableSizeEnum, CardList, CardObjectEnum, CardOrder, CardOrderEditable, CardOrderList, CardOrderStatusEnum, CardOrdersApi, CardOrdersApiAxiosParamCreator, CardOrdersApiFp, CardOrientationEnum, CardSizeEnum, CardStatusEnum, CardUpdatable, CardsApi, CardsApiAxiosParamCreator, CardsApiFp, Check, CheckCarrierEnum, CheckDeletion, CheckDeletionObjectEnum, CheckEditable, CheckEditableMailTypeEnum, CheckList, CheckMailTypeEnum, CheckObjectEnum, ChecksApi, ChecksApiAxiosParamCreator, ChecksApiFp, ChkUseType, CmpScheduleType, CmpUseType, Configuration, CountryExtended, CountryExtendedExpanded, CreativePatch, CreativeResponse, CreativeResponseObjectEnum, CreativeResponseResourceTypeEnum, CreativeWritable, CreativeWritableResourceTypeEnum, CustomEnvelopeReturned, CustomEnvelopeReturnedObjectEnum, DeliverabilityAnalysis, DeliverabilityAnalysisDpvActiveEnum, DeliverabilityAnalysisDpvCmraEnum, DeliverabilityAnalysisDpvConfirmationEnum, DeliverabilityAnalysisDpvVacantEnum, DeliverabilityAnalysisLacsIndicatorEnum, DeliverabilityAnalysisSuiteReturnCodeEnum, DpvFootnote, EngineHtml, EventType, EventTypeObjectEnum, EventTypeResourceEnum, Events, EventsObjectEnum, Export, ExportModel, ExportModelTypeEnum, ExportStateEnum, ExportTypeEnum, GeocodeAddresses, GeocodeComponents, HTTPValidationError, IdentityValidation, IdentityValidationConfidenceEnum, IdentityValidationObjectEnum, InlineObject, IntlAutocompletions, IntlAutocompletionsApi, IntlAutocompletionsApiAxiosParamCreator, IntlAutocompletionsApiFp, IntlAutocompletionsWritable, IntlComponents, IntlSuggestions, IntlSuggestionsObjectEnum, IntlVerification, IntlVerificationCoverageEnum, IntlVerificationDeliverabilityEnum, IntlVerificationObjectEnum, IntlVerificationOrError, IntlVerificationOrErrorCoverageEnum, IntlVerificationOrErrorDeliverabilityEnum, IntlVerificationOrErrorObjectEnum, IntlVerificationOrErrorStatusEnum, IntlVerificationStatusEnum, IntlVerificationWritable, IntlVerifications, IntlVerificationsApi, IntlVerificationsApiAxiosParamCreator, IntlVerificationsApiFp, IntlVerificationsPayload, Letter, LetterAddressPlacementEnum, LetterCarrierEnum, LetterCustomEnvelope, LetterCustomEnvelopeObjectEnum, LetterDeletion, LetterDeletionObjectEnum, LetterDetailsReturned, LetterDetailsReturnedAddressPlacementEnum, LetterDetailsWritable, LetterDetailsWritableAddressPlacementEnum, LetterEditable, LetterEditableAddressPlacementEnum, LetterEditableExtraServiceEnum, LetterList, LetterObjectEnum, LettersApi, LettersApiAxiosParamCreator, LettersApiFp, LobConfidenceScore, LobConfidenceScoreLevelEnum, LobError, LobErrorCodeEnum, LobErrorStatusCodeEnum, Location, LocationAnalysis, LtrUseType, MailType, MultiLineAddress, MultipleComponents, MultipleComponentsIntl, MultipleComponentsList, OptionalAddressColumnMapping, PlaceholderModel, Postcard, PostcardCarrierEnum, PostcardDeletion, PostcardDeletionObjectEnum, PostcardDetailsReturned, PostcardDetailsWritable, PostcardEditable, PostcardList, PostcardObjectEnum, PostcardSize, PostcardsApi, PostcardsApiAxiosParamCreator, PostcardsApiFp, PscUseType, QrCode, QrCodePositionEnum, RequiredAddressColumnMapping, ReturnEnvelope, ReverseGeocode, ReverseGeocodeLookupsApi, ReverseGeocodeLookupsApiAxiosParamCreator, ReverseGeocodeLookupsApiFp, ReverseGeocodeObjectEnum, SelfMailer, SelfMailerDeletion, SelfMailerDeletionObjectEnum, SelfMailerEditable, SelfMailerList, SelfMailerObjectEnum, SelfMailerSize, SelfMailersApi, SelfMailersApiAxiosParamCreator, SelfMailersApiFp, SfmUseType, SortBy, SortBy1, SortBy1DateCreatedEnum, SortBy1SendDateEnum, SortBy2, SortBy2DateCreatedEnum, SortBy2SendDateEnum, SortBy3, SortBy3DateCreatedEnum, SortBy3SendDateEnum, SortByDateCreatedEnum, SortByDateModified, SortByDateModifiedDateCreatedEnum, SortByDateModifiedDateModifiedEnum, SortBySendDateEnum, Suggestions, SuggestionsObjectEnum, Template, TemplateDeletion, TemplateDeletionObjectEnum, TemplateList, TemplateObjectEnum, TemplateUpdate, TemplateVersion, TemplateVersionDeletion, TemplateVersionDeletionObjectEnum, TemplateVersionList, TemplateVersionObjectEnum, TemplateVersionUpdatable, TemplateVersionWritable, TemplateVersionsApi, TemplateVersionsApiAxiosParamCreator, TemplateVersionsApiFp, TemplateWritable, TemplatesApi, TemplatesApiAxiosParamCreator, TemplatesApiFp, Thumbnail, TrackingEventCertified, TrackingEventCertifiedNameEnum, TrackingEventCertifiedObjectEnum, TrackingEventCertifiedTypeEnum, TrackingEventDetails, TrackingEventDetailsEventEnum, TrackingEventNormal, TrackingEventNormalDetailsEnum, TrackingEventNormalNameEnum, TrackingEventNormalObjectEnum, TrackingEventNormalTypeEnum, Upload, UploadCreateExport, UploadCreateExportMessageEnum, UploadFile, UploadFileMessageEnum, UploadModeEnum, UploadState, UploadUpdatable, UploadWritable, UploadsMetadata, UsAutocompletions, UsAutocompletionsApi, UsAutocompletionsApiAxiosParamCreator, UsAutocompletionsApiFp, UsAutocompletionsObjectEnum, UsAutocompletionsWritable, UsComponents, UsComponentsAddressTypeEnum, UsComponentsCarrierRouteTypeEnum, UsComponentsRecordTypeEnum, UsComponentsStreetPostdirectionEnum, UsComponentsStreetPredirectionEnum, UsVerification, UsVerificationDeliverabilityEnum, UsVerificationObjectEnum, UsVerificationOrError, UsVerificationOrErrorDeliverabilityEnum, UsVerificationOrErrorObjectEnum, UsVerificationValidAddressEnum, UsVerifications, UsVerificationsApi, UsVerificationsApiAxiosParamCreator, UsVerificationsApiFp, UsVerificationsWritable, ValidationError, Zip, ZipCodeType, ZipEditable, ZipLookupCity, ZipLookupsApi, ZipLookupsApiAxiosParamCreator, ZipLookupsApiFp, ZipObjectEnum };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgubWpzIiwic291cmNlcyI6WyIuLi8uLi9iYXNlLnRzIiwiLi4vLi4vY29tbW9uLnRzIiwiLi4vLi4vbW9kZWxzL2FkZHJlc3MudHMiLCIuLi8uLi9tb2RlbHMvYWRkcmVzcy1kZWxldGlvbi50cyIsIi4uLy4uL21vZGVscy9hZGRyZXNzLWRvbWVzdGljLnRzIiwiLi4vLi4vbW9kZWxzL2FkZHJlc3MtZG9tZXN0aWMtZXhwYW5kZWQudHMiLCIuLi8uLi9tb2RlbHMvYWRkcmVzcy1lZGl0YWJsZS50cyIsIi4uLy4uL21vZGVscy9hZGRyZXNzLWxpc3QudHMiLCIuLi8uLi9tb2RlbHMvYmFuay1hY2NvdW50LnRzIiwiLi4vLi4vbW9kZWxzL2JhbmstYWNjb3VudC1kZWxldGlvbi50cyIsIi4uLy4uL21vZGVscy9iYW5rLWFjY291bnQtbGlzdC50cyIsIi4uLy4uL21vZGVscy9iYW5rLWFjY291bnQtdmVyaWZ5LnRzIiwiLi4vLi4vbW9kZWxzL2JhbmstYWNjb3VudC13cml0YWJsZS50cyIsIi4uLy4uL21vZGVscy9iYW5rLXR5cGUtZW51bS50cyIsIi4uLy4uL21vZGVscy9iaWxsaW5nLWdyb3VwLnRzIiwiLi4vLi4vbW9kZWxzL2JpbGxpbmctZ3JvdXAtZWRpdGFibGUudHMiLCIuLi8uLi9tb2RlbHMvYmlsbGluZy1ncm91cC1saXN0LnRzIiwiLi4vLi4vbW9kZWxzL2J1Y2tzbGlwLnRzIiwiLi4vLi4vbW9kZWxzL2J1Y2tzbGlwLWRlbGV0aW9uLnRzIiwiLi4vLi4vbW9kZWxzL2J1Y2tzbGlwLWVkaXRhYmxlLnRzIiwiLi4vLi4vbW9kZWxzL2J1Y2tzbGlwLW9yZGVyLnRzIiwiLi4vLi4vbW9kZWxzL2J1Y2tzbGlwLW9yZGVyLWVkaXRhYmxlLnRzIiwiLi4vLi4vbW9kZWxzL2J1Y2tzbGlwLW9yZGVycy1saXN0LnRzIiwiLi4vLi4vbW9kZWxzL2J1Y2tzbGlwLXVwZGF0YWJsZS50cyIsIi4uLy4uL21vZGVscy9idWNrc2xpcHMtbGlzdC50cyIsIi4uLy4uL21vZGVscy9idWxrLWVycm9yLnRzIiwiLi4vLi4vbW9kZWxzL2J1bGstZXJyb3ItcHJvcGVydGllcy50cyIsIi4uLy4uL21vZGVscy9jYW1wYWlnbi50cyIsIi4uLy4uL21vZGVscy9jYW1wYWlnbi1jcmVhdGl2ZS50cyIsIi4uLy4uL21vZGVscy9jYW1wYWlnbi1kZWxldGlvbi50cyIsIi4uLy4uL21vZGVscy9jYW1wYWlnbi11cGRhdGFibGUudHMiLCIuLi8uLi9tb2RlbHMvY2FtcGFpZ24td3JpdGFibGUudHMiLCIuLi8uLi9tb2RlbHMvY2FtcGFpZ25zLWxpc3QudHMiLCIuLi8uLi9tb2RlbHMvY2FyZC50cyIsIi4uLy4uL21vZGVscy9jYXJkLWRlbGV0aW9uLnRzIiwiLi4vLi4vbW9kZWxzL2NhcmQtZWRpdGFibGUudHMiLCIuLi8uLi9tb2RlbHMvY2FyZC1saXN0LnRzIiwiLi4vLi4vbW9kZWxzL2NhcmQtb3JkZXIudHMiLCIuLi8uLi9tb2RlbHMvY2FyZC1vcmRlci1lZGl0YWJsZS50cyIsIi4uLy4uL21vZGVscy9jYXJkLW9yZGVyLWxpc3QudHMiLCIuLi8uLi9tb2RlbHMvY2FyZC11cGRhdGFibGUudHMiLCIuLi8uLi9tb2RlbHMvY2hlY2sudHMiLCIuLi8uLi9tb2RlbHMvY2hlY2stZGVsZXRpb24udHMiLCIuLi8uLi9tb2RlbHMvY2hlY2stZWRpdGFibGUudHMiLCIuLi8uLi9tb2RlbHMvY2hlY2stbGlzdC50cyIsIi4uLy4uL21vZGVscy9jaGstdXNlLXR5cGUudHMiLCIuLi8uLi9tb2RlbHMvY21wLXNjaGVkdWxlLXR5cGUudHMiLCIuLi8uLi9tb2RlbHMvY21wLXVzZS10eXBlLnRzIiwiLi4vLi4vbW9kZWxzL2NvdW50cnktZXh0ZW5kZWQudHMiLCIuLi8uLi9tb2RlbHMvY291bnRyeS1leHRlbmRlZC1leHBhbmRlZC50cyIsIi4uLy4uL21vZGVscy9jcmVhdGl2ZS1wYXRjaC50cyIsIi4uLy4uL21vZGVscy9jcmVhdGl2ZS1yZXNwb25zZS50cyIsIi4uLy4uL21vZGVscy9jcmVhdGl2ZS13cml0YWJsZS50cyIsIi4uLy4uL21vZGVscy9jdXN0b20tZW52ZWxvcGUtcmV0dXJuZWQudHMiLCIuLi8uLi9tb2RlbHMvZGVsaXZlcmFiaWxpdHktYW5hbHlzaXMudHMiLCIuLi8uLi9tb2RlbHMvZHB2LWZvb3Rub3RlLnRzIiwiLi4vLi4vbW9kZWxzL2VuZ2luZS1odG1sLnRzIiwiLi4vLi4vbW9kZWxzL2V2ZW50LXR5cGUudHMiLCIuLi8uLi9tb2RlbHMvZXZlbnRzLnRzIiwiLi4vLi4vbW9kZWxzL2V4cG9ydC50cyIsIi4uLy4uL21vZGVscy9leHBvcnQtbW9kZWwudHMiLCIuLi8uLi9tb2RlbHMvZ2VvY29kZS1hZGRyZXNzZXMudHMiLCIuLi8uLi9tb2RlbHMvZ2VvY29kZS1jb21wb25lbnRzLnRzIiwiLi4vLi4vbW9kZWxzL2h0dHB2YWxpZGF0aW9uLWVycm9yLnRzIiwiLi4vLi4vbW9kZWxzL2lkZW50aXR5LXZhbGlkYXRpb24udHMiLCIuLi8uLi9tb2RlbHMvaW5saW5lLW9iamVjdC50cyIsIi4uLy4uL21vZGVscy9pbnRsLWF1dG9jb21wbGV0aW9ucy50cyIsIi4uLy4uL21vZGVscy9pbnRsLWF1dG9jb21wbGV0aW9ucy13cml0YWJsZS50cyIsIi4uLy4uL21vZGVscy9pbnRsLWNvbXBvbmVudHMudHMiLCIuLi8uLi9tb2RlbHMvaW50bC1zdWdnZXN0aW9ucy50cyIsIi4uLy4uL21vZGVscy9pbnRsLXZlcmlmaWNhdGlvbi50cyIsIi4uLy4uL21vZGVscy9pbnRsLXZlcmlmaWNhdGlvbi1vci1lcnJvci50cyIsIi4uLy4uL21vZGVscy9pbnRsLXZlcmlmaWNhdGlvbi13cml0YWJsZS50cyIsIi4uLy4uL21vZGVscy9pbnRsLXZlcmlmaWNhdGlvbnMudHMiLCIuLi8uLi9tb2RlbHMvaW50bC12ZXJpZmljYXRpb25zLXBheWxvYWQudHMiLCIuLi8uLi9tb2RlbHMvbGV0dGVyLnRzIiwiLi4vLi4vbW9kZWxzL2xldHRlci1jdXN0b20tZW52ZWxvcGUudHMiLCIuLi8uLi9tb2RlbHMvbGV0dGVyLWRlbGV0aW9uLnRzIiwiLi4vLi4vbW9kZWxzL2xldHRlci1kZXRhaWxzLXJldHVybmVkLnRzIiwiLi4vLi4vbW9kZWxzL2xldHRlci1kZXRhaWxzLXdyaXRhYmxlLnRzIiwiLi4vLi4vbW9kZWxzL2xldHRlci1lZGl0YWJsZS50cyIsIi4uLy4uL21vZGVscy9sZXR0ZXItbGlzdC50cyIsIi4uLy4uL21vZGVscy9sb2ItY29uZmlkZW5jZS1zY29yZS50cyIsIi4uLy4uL21vZGVscy9sb2ItZXJyb3IudHMiLCIuLi8uLi9tb2RlbHMvbG9jYXRpb24udHMiLCIuLi8uLi9tb2RlbHMvbG9jYXRpb24tYW5hbHlzaXMudHMiLCIuLi8uLi9tb2RlbHMvbHRyLXVzZS10eXBlLnRzIiwiLi4vLi4vbW9kZWxzL21haWwtdHlwZS50cyIsIi4uLy4uL21vZGVscy9tdWx0aS1saW5lLWFkZHJlc3MudHMiLCIuLi8uLi9tb2RlbHMvbXVsdGlwbGUtY29tcG9uZW50cy50cyIsIi4uLy4uL21vZGVscy9tdWx0aXBsZS1jb21wb25lbnRzLWludGwudHMiLCIuLi8uLi9tb2RlbHMvbXVsdGlwbGUtY29tcG9uZW50cy1saXN0LnRzIiwiLi4vLi4vbW9kZWxzL29wdGlvbmFsLWFkZHJlc3MtY29sdW1uLW1hcHBpbmcudHMiLCIuLi8uLi9tb2RlbHMvcGxhY2Vob2xkZXItbW9kZWwudHMiLCIuLi8uLi9tb2RlbHMvcG9zdGNhcmQudHMiLCIuLi8uLi9tb2RlbHMvcG9zdGNhcmQtZGVsZXRpb24udHMiLCIuLi8uLi9tb2RlbHMvcG9zdGNhcmQtZGV0YWlscy1yZXR1cm5lZC50cyIsIi4uLy4uL21vZGVscy9wb3N0Y2FyZC1kZXRhaWxzLXdyaXRhYmxlLnRzIiwiLi4vLi4vbW9kZWxzL3Bvc3RjYXJkLWVkaXRhYmxlLnRzIiwiLi4vLi4vbW9kZWxzL3Bvc3RjYXJkLWxpc3QudHMiLCIuLi8uLi9tb2RlbHMvcG9zdGNhcmQtc2l6ZS50cyIsIi4uLy4uL21vZGVscy9wc2MtdXNlLXR5cGUudHMiLCIuLi8uLi9tb2RlbHMvcXItY29kZS50cyIsIi4uLy4uL21vZGVscy9yZXF1aXJlZC1hZGRyZXNzLWNvbHVtbi1tYXBwaW5nLnRzIiwiLi4vLi4vbW9kZWxzL3JldHVybi1lbnZlbG9wZS50cyIsIi4uLy4uL21vZGVscy9yZXZlcnNlLWdlb2NvZGUudHMiLCIuLi8uLi9tb2RlbHMvc2VsZi1tYWlsZXIudHMiLCIuLi8uLi9tb2RlbHMvc2VsZi1tYWlsZXItZGVsZXRpb24udHMiLCIuLi8uLi9tb2RlbHMvc2VsZi1tYWlsZXItZWRpdGFibGUudHMiLCIuLi8uLi9tb2RlbHMvc2VsZi1tYWlsZXItbGlzdC50cyIsIi4uLy4uL21vZGVscy9zZWxmLW1haWxlci1zaXplLnRzIiwiLi4vLi4vbW9kZWxzL3NmbS11c2UtdHlwZS50cyIsIi4uLy4uL21vZGVscy9zb3J0LWJ5LnRzIiwiLi4vLi4vbW9kZWxzL3NvcnQtYnkxLnRzIiwiLi4vLi4vbW9kZWxzL3NvcnQtYnkyLnRzIiwiLi4vLi4vbW9kZWxzL3NvcnQtYnkzLnRzIiwiLi4vLi4vbW9kZWxzL3NvcnQtYnktZGF0ZS1tb2RpZmllZC50cyIsIi4uLy4uL21vZGVscy9zdWdnZXN0aW9ucy50cyIsIi4uLy4uL21vZGVscy90ZW1wbGF0ZS50cyIsIi4uLy4uL21vZGVscy90ZW1wbGF0ZS1kZWxldGlvbi50cyIsIi4uLy4uL21vZGVscy90ZW1wbGF0ZS1saXN0LnRzIiwiLi4vLi4vbW9kZWxzL3RlbXBsYXRlLXVwZGF0ZS50cyIsIi4uLy4uL21vZGVscy90ZW1wbGF0ZS12ZXJzaW9uLnRzIiwiLi4vLi4vbW9kZWxzL3RlbXBsYXRlLXZlcnNpb24tZGVsZXRpb24udHMiLCIuLi8uLi9tb2RlbHMvdGVtcGxhdGUtdmVyc2lvbi1saXN0LnRzIiwiLi4vLi4vbW9kZWxzL3RlbXBsYXRlLXZlcnNpb24tdXBkYXRhYmxlLnRzIiwiLi4vLi4vbW9kZWxzL3RlbXBsYXRlLXZlcnNpb24td3JpdGFibGUudHMiLCIuLi8uLi9tb2RlbHMvdGVtcGxhdGUtd3JpdGFibGUudHMiLCIuLi8uLi9tb2RlbHMvdGh1bWJuYWlsLnRzIiwiLi4vLi4vbW9kZWxzL3RyYWNraW5nLWV2ZW50LWNlcnRpZmllZC50cyIsIi4uLy4uL21vZGVscy90cmFja2luZy1ldmVudC1kZXRhaWxzLnRzIiwiLi4vLi4vbW9kZWxzL3RyYWNraW5nLWV2ZW50LW5vcm1hbC50cyIsIi4uLy4uL21vZGVscy91cGxvYWQudHMiLCIuLi8uLi9tb2RlbHMvdXBsb2FkLWNyZWF0ZS1leHBvcnQudHMiLCIuLi8uLi9tb2RlbHMvdXBsb2FkLWZpbGUudHMiLCIuLi8uLi9tb2RlbHMvdXBsb2FkLXN0YXRlLnRzIiwiLi4vLi4vbW9kZWxzL3VwbG9hZC11cGRhdGFibGUudHMiLCIuLi8uLi9tb2RlbHMvdXBsb2FkLXdyaXRhYmxlLnRzIiwiLi4vLi4vbW9kZWxzL3VwbG9hZHMtbWV0YWRhdGEudHMiLCIuLi8uLi9tb2RlbHMvdXMtYXV0b2NvbXBsZXRpb25zLnRzIiwiLi4vLi4vbW9kZWxzL3VzLWF1dG9jb21wbGV0aW9ucy13cml0YWJsZS50cyIsIi4uLy4uL21vZGVscy91cy1jb21wb25lbnRzLnRzIiwiLi4vLi4vbW9kZWxzL3VzLXZlcmlmaWNhdGlvbi50cyIsIi4uLy4uL21vZGVscy91cy12ZXJpZmljYXRpb24tb3ItZXJyb3IudHMiLCIuLi8uLi9tb2RlbHMvdXMtdmVyaWZpY2F0aW9ucy50cyIsIi4uLy4uL21vZGVscy91cy12ZXJpZmljYXRpb25zLXdyaXRhYmxlLnRzIiwiLi4vLi4vbW9kZWxzL3ZhbGlkYXRpb24tZXJyb3IudHMiLCIuLi8uLi9tb2RlbHMvemlwLnRzIiwiLi4vLi4vbW9kZWxzL3ppcC1jb2RlLXR5cGUudHMiLCIuLi8uLi9tb2RlbHMvemlwLWVkaXRhYmxlLnRzIiwiLi4vLi4vbW9kZWxzL3ppcC1sb29rdXAtY2l0eS50cyIsIi4uLy4uL2FwaS9hZGRyZXNzZXMtYXBpLnRzIiwiLi4vLi4vYXBpL2JhbmstYWNjb3VudHMtYXBpLnRzIiwiLi4vLi4vYXBpL2JpbGxpbmctZ3JvdXBzLWFwaS50cyIsIi4uLy4uL2FwaS9jYXJkLW9yZGVycy1hcGkudHMiLCIuLi8uLi9hcGkvY2FyZHMtYXBpLnRzIiwiLi4vLi4vYXBpL2NoZWNrcy1hcGkudHMiLCIuLi8uLi9hcGkvaW50bC1hdXRvY29tcGxldGlvbnMtYXBpLnRzIiwiLi4vLi4vYXBpL2ludGwtdmVyaWZpY2F0aW9ucy1hcGkudHMiLCIuLi8uLi9hcGkvbGV0dGVycy1hcGkudHMiLCIuLi8uLi9hcGkvcG9zdGNhcmRzLWFwaS50cyIsIi4uLy4uL2FwaS9yZXZlcnNlLWdlb2NvZGUtbG9va3Vwcy1hcGkudHMiLCIuLi8uLi9hcGkvc2VsZi1tYWlsZXJzLWFwaS50cyIsIi4uLy4uL2FwaS90ZW1wbGF0ZS12ZXJzaW9ucy1hcGkudHMiLCIuLi8uLi9hcGkvdGVtcGxhdGVzLWFwaS50cyIsIi4uLy4uL2FwaS91cy1hdXRvY29tcGxldGlvbnMtYXBpLnRzIiwiLi4vLi4vYXBpL3VzLXZlcmlmaWNhdGlvbnMtYXBpLnRzIiwiLi4vLi4vYXBpL3ppcC1sb29rdXBzLWFwaS50cyIsIi4uLy4uL2NvbmZpZ3VyYXRpb24udHMiXSwic291cmNlc0NvbnRlbnQiOltudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsXSwibmFtZXMiOlsiTW9kZWxzLkludGxWZXJpZmljYXRpb24iLCJNb2RlbHMuQnVsa0Vycm9yIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQXVCTyxNQUFNLFNBQVMsR0FBRyx3QkFBd0IsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBdUJ0RTs7OztBQUlHO01BQ1UsT0FBTyxDQUFBO0FBR2xCLElBQUEsV0FBQSxDQUNFLGFBQTZCLEVBQ25CLFFBQUEsR0FBbUIsU0FBUyxFQUM1QixRQUF1QixXQUFXLEVBQUE7UUFEbEMsSUFBUSxDQUFBLFFBQUEsR0FBUixRQUFRLENBQW9CO1FBQzVCLElBQUssQ0FBQSxLQUFBLEdBQUwsS0FBSyxDQUE2QjtBQUU1QyxRQUFBLElBQUksYUFBYSxFQUFFO0FBQ2pCLFlBQUEsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7WUFDbkMsSUFBSSxDQUFDLFFBQVEsR0FBRyxhQUFhLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUM7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QUFhLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQztBQUMxQyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLGFBQWEsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUMvQyxZQUFBLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQztBQUMxQyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLFlBQVksQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUM5QyxZQUFBLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQztBQUN4QyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLGFBQWEsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUMvQyxZQUFBLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQztBQUMxQyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLFdBQVcsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUM3QyxZQUFBLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQztBQUN0QyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLGVBQWUsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUNqRCxZQUFBLElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxD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WUFBQSxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUM7QUFDeEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxhQUFhLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDL0MsWUFBQSxJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUM7QUFDMUMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxXQUFXLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDN0MsWUFBQSxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7QUFDdEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxXQUFXLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDN0MsWUFBQSxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7QUFDdEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxJQUFJLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDdEMsWUFBQSxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7QUFDeEIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxPQUFPLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDekMsWUFBQSxJQUFJLENBQUMs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QUU7QUFDL0MsWUFBQSxJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUM7QUFDMUMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxZQUFZLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDOUMsWUFBQSxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUM7QUFDeEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxhQUFhLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDL0MsWUFBQSxJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUM7QUFDMUMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxXQUFXLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDN0MsWUFBQSxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7QUFDdEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxlQUFlLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDakQsWUFBQSxJQUFJLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQyxlQUFlLENBQUM7QUFDOUMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxXQUFXLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDN0MsWUFBQSxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7QUFDdEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxJQUFJLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDdEMsWUFBQSxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7QUFDeEIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxPQUFPLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDekMsWUFBQSxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7QUFDOUIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxLQUFLLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDdkMsWUFBQSxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7QUFDMUIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxLQUFLLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDdkMsWUFBQSxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7QUFDMUIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxRQUFRLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDMUMsWUFBQSxJQUFJLENBQUMsUUFBUSxH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O0FBQ3RCLElBQUEsV0FBQSxDQUFZLEtBQVcsRUFBQTtBQUNyQixRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsV0FBVyxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzdDLFlBQUEsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDO0FBQ3RDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsY0FBYyxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ2hELFlBQUEsSUFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUMsY0FBYyxDQUFDO0FBQzVDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsY0FBYyxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ2hELFlBQUEsSUFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUMsY0FBYyxDQUFDO0FBQzVDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsWUFBWSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzlDLFlBQUEsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFDO0FBQ3hDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsU0FBUyxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzNDLFlBQUEsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDO0FBQ2xDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsUUFBUSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzFDLFlBQUEsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDO0FBQ2hDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsRUFBRSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3BDLFlBQUEsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQ3BCLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsYUFBYSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQy9DLFlBQUEsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDO0FBQzFDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsU0FBUyxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzNDLFlBQUEsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDO0FBQ2xDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsUUFBUSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzFDLFlBQUEsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDO0FBQ2hDLFNB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QUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxJQUFJLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDdEMsWUFBQSxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7QUFDeEIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxNQUFNLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDeEMsWUFBQSxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDNUIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxRQUFRLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDMUMsWUFBQSxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUM7QUFDaEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxZQUFZLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDOUMsWUFBQSxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUM7QUFDeEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxLQUFLLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDdkMsWUFBQSxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7QUFDMUIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxL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LEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxnQkFBZ0IsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUNsRCxZQUFBLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsZ0JBQWdCLENBQUM7QUFDaEQsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxnQkFBZ0IsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUNsRCxZQUFBLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsZ0JBQWdCLENBQUM7QUFDaEQsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxHQUFHLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDckMsWUFBQSxJQUFJLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUM7QUFDdEIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxPQUFPLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDekMsWUFBQSxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7QUFDOUIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxrQkFBa0IsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUNwRCxZQUFBLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxLQUFLLENBQUMsa0JBQWtCLENBQUM7QUFDcEQsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxpQkFBaUIsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUNuRCxZQUFBLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUMsaUJBQWlCLENBQUM7QUFDbEQsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxVQUFVLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDNUMsWUFBQSxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUM7QUFDcEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxrQkFBa0IsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUNwRCxZQUFBLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxLQUFLLENBQUMsa0JBQWtCLENBQUM7QUFDcEQsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxrQkFBa0IsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUNwRCxZQUFBLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxLQUFLLENBQUMsa0JBQWtCLENBQUM7QUFDcEQsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxlQUFlLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDakQsWUFBQSxJQUFJLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQyxlQUFlLENBQUM7QUFDOUMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxnQkFBZ0IsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUNsRCxZQUFBLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsZ0JBQWdCLENBQUM7QUFDaEQsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxrQkFBa0IsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUNwRCxZQUFBLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxLQUFLLENBQUMsa0JBQWtCLENBQUM7QUFDcEQsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxlQUFlLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDakQsWUFBQSxJQUFJLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQyxlQUFlLENBQUM7QUFDOUMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxLQUFLLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDdkMsWUFBQSxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7QUFDMUIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxNQUFNLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDeEMsWUFBQSxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDNUIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxNQUFNLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDeEMsWUFBQSxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDNUIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxNQUFNLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDeEMsWUFBQSxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDNUIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxNQUFNLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDeEMsWUFBQSxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDNUIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxXQUFXLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDN0MsWUFBQSxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7QUFDdEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxJQUFJLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDdEMsWUFBQSxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7QUFDeEIsU0FBQTtLQUNGO0FBUUQsSUFBQSxJQUFXLEVBQUUsR0FBQTtRQUNYLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQztLQUNqQjtJQUNELElBQVcs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QUFhLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDL0MsWUFBQSxJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUM7QUFDMUMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxPQUFPLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDekMsWUFBQSxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7QUFDOUIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxNQUFNLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDeEMsWUFBQSxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDNUIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxFQUFFLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDcEMsWUFBQSxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDcEIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxXQUFXLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDN0MsWUFBQSxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7QUFDdEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxNQUFNLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDeEMsWUFBQSxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDNUIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxnQkFBZ0IsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUNsRCxZQUFBLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsZ0JBQWdCLENBQUM7QUFDaEQsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxVQUFVLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDNUMsWUFBQSxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUM7QUFDcEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxTQUFTLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDM0MsWUFBQSxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUM7QUFDbEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxnQkFBZ0IsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUNsRCxZQUFBLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsZ0JBQWdCLENBQUM7QUFDaEQsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxpQkFBaUIsQ0FBQSxLQUFLLFdB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bUIsR0FBRyxLQUFLLENBQUMsbUJBQW1CLENBQUM7QUFDdEQsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxFQUFFLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDcEMsWUFBQSxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDcEIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxVQUFVLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDNUMsWUFBQSxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUM7QUFDcEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxRQUFRLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDMUMsWUFBQSxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUM7QUFDaEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxTQUFTLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDM0MsWUFBQSxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUM7QUFDbEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxZQUFZLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDOUMsWUFBQSxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUss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QVcsRUFBQTtBQUNyQixRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsSUFBSSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3RDLFlBQUEsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO0FBQ3hCLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsV0FBVyxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzdDLFlBQUEsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDO0FBQ3RDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsYUFBYSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQy9DLFlBQUEsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDO0FBQzFDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsb0JBQW9CLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDdEQsWUFBQSxJQUFJLENBQUMsb0JBQW9CLEdBQUcsS0FBSyxDQUFDLG9CQUFvQixDQUFDO0FBQ3hELFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsU0FBUyxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzNDLFlBQUEsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDO0FBQ2xDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsOEJBQThCLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDaEUsWUFBQSxJQUFJLENBQUMsOEJBQThCO2dCQUNqQyxLQUFLLENBQUMsOEJBQThCLENBQUM7QUFDeEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxRQUFRLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDMUMsWUFBQSxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUM7QUFDaEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxRQUFRLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDMUMsWUFBQSxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUM7QUFDaEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxRQUFRLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDMUMsWUFBQSxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUM7QUFDaEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxtQkFBbUIsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUNyRCxZQUFBLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxLQUFLLENBQUMsbUJBQW1CLENBQUM7QUFDdEQsU0FBQTtLQUNGO0lBd0VNLE1BQU0sR0FBQTtRQUNYLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztBQUNiLFFBQUEsS0FBSyxNQUFNLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDL0MsR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRTtnQkFDM0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsS0FBSztBQUMxRCxhQUFBLENBQUMsQ0FBQztBQUNKLFNBQUE7QUFDRCxRQUFBLE9BQU8sR0FBRyxDQUFDO0tBQ1o7QUFDRixDQUFBO0FBRUQ7Ozs7QUFJRzs7QUNoSkg7QUFDQTtBQUNBOzs7Ozs7Ozs7O0FBVUc7QUFPSDs7OztBQUlHO01BQ1UsZ0JBQWdCLENBQUE7QUFDM0IsSUFBQSxXQUFBLENBQVksS0FBVyxFQUFBO0FBQ3JCLFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxnQkFBZ0IsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUNsRCxZQUFBLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsZ0JBQWdCLENBQUM7QUFDaEQsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxJQUFJLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDdEMsWUFBQSxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7QUFDeEIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxXQUFXLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDN0MsWUFBQSxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7QUFDdEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxhQUFhLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDL0MsWUFBQSxJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUM7QUFDMUMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxvQkFBb0IsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUN0RCxZQUFBLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxLQUFLLENBQUMsb0JBQW9CLENBQUM7QUFDeEQsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxTQUFTLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDM0MsWUFBQSxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUM7QUFDbEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSw4QkFBOEIsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUNoRSxZQUFBLElBQUksQ0FBQyw4QkFBOEI7Z0JBQ2pDLEtBQUssQ0FBQyw4QkFBOEIsQ0FBQztBQUN4QyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLFFBQVEsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUMxQyxZQUFBLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQztBQUNoQyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLFFBQVEsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUMxQyxZQUFBLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQztBQUNoQyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLG1CQUFtQixDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3JELFlBQUEsSUFBSSxDQUFDLG1CQUFtQixHQUFHLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQztBQUN0RCxTQUFBO0tBQ0Y7QUFRRCxJQUFBLElBQVcsZ0JBQWdCLEdBQUE7UUFDekIsUUFBUSxJQUFJLENBQUMsaUJBQWlCLElBQUksSUFBSSxJQUFJLFNBQVMsRUFBWTtLQUNoRTtJQUNELElBQVcsZ0JBQWdCLENBQUMsUUFBdUIsRUFBQTtRQUNqRCxJQUFJLFFBQVEsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRTtBQUNuRCxZQUFBLE1BQU0sSUFBSSxLQUFLLENBQUMsbUNBQW1DLENBQUMsQ0FBQztBQUN0RCxTQUFBO0FBQ0QsUUFBQSxJQUFJLENBQUMsaUJBQWlCLEdBQUcsUUFBUSxDQUFDO0tBQ25DO0lBaUVNLE1BQU0sR0FBQTtRQUNYLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztBQUNiLFFBQUEsS0FBSyxNQUFNLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDL0MsR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRTtnQkFDM0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsS0FBSztBQUMxRCxhQUFBLENBQUMsQ0FBQztBQUNKLFNBQUE7QUFDRCxRQUFBLE9BQU8sR0FBRyxDQUFDO0tBQ1o7QUFDRixDQUFBO0FBRUQ7Ozs7QUFJRzs7QUN6Skg7QUFDQTtBQUNBOzs7Ozs7Ozs7O0FBVUc7QUFNSDs7OztBQUlHO01BQ1UsYUFBYSxDQUFBO0FBQ3hCLElBQUEsV0FBQSxDQUFZLEtBQVcsRUFBQTtBQUNyQixRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsSUFBSSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3RDLFlBQUEsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO0FBQ3hCLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsTUFBTSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3hDLFlBQUEsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO0FBQzVCLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsUUFBUSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzFDLFlBQUEsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDO0FBQ2hDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsWUFBWSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzlDLFlBQUEsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFDO0FBQ3hDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsS0FBSyxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3ZDLFlBQUEsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDO0FBQzFCLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsV0FBVyxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzdDLFlBQUEsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDO0FBQ3RDLFNBQUE7S0FDRjtBQXVCRCxJQUFBLElBQVcsYUFBYSxHQUFBOztBQUN0QixRQUFBLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO0FBQ2xCLFlBQUEsT0FBTyxTQUFTLENBQUM7QUFDbEIsU0FBQTtRQUNELE9BQU8sQ0FBQSxFQUFBLEdBQUEsSUFBSSxDQUFDLFFBQVE7QUFDakIsYUFBQSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ2IsS0FBSyxDQUFDLEdBQUcsQ0FBQzthQUNWLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLDBDQUNwQyxLQUFLLENBQUMsR0FBRyxDQUFFLENBQUEsQ0FBQyxDQUFDLENBQUM7S0FDbkI7QUFRRCxJQUFBLElBQVcsaUJBQWlCLEdBQUE7O0FBQzFCLFFBQUEsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUU7QUFDdEIsWUFBQSxPQUFPLFNBQVMsQ0FBQztBQUNsQixTQUFBO1FBQ0QsT0FBTyxDQUFBLEVBQUEsR0FBQSxJQUFJLENBQUMsWUFBWTtBQUNyQixhQUFBLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDYixLQUFLLENBQUMsR0FBRyxDQUFDO2FBQ1YsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsMENBQ3JDLEtBQUssQ0FBQyxHQUFHLENBQUUsQ0FBQSxDQUFDLENBQUMsQ0FBQztLQUNuQjtJQWVNLE1BQU0sR0FBQTtRQUNYLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztBQUNiLFFBQUEsS0FBSyxNQUFNLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDL0MsR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRTtnQkFDM0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsS0FBSztBQUMxRCxhQUFBLENBQUMsQ0FBQztBQUNKLFNBQUE7QUFDRCxRQUFBLE9BQU8sR0FBRyxDQUFDO0tBQ1o7QUFDRixDQUFBO0FBRUQ7Ozs7QUFJRzs7QUMxSEg7QUFDQTtBQUNBOzs7Ozs7Ozs7O0FBVUc7QUFNSDs7OztBQUlHO01BQ1UsSUFBSSxDQUFBO0FBQ2YsSUFBQSxXQUFBLENBQVksS0FBVyxFQUFBO0FBQ3JCLFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxFQUFFLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDcEMsWUFBQSxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDcEIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxHQUFHLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDckMsWUFBQSxJQUFJLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUM7QUFDdEIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxZQUFZLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDOUMsWUFBQSxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUM7QUFDeEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxnQkFBZ0IsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUNsRCxZQUFBLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsZ0JBQWdCLENBQUM7QUFDaEQsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxPQUFPLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDekMsWUFBQSxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7QUFDOUIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxrQkFBa0IsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUNwRCxZQUFBLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxLQUFLLENBQUMsa0JBQWtCLENBQUM7QUFDcEQsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxpQkFBaUIsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUNuRCxZQUFBLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUMsaUJBQWlCLENBQUM7QUFDbEQsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxVQUFVLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDNUMsWUFBQSxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUM7QUFDcEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxrQkFBa0IsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUNwRCxZQUFBLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxLQUFLLENBQUMsa0JBQWtCLENBQUM7QUFDcEQsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxnQkFBZ0IsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUNsRCxZQUFBLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsZ0JBQWdCLENBQUM7QUFDaEQsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxNQUFNLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDeEMsWUFBQSxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDNUIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxXQUFXLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDN0MsWUFBQSxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7QUFDdEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxnQkFBZ0IsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUNsRCxZQUFBLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsZ0JBQWdCLENBQUM7QUFDaEQsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxZQUFZLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDOUMsWUFBQSxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUM7QUFDeEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxhQUFhLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDL0MsWUFBQSxJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUM7QUFDMUMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxPQUFPLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDekMsWUFBQSxJQUFJLENBQUMsT0FBTyxH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QUUsS0FBSyxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3ZDLFlBQUEsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDO0FBQzFCLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsSUFBSSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3RDLFlBQUEsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO0FBQ3hCLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsSUFBSSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3RDLFlBQUEsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO0FBQ3hCLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsV0FBVyxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzdDLFlBQUEsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDO0FBQ3RDLFNBQUE7S0FDRjtJQThCTSxNQUFNLEdBQUE7UUFDWCxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7QUFDYixRQUFBLEtBQUssTUFBTSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQy9DLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUU7Z0JBQzNCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMs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QSxHQUFMLEtBQUssQ0FBRSxFQUFFLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDcEMsWUFBQSxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDcEIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxPQUFPLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDekMsWUFBQSxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7QUFDOUIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxNQUFNLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDeEMsWUFBQSxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDNUIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxTQUFTLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDM0MsWUFBQSxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUM7QUFDbEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxnQkFBZ0IsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUNsRCxZQUFBLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsZ0JBQWdCLENBQUM7QUFDaEQsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtB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LElBQUksQ0FBQztBQUN4QixTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLFdBQVcsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUM3QyxZQUFBLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQztBQUN0QyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLFFBQVEsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUMxQyxZQUFBLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQztBQUNoQyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLGVBQWUsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUNqRCxZQUFBLElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDLGVBQWUsQ0FBQztBQUM5QyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLFNBQVMsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUMzQyxZQUFBLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQztBQUNsQyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLFNBQVMsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUMzQyxZQUFBLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQztBQUNsQyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLElBQUksQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUN0QyxZQUFBLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztBQUN4QixTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLFlBQVksQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUM5QyxZQUFBLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQztBQUN4QyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLE9BQU8sQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUN6QyxZQUFBLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQztBQUM5QixTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLE1BQU0sQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUN4QyxZQUFBLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztBQUM1QixTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLFlBQVksQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUM5QyxZQUFBLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQztBQUN4QyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLHdCQUF3QixDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzFELFlBQUEsSUFBSSxDQUFDLHdCQUF3QixHQUFHLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQztBQUNoRSxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLHNCQUFzQixDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3hELFlBQUEsSUFBSSxDQUFDLHNCQUFzQixHQUFHLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQztBQUM1RCxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLGdDQUFnQyxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ2xFLFlBQUEsSUFBSSxDQUFDLGdDQUFnQztnQkFDbkMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDO0FBQzFDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsOEJBQThCLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDaEUsWUFBQSxJQUFJLENBQUMsOEJBQThCO2dCQUNqQyxLQUFLLENBQUMsOEJBQThCLENBQUM7QUFDeEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxHQUFHLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDckMsWUFBQSxJQUFJLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUM7QUFDdEIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxPQUFPLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDekMsWUFBQSxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7QUFDOUIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxVQUFVLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDNUMsWUFBQSxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUM7QUFDcEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxzQkFBc0IsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUN4RCxZQUFBLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxLQUFLLENBQUMsc0JBQXNCLENBQUM7QUFDNUQsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxlQUFlLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDakQsWUFBQSxJQUFJLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQyxlQUFlLENBQUM7QUFDOUMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxNQUFNLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDeEMsWUFBQSxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDNUIsU0FBQTtBQUNE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TSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3hDLFlBQUEsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO0FBQzVCLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsSUFBSSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3RDLFlBQUEsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO0FBQ3hCLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsWUFBWSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzlDLFlBQUEsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFDO0FBQ3hDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsVUFBVSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzVDLFlBQUEsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDO0FBQ3BDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsV0FBVyxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzdDLFlBQUEsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDO0FBQ3RDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsUUFBUSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzFDLFlBQUEsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDO0FBQ2hDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsZUFBZSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ2pELFlBQUEsSUFBSSxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUMsZUFBZSxDQUFDO0FBQzlDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsU0FBUyxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzNDLFlBQUEsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDO0FBQ2xDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsU0FBUyxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzNDLFlBQUEsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDO0FBQ2xDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsSUFBSSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3RDLFlBQUEsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO0FBQ3hCLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsWUFBWSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzlDLFlB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LENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsSUFBUyxDQUFBO0FBQ1QsSUFBQSxlQUFB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QUFDN0MsWUFBQSxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7QUFDdEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxRQUFRLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDMUMsWUFBQSxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUM7QUFDaEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxhQUFhLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDL0MsWUFBQSxJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUM7QUFDMUMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxXQUFXLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDN0MsWUFBQSxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7QUFDdEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxPQUFPLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDekMsWUFBQSxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7QUFDOUIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxJQUFJLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDdEMsWUFBQSxJQUFJ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LENBQUM7QUFDaEQsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxRQUFRLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDMUMsWUFBQSxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUM7QUFDaEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxVQUFVLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDNUMsWUFBQSxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUM7QUFDcEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxVQUFVLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDNUMsWUFBQSxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUM7QUFDcEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxhQUFhLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDL0MsWUFBQSxJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUM7QUFDMUMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxTQUFTLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDM0MsWUFBQSxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUM7QUFDbEMsU0FB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QTtBQUNULElBQUEsV0FBQSxDQUFBLElBQUEsQ0FBQSxHQUFBLElBQVMsQ0FBQTtBQUNULElBQUEsV0FBQSxDQUFBLElBQUEsQ0FBQSxHQUFBLElBQVMsQ0FBQTtBQUNULElBQUEsV0FBQSxDQUFBLElBQUEsQ0FBQSxHQUFBLElBQVMsQ0FBQTtBQUNULElBQUEsV0FBQSxDQUFBLElBQUEsQ0FBQSxHQUFBLElBQVMsQ0FBQTtBQUNULElBQUEsV0FBQSxDQUFBLElBQUEsQ0FBQSxHQUFBLElBQVMsQ0FBQTtBQUNULElBQUEsV0FBQSxDQUFBLElBQUEsQ0FBQSxHQUFBLElBQVMsQ0FBQTtBQUNULElBQUEsV0FBQSxDQUFBLElBQUEsQ0FBQSxHQUFBLElBQVMsQ0FBQTtBQUNULElBQUEsV0FBQSxDQUFBLElBQUEsQ0FBQSxHQUFBLElBQVMsQ0FBQTtBQUNULElBQUEsV0FBQSxDQUFBLElBQUEsQ0FBQSxHQUFBLElBQVMsQ0FBQTtBQUNULElBQUEsV0FBQSxDQUFBLElBQUEsQ0FBQSxHQUFBLElBQVMsQ0FBQTtBQUNULElBQUEsV0FBQSxDQUFBLElBQUEsQ0FBQSxHQUFBLElBQVMsQ0FBQTtBQUNULElBQUEsV0FBQSxDQUFBLElBQUEsQ0FBQSxHQUFBLElBQVMsQ0FBQTtBQUNULElBQUEsV0FBQSxDQUFBLElBQUEsQ0FBQSxHQUFBLElBQVMsQ0FBQTtBQUNYLENBQUMsRUFoQlcsV0FBVyxLQUFYLFdBQVcsR0FnQnRCLEVBQUEsQ0FBQSxDQUFBLENBQUE7QUFFRDs7OztBQUlHOztBQzVDSDtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7QUFVRztBQUlIOzs7O0FBSUc7SUFFUyxXQUdYO0FBSEQsQ0FBQSxVQUFZLFVBQVUsRUFBQTtBQUNwQixJQUFBLFVBQUEsQ0FBQSxRQUFBLENBQUEsR0FBQSxRQUFpQixDQUFBO0FBQ2pCLElBQUEsVUFBQSxDQUFBLFlBQUEsQ0FBQSxHQUFBLFlBQXlCLENBQUE7QUFDM0IsQ0FBQyxFQUhXLFVBQVUsS0FBVixVQUFVLEdBR3JCLEVBQUEsQ0FBQSxDQUFBLENBQUE7QUFFRDs7OztBQUlH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SUc7TUFDVSxNQUFNLENBQUE7QUFDakIsSUFBQSxXQUFBLENBQVksS0FBVyxFQUFBO0FBQ3JCLFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxFQUFFLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDcEMsWUFBQSxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDcEIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxJQUFJLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDdEMsWUFBQSxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7QUFDeEIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxZQUFZLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDOUMsWUFBQSxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUM7QUFDeEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxVQUFVLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDNUMsWUFBQSxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUM7QUFDcEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxZQUFZLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDOUMsWUFBQSxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUM7QUFDeEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxNQUFNLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDeEMsWUFBQSxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDNUIsU0FBQTtLQUNGO0FBUUQsSUFBQSxJQUFXLEVBQUUsR0FBQTtRQUNYLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQztLQUNqQjtJQUNELElBQVcsRUFBRSxDQUFDLFFBQWdCLEVBQUE7UUFDNUIsSUFBSSxRQUFRLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUU7QUFDckQsWUFBQSxNQUFNLElBQUksS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUM7QUFDeEMsU0FBQTtBQUNELFFBQUEsSUFBSSxDQUFDLEdBQUcsR0FBRyxRQUFRLENBQUM7S0FDckI7SUFxQ00sTUFBTSxHQUFBO1FBQ1gsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO0FBQ2IsUUFBQSxLQUFLLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUMvQyxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFO2dCQUMzQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxLQUFLO0FBQzFELGFBQUEsQ0FBQyxDQUFDO0FBQ0osU0FBQTtBQUNELFFBQUEsT0FBTyxHQUFHLENBQUM7S0FDWjtBQUNGLENBQUE7QUFFRDs7O0FBR0c7SUFDUyxpQkFFWDtBQUZELENBQUEsVUFBWSxnQkFBZ0IsRUFBQTtBQUMxQixJQUFBLGdCQUFBLENBQUEsT0FBQSxDQUFBLEdBQUEsT0FBZSxDQUFBO0FBQ2pCLENBQUMsRUFGVyxnQkFBZ0IsS0FBaEIsZ0JBQWdCLEdBRTNCLEVBQUEsQ0FBQSxDQUFBLENBQUE7QUFFRDs7OztBQUlHOztBQ3ZISDtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7QUFVRztBQUlIOzs7O0FBSUc7TUFDVSxNQUFNLENBQUE7QUFDakIsSUFBQSxXQUFBLENBQVksS0FBVyxFQUFBO0FBQ3JCLFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxFQUFFLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDcEMsWUFBQSxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDcEIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxXQUFXLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDN0MsWUFBQSxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7QUFDdEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxZQUFZLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDOUMsWUFBQSxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUM7QUFDeEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxPQUFPLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDekMsWUFBQSxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7QUFDOUIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxLQUFLLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDdkMsWUFBQSxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7QUFDMUIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxLQUFLLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDdkMsWUFBQSxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7QUFDMUIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxJQUFJLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDdEMsWUFBQSxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7QUFDeEIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxRQUFRLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDMUMsWUFBQSxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUM7QUFDaEMsU0FBQTtLQUNGO0FBUUQsSUFBQSxJQUFXLEVBQUUsR0FBQTtRQUNYLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQztLQUNqQjtJQUNELElBQVcsRUFBRSxDQUFDLFFBQWdCLEVBQUE7UUFDNUIsSUFBSSxRQUFRLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUU7QUFDbkQsWUFBQSxNQUFNLElBQUksS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUM7QUFDeEMsU0FBQTtBQUNELFFBQUEsSUFBSSxDQUFDLEdBQUcsR0FBRyxRQUFRLENBQUM7S0FDckI7QUFrREQsSUFBQSxJQUFXLFFBQVEsR0FBQTtRQUNqQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7S0FDdkI7SUFDRCxJQUFXLFFBQVEsQ0FBQyxRQUFnQixFQUFBO1FBQ2xDLElBQUksUUFBUSxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFO0FBQ3BELFlBQUEsTUFBTSxJQUFJLEtBQUssQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0FBQzlDLFNBQUE7QUFDRCxRQUFBLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO0tBQzNCO0lBRU0sTUFBTSxHQUFBO1FBQ1gsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO0FBQ2IsUUFBQSxLQUFLLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUMvQyxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFO2dCQUMzQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxLQUFLO0FBQzFELGFBQUEsQ0FBQyxDQUFDO0FBQ0osU0FBQTtBQUNELFFBQUEsT0FBTyxHQUFHLENBQUM7S0FDWjtBQUNGLENBQUE7QUFFRDs7O0FBR0c7SUFDUyxnQkFJWDtBQUpELENBQUEsVUFBWSxlQUFlLEVBQUE7QUFDekIsSUFBQSxlQUFBLENBQUEsWUFBQSxDQUFBLEdBQUEsYUFBMEIsQ0FBQTtBQUMxQixJQUFBLGVBQUEsQ0FBQSxRQUFBLENBQUEsR0FBQSxRQUFpQixDQUFBO0FBQ2pCLElBQUEsZUFBQSxDQUFBLFdBQUEsQ0FBQSxHQUFBLFdBQXVCLENBQUE7QUFDekIsQ0FBQyxFQUpXLGVBQWUsS0FBZixlQUFlLEdBSTFCLEVBQUEsQ0FBQSxDQUFBLENBQUE7QUFDRDs7O0FBR0c7SUFDUyxlQUlYO0FBSkQsQ0FBQSxVQUFZLGNBQWMsRUFBQTtBQUN4QixJQUFBLGNBQUEsQ0FBQSxLQUFBLENBQUEsR0FBQSxLQUFXLENBQUE7QUFDWCxJQUFBLGNBQUEsQ0FBQSxVQUFBLENBQUEsR0FBQSxVQUFxQixDQUFBO0FBQ3JCLElBQUEsY0FBQSxDQUFBLFdBQUEsQ0FBQSxHQUFBLFdBQXVCLENBQUE7QUFDekIsQ0FBQyxFQUpXLGNBQWMsS0FBZCxjQUFjLEdBSXpCLEVBQUEsQ0FBQSxDQUFBLENBQUE7QUFFRDs7OztBQUlHOztBQzdKSDtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7QUFVRztBQUlIOzs7O0FBSUc7TUFDVSxXQUFXLENBQUE7QUFDdEIsSUFBQSxXQUFBLENBQVksS0FBVyxFQUFBO0FBQ3JCLFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxJQUFJLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDdEMsWUFBQSxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7QUFDeEIsU0FBQTtLQUNGO0lBU00sTUFBTSxHQUFBO1FBQ1gsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO0FBQ2IsUUFBQSxLQUFLLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUMvQyxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFO2dCQUMzQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxLQUFLO0FBQzFELGFBQUEsQ0FBQyxDQUFDO0FBQ0osU0FBQTtBQUNELFFBQUEsT0FBTyxHQUFHLENBQUM7S0FDWjtBQUNGLENBQUE7QUFFRDs7O0FBR0c7SUFDUyxvQkFJWDtBQUpELENBQUEsVUFBWSxtQkFBbUIsRUFBQTtBQUM3QixJQUFBLG1CQUFBLENBQUEsS0FBQSxDQUFBLEdBQUEsS0FBVyxDQUFBO0FBQ1gsSUFBQSxtQkFBQSxDQUFBLFVBQUEsQ0FBQSxHQUFBLFVBQXFCLENBQUE7QUFDckIsSUFBQSxtQkFBQSxDQUFBLFdBQUEsQ0FBQSxHQUFBLFdBQXVCLENBQUE7QUFDekIsQ0FBQyxFQUpXLG1CQUFtQixLQUFuQixtQkFBbUIsR0FJOUIsRUFBQSxDQUFBLENBQUEsQ0FBQTtBQUVEOzs7O0FBSUc7O0FDNURIO0FBQ0E7QUFDQTs7Ozs7Ozs7OztBQVVHO0FBT0g7Ozs7QUFJRztNQUNVLGdCQUFnQixDQUFBO0FBQzNCLElBQUEsV0FBQSxDQUFZLEtBQVcsRUFBQTtBQUNyQixRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsVUFBVSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzVDLFlBQUEsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDO0FBQ3BDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsaUJBQWlCLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDbkQsWUFBQSxJQUFJLENBQUMsaUJBQWlCLEdBQUcsS0FBSyxDQUFDLGlCQUFpQixDQUFDO0FBQ2xELFNBQUE7S0FDRjtJQWdCTSxNQUFNLEdBQUE7UUFDWCxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7QUFDYixRQUFBLEtBQUssTUFBTSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQy9DLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUU7Z0JBQzNCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsR0FBRyxHQUFHLEtBQUs7QUFDMUQsYUFBQSxDQUFDLENBQUM7QUFDSixTQUFBO0FBQ0QsUUFBQSxPQUFPLEdBQUcsQ0FBQztLQUNaO0FBQ0YsQ0FBQTtBQUVEOzs7O0FBSUc7O0FDL0RIO0FBQ0E7QUFDQTs7Ozs7Ozs7OztBQVVHO0FBSUg7Ozs7QUFJRztNQUNVLGlCQUFpQixDQUFBO0FBQzVCLElBQUEsV0FBQSxDQUFZLEtBQVcsRUFBQTtBQUNyQixRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsUUFBUSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzFDLFlBQUEsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDO0FBQ2hDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsZUFBZSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ2pELFlBQUEsSUFBSSxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUMsZUFBZSxDQUFDO0FBQzlDLFNBQUE7S0FDRjtBQVFELElBQUEsSUFBVyxRQUFRLEdBQUE7UUFDakIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0tBQ3ZCO0lBQ0QsSUFBVyxRQUFRLENBQUMsUUFBZ0IsRUFBQTtRQUNsQyxJQUFJLFFBQVEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUU7QUFDekMsWUFBQSxNQUFNLElBQUksS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUM7QUFDOUMsU0FBQTtBQUNELFFBQUEsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7S0FDM0I7QUFRRCxJQUFBLElBQVcsZUFBZSxHQUFBO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDO0tBQzlCO0lBQ0QsSUFBVyxlQUFlLENBQUMsUUFBZ0IsRUFBQTtRQUN6QyxJQUFJLFFBQVEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUU7QUFDekMsWUFBQSxNQUFNLElBQUksS0FBSyxDQUFDLGtDQUFrQyxDQUFDLENBQUM7QUFDckQsU0FBQTtBQUNELFFBQUEsSUFBSSxDQUFDLGdCQUFnQixHQUFHLFFBQVEsQ0FBQztLQUNsQztJQUVNLE1BQU0sR0FBQTtRQUNYLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztBQUNiLFFBQUEsS0FBSyxNQUFNLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDL0MsR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRTtnQkFDM0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsS0FBSztBQUMxRCxhQUFBLENBQUMsQ0FBQztBQUNKLFNBQUE7QUFDRCxRQUFBLE9BQU8sR0FBRyxDQUFDO0tBQ1o7QUFDRixDQUFBO0FBRUQ7Ozs7QUFJRzs7QUM5RUg7QUFDQTtBQUNBOzs7Ozs7Ozs7O0FBVUc7QUFNSDs7OztBQUlHO01BQ1UsbUJBQW1CLENBQUE7QUFDOUIsSUFBQSxXQUFBLENBQVksS0FBVyxFQUFBO0FBQ3JCLFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxNQUFNLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDeEMsWUFBQSxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDNUIsU0FBQTtLQUNGO0lBU00sTUFBTSxHQUFBO1FBQ1gsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO0FBQ2IsUUFBQSxLQUFLLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUMvQyxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFO2dCQUMzQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxLQUFLO0FBQzFELGFBQUEsQ0FBQyxDQUFDO0FBQ0osU0FBQTtBQUNELFFBQUEsT0FBTyxHQUFHLENBQUM7S0FDWjtBQUNGLENBQUE7QUFFRDs7OztBQUlHOztBQ3BESDtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7QUFVRztBQUlIOzs7O0FBSUc7TUFDVSxrQkFBa0IsQ0FBQTtBQUM3QixJQUFBLFdBQUEsQ0FBWSxLQUFXLEVBQUE7QUFDckIsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLEVBQUUsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUNwQyxZQUFBLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUNwQixTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLFNBQVMsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUMzQyxZQUFBLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQztBQUNsQyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLFlBQVksQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUM5QyxZQUFBLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQztBQUN4QyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLGNBQWMsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUNoRCxZQUFBLElBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDLGNBQWMsQ0FBQztBQUM1QyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLFlBQVksQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUM5QyxZQUFBLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQztBQUN4QyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLFNBQVMsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUMzQyxZQUFBLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQztBQUNsQyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLEtBQUssQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUN2QyxZQUFBLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztBQUMxQixTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLFVBQVUsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUM1QyxZQUFBLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQztBQUNwQyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLE1BQU0sQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUN4QyxZQUFBLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztBQUM1QixTQUFBO0tBQ0Y7QUFRRCxJQUFBLElBQVcsRUFBRSxHQUFBO0FBQ1gsUUFBQSxRQUFRLElBQUksQ0FBQyxHQUFHLElBQUksU0FBUyxFQUFZO0tBQzFDO0lBQ0QsSUFBVyxFQUFFLENBQUMsUUFBZ0IsRUFBQTtRQUM1QixJQUFJLFFBQVEsSUFBSSxDQUFDLCtCQUErQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRTtBQUMvRCxZQUFBLE1BQU0sSUFBSSxLQUFLLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUN4QyxTQUFBO0FBQ0QsUUFBQSxJQUFJLENBQUMsR0FBRyxHQUFHLFFBQVEsQ0FBQztLQUNyQjtJQTBETSxNQUFNLEdBQUE7UUFDWCxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7QUFDYixRQUFBLEtBQUssTUFBTSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQy9DLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUU7Z0JBQzNCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsR0FBRyxHQUFHLEtBQUs7QUFDMUQsYUFBQSxDQUFDLENBQUM7QUFDSixTQUFBO0FBQ0QsUUFBQSxPQUFPLEdBQUcsQ0FBQztLQUNaO0FBQ0YsQ0FBQTtBQUVEOzs7QUFHRztJQUNTLGlDQUtYO0FBTEQsQ0FBQSxVQUFZLGdDQUFnQyxFQUFBO0FBQzFDLElBQUEsZ0NBQUEsQ0FBQSxNQUFBLENBQUEsR0FBQSxNQUFhLENBQUE7QUFDYixJQUFBLGdDQUFBLENBQUEsUUFBQSxDQUFBLEdBQUEsUUFBaUIsQ0FBQTtBQUNqQixJQUFBLGdDQUFBLENBQUEsS0FBQSxDQUFBLEdBQUEsS0FBVyxDQUFBO0FBQ1gsSUFBQSxnQ0FBQSxDQUFBLE9BQUEsQ0FBQSxHQUFBLEVBQVUsQ0FBQTtBQUNaLENBQUMsRUFMVyxnQ0FBZ0MsS0FBaEMsZ0NBQWdDLEdBSzNDLEVBQUEsQ0FBQSxDQUFBLENBQUE7QUFDRDs7O0FBR0c7SUFDUyw2QkFFWDtBQUZELENBQUEsVUFBWSw0QkFBNEIsRUFBQTtBQUN0QyxJQUFBLDRCQUFBLENBQUEsY0FBQSxDQUFBLEdBQUEsZUFBOEIsQ0FBQTtBQUNoQyxDQUFDLEVBRlcsNEJBQTRCLEtBQTVCLDRCQUE0QixHQUV2QyxFQUFBLENBQUEsQ0FBQSxDQUFBO0FBRUQ7Ozs7QUFJRzs7QUM3Skg7QUFDQTtBQUNBOzs7Ozs7Ozs7O0FBVUc7QUFJSDs7OztBQUlHO01BQ1UsWUFBWSxDQUFBO0FBQ3ZCLElBQUEsV0FBQSxDQUFZLEtBQVcsRUFBQTtBQUNyQixRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsSUFBSSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3RDLFlBQUEsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO0FBQ3hCLFNBQUE7S0FDRjtJQVNNLE1BQU0sR0FBQTtRQUNYLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztBQUNiLFFBQUEsS0FBSyxNQUFNLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDL0MsR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRTtnQkFDM0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsS0FBSztBQUMxRCxhQUFBLENBQUMsQ0FBQztBQUNKLFNBQUE7QUFDRCxRQUFBLE9BQU8sR0FBRyxDQUFDO0tBQ1o7QUFDRixDQUFBO0FBRUQ7Ozs7QUFJRzs7QUNsREg7QUFDQTtBQUNBOzs7Ozs7Ozs7O0FBVUc7QUFNSDs7OztBQUlHO01BQ1UsbUJBQW1CLENBQUE7QUFDOUIsSUFBQSxXQUFBLENBQVksS0FBVyxFQUFBO0FBQ3JCLFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxFQUFFLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDcEMsWUFBQSxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDcEIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxXQUFXLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDN0MsWUFBQSxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7QUFDdEMsU0FBQTtLQUNGO0FBUUQsSUFBQSxJQUFXLEVBQUUsR0FBQTtBQUNYLFFBQUEsUUFBUSxJQUFJLENBQUMsR0FBRyxJQUFJLFNBQVMsRUFBWTtLQUMxQztJQUNELElBQVcsRUFBRSxDQUFDLFFBQWdCLEVBQUE7UUFDNUIsSUFBSSxRQUFRLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUU7QUFDMUQsWUFBQSxNQUFNLElBQUksS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUM7QUFDeEMsU0FBQTtBQUNELFFBQUEsSUFBSSxDQUFDLEdBQUcsR0FBRyxRQUFRLENBQUM7S0FDckI7SUFTTSxNQUFNLEdBQUE7UUFDWCxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7QUFDYixRQUFBLEtBQUssTUFBTSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQy9DLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUU7Z0JBQzNCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsR0FBRyxHQUFHLEtBQUs7QUFDMUQsYUFBQSxDQUFDLENBQUM7QUFDSixTQUFBO0FBQ0QsUUFBQSxPQUFPLEdBQUcsQ0FBQztLQUNaO0FBQ0YsQ0FBQTtBQUVEOzs7O0FBSUc7O0FDdkVIO0FBQ0E7QUFDQTs7Ozs7Ozs7OztBQVVHO0FBTUg7Ozs7QUFJRztNQUNVLDJCQUEyQixDQUFBO0FBQ3RDLElBQUEsV0FBQSxDQUFZLEtBQVcsRUFBQTtBQUNyQixRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsY0FBYyxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ2hELFlBQUEsSUFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUMsY0FBYyxDQUFDO0FBQzVDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsSUFBSSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3RDLFlBQUEsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO0FBQ3hCLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsS0FBSyxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3ZDLFlBQUEsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDO0FBQzFCLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsUUFBUSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzFDLFlBQUEsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDO0FBQ2hDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsT0FBTyxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3pDLFlBQUEsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDO0FBQzlCLFNBQUE7S0FDRjtJQXFDTSxNQUFNLEdBQUE7UUFDWCxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7QUFDYixRQUFBLEtBQUssTUFBTSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQy9DLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUU7Z0JBQzNCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsR0FBRyxHQUFHLEtBQUs7QUFDMUQsYUFBQSxDQUFDLENBQUM7QUFDSixTQUFBO0FBQ0QsUUFBQSxPQUFPLEdBQUcsQ0FBQztLQUNaO0FBQ0YsQ0FBQTtBQUVEOzs7O0FBSUc7O0FDNUZIO0FBQ0E7QUFDQTs7Ozs7Ozs7OztBQVVHO0FBSUg7Ozs7QUFJRztNQUNVLGNBQWMsQ0FBQTtBQUN6QixJQUFBLFdBQUEsQ0FBWSxLQUFXLEVBQUE7QUFDckIsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLGNBQWMsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUNoRCxZQUFBLElBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDLGNBQWMsQ0FBQztBQUM1QyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLFdBQVcsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUM3QyxZQUFBLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQztBQUN0QyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLElBQUksQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUN0QyxZQUFBLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztBQUN4QixTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLEtBQUssQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUN2QyxZQUFBLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztBQUMxQixTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLFdBQVcsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUM3QyxZQUFBLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQztBQUN0QyxTQUFBO0tBQ0Y7SUFxQ00sTUFBTSxHQUFBO1FBQ1gsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO0FBQ2IsUUFBQSxLQUFLLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUMvQyxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFO2dCQUMzQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxLQUFLO0FBQzFELGFBQUEsQ0FBQyxDQUFDO0FBQ0osU0FBQTtBQUNELFFBQUEsT0FBTyxHQUFHLENBQUM7S0FDWjtBQUNGLENBQUE7QUFFRDs7OztBQUlHOztBQzFGSDtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7QUFVRztBQU1IOzs7O0FBSUc7TUFDVSxlQUFlLENBQUE7QUFDMUIsSUFBQSxXQUFBLENBQVksS0FBVyxFQUFBO0FBQ3JCLFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxvQkFBb0IsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUN0RCxZQUFBLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxLQUFLLENBQUMsb0JBQW9CLENBQUM7QUFDeEQsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxZQUFZLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDOUMsWUFBQSxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUM7QUFDeEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxJQUFJLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDdEMsWUFBQSxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7QUFDeEIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxLQUFLLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDdkMsWUFBQSxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7QUFDMUIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxPQUFPLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDekMsWUFBQSxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7QUFDOUIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxRQUFRLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDMUMsWUFBQSxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUM7QUFDaEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxNQUFNLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDeEMsWUFBQSxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDNUIsU0FBQTtLQUNGO0lBbURNLE1BQU0sR0FBQTtRQUNYLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztBQUNiLFFBQUEsS0FBSyxNQUFNLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDL0MsR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRTtnQkFDM0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsS0FBSztBQUMxRCxhQUFBLENBQUMsQ0FBQztBQUNKLFNBQUE7QUFDRCxRQUFBLE9BQU8sR0FBRyxDQUFDO0tBQ1o7QUFDRixDQUFBO0FBRUQ7OztBQUdHO0lBQ1MsMEJBRVg7QUFGRCxDQUFBLFVBQVkseUJBQXlCLEVBQUE7QUFDbkMsSUFBQSx5QkFBQSxDQUFBLG9CQUFBLENBQUEsR0FBQSxxQkFBMEMsQ0FBQTtBQUM1QyxDQUFDLEVBRlcseUJBQXlCLEtBQXpCLHlCQUF5QixHQUVwQyxFQUFBLENBQUEsQ0FBQSxDQUFBO0FBRUQ7Ozs7QUFJRzs7QUN4SEg7QUFDQTtBQUNBOzs7Ozs7Ozs7O0FBVUc7QUFNSDs7OztBQUlHO01BQ1UsZ0JBQWdCLENBQUE7QUFDM0IsSUFBQSxXQUFBLENBQVksS0FBVyxFQUFBO0FBQ3JCLFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxFQUFFLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDcEMsWUFBQSxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDcEIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxTQUFTLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDM0MsWUFBQSxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUM7QUFDbEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxZQUFZLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDOUMsWUFBQSxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUM7QUFDeEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxjQUFjLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDaEQsWUFBQSxJQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQyxjQUFjLENBQUM7QUFDNUMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxTQUFTLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDM0MsWUFBQSxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUM7QUFDbEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxPQUFPLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDekMsWUFBQSxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7QUFDOUIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxRQUFRLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDMUMsWUFBQSxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUM7QUFDaEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxjQUFjLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDaEQsWUFBQSxJQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQyxjQUFjLENBQUM7QUFDNUMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxNQUFNLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDeEMsWUFBQSxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDNUIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxVQUFVLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDNUMsWUFBQSxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUM7QUFDcEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxNQUFNLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDeEMsWUFBQSxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDNUIsU0FBQTtLQUNGO0FBUUQsSUFBQSxJQUFXLEVBQUUsR0FBQTtBQUNYLFFBQUEsUUFBUSxJQUFJLENBQUMsR0FBRyxJQUFJLFNBQVMsRUFBWTtLQUMxQztJQUNELElBQVcsRUFBRSxDQUFDLFFBQWdCLEVBQUE7UUFDNUIsSUFBSSxRQUFRLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUU7QUFDekQsWUFBQSxNQUFNLElBQUksS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUM7QUFDeEMsU0FBQTtBQUNELFFBQUEsSUFBSSxDQUFDLEdBQUcsR0FBRyxRQUFRLENBQUM7S0FDckI7SUF3RU0sTUFBTSxHQUFBO1FBQ1gsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO0FBQ2IsUUFBQSxLQUFLLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUMvQyxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFO2dCQUMzQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxLQUFLO0FBQzFELGFBQUEsQ0FBQyxDQUFDO0FBQ0osU0FBQTtBQUNELFFBQUEsT0FBTyxHQUFHLENBQUM7S0FDWjtBQUNGLENBQUE7QUFFRDs7O0FBR0c7SUFDUyw2QkFNWDtBQU5ELENBQUEsVUFBWSw0QkFBNEIsRUFBQTtBQUN0QyxJQUFBLDRCQUFBLENBQUEsYUFBQSxDQUFBLEdBQUEsYUFBMkIsQ0FBQTtBQUMzQixJQUFBLDRCQUFBLENBQUEscUJBQUEsQ0FBQSxHQUFBLHNCQUE0QyxDQUFBO0FBQzVDLElBQUEsNEJBQUEsQ0FBQSxRQUFBLENBQUEsR0FBQSxRQUFpQixDQUFBO0FBQ2pCLElBQUEsNEJBQUEsQ0FBQSxVQUFBLENBQUEsR0FBQSxVQUFxQixDQUFBO0FBQ3JCLElBQUEsNEJBQUEsQ0FBQSxRQUFBLENBQUEsR0FBQSxRQUFpQixDQUFBO0FBQ25CLENBQUMsRUFOVyw0QkFBNEIsS0FBNUIsNEJBQTRCLEdBTXZDLEVBQUEsQ0FBQSxDQUFBLENBQUE7QUFDRDs7O0FBR0c7SUFDUyxtQ0FLWDtBQUxELENBQUEsVUFBWSxrQ0FBa0MsRUFBQTtBQUM1QyxJQUFBLGtDQUFBLENBQUEsYUFBQSxDQUFBLEdBQUEsYUFBMkIsQ0FBQTtBQUMzQixJQUFBLGtDQUFBLENBQUEsd0JBQUEsQ0FBQSxHQUFBLDBCQUFtRCxDQUFBO0FBQ25ELElBQUEsa0NBQUEsQ0FBQSxlQUFBLENBQUEsR0FBQSxlQUErQixDQUFBO0FBQy9CLElBQUEsa0NBQUEsQ0FBQSxTQUFBLENBQUEsR0FBQSxVQUFvQixDQUFBO0FBQ3RCLENBQUMsRUFMVyxrQ0FBa0MsS0FBbEMsa0NBQWtDLEdBSzdDLEVBQUEsQ0FBQSxDQUFBLENBQUE7QUFDRDs7O0FBR0c7SUFDUywyQkFhWDtBQWJELENBQUEsVUFBWSwwQkFBMEIsRUFBQTtBQUNwQyxJQUFBLDBCQUFBLENBQUEsS0FBQSxDQUFBLEdBQUEsS0FBVyxDQUFBO0FBQ1gsSUFBQSwwQkFBQSxDQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQVcsQ0FBQTtBQUNYLElBQUEsMEJBQUEsQ0FBQSxLQUFBLENBQUEsR0FBQSxLQUFXLENBQUE7QUFDWCxJQUFBLDBCQUFBLENBQUEsS0FBQSxDQUFBLEdBQUEsS0FBVyxDQUFBO0FBQ1gsSUFBQSwwQkFBQSxDQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQVcsQ0FBQTtBQUNYLElBQUEsMEJBQUEsQ0FBQSxLQUFBLENBQUEsR0FBQSxLQUFXLENBQUE7QUFDWCxJQUFBLDBCQUFBLENBQUEsS0FBQSxDQUFBLEdBQUEsS0FBVyxDQUFBO0FBQ1gsSUFBQSwwQkFBQSxDQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQVcsQ0FBQTtBQUNYLElBQUEsMEJBQUEsQ0FBQSxLQUFBLENBQUEsR0FBQSxLQUFXLENBQUE7QUFDWCxJQUFBLDBCQUFBLENBQUEsS0FBQSxDQUFBLEdBQUEsS0FBVyxDQUFBO0FBQ1gsSUFBQSwwQkFBQSxDQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQVcsQ0FBQTtBQUNYLElBQUEsMEJBQUEsQ0FBQSxLQUFBLENBQUEsR0FBQSxLQUFXLENBQUE7QUFDYixDQUFDLEVBYlcsMEJBQTBCLEtBQTFCLDBCQUEwQixHQWFyQyxFQUFBLENBQUEsQ0FBQSxDQUFBO0FBQ0Q7OztBQUdHO0lBQ1MsMkJBRVg7QUFGRCxDQUFBLFVBQVksMEJBQTBCLEVBQUE7QUFDcEMsSUFBQSwwQkFBQSxDQUFBLGtCQUFBLENBQUEsR0FBQSxtQkFBc0MsQ0FBQTtBQUN4QyxDQUFDLEVBRlcsMEJBQTBCLEtBQTFCLDBCQUEwQixHQUVyQyxFQUFBLENBQUEsQ0FBQSxDQUFBO0FBRUQ7Ozs7QUFJRzs7QUNoTkg7QUFDQTtBQUNBOzs7Ozs7Ozs7O0FBVUc7QUFPSDs7OztBQUlHO01BQ1UsdUJBQXVCLENBQUE7QUFDbEMsSUFBQSxXQUFBLENBQVksS0FBVyxFQUFBO0FBQ3JCLFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxFQUFFLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDcEMsWUFBQSxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDcEIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxTQUFTLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDM0MsWUFBQSxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUM7QUFDbEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxZQUFZLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDOUMsWUFBQSxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUM7QUFDeEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxjQUFjLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDaEQsWUFBQSxJQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQyxjQUFjLENBQUM7QUFDNUMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxTQUFTLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDM0MsWUFBQSxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUM7QUFDbEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxPQUFPLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDekMsWUFBQSxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7QUFDOUIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxRQUFRLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDMUMsWUFBQSxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUM7QUFDaEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxjQUFjLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDaEQsWUFBQSxJQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQyxjQUFjLENBQUM7QUFDNUMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxNQUFNLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDeEMsWUFBQSxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDNUIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxVQUFVLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDNUMsWUFBQSxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUM7QUFDcEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxNQUFNLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDeEMsWUFBQSxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDNUIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxLQUFLLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDdkMsWUFBQSxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7QUFDMUIsU0FBQTtLQUNGO0FBUUQsSUFBQSxJQUFXLEVBQUUsR0FBQTtBQUNYLFFBQUEsUUFBUSxJQUFJLENBQUMs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QyxjQUFjLENBQUM7QUFDNUMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxJQUFJLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDdEMsWUFBQSxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7QUFDeEIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxLQUFLLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDdkMsWUFBQSxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7QUFDMUIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxXQUFXLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDN0MsWUFBQSxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7QUFDdEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxPQUFPLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDekMsWUFBQSxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7QUFDOUIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxPQUFPLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDekMsWUFBQSxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7QUFD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QUwsS0FBSyxDQUFFLG1CQUFtQixDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3JELFlBQUEsSUFBSSxDQUFDLG1CQUFtQixHQUFHLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQztBQUN0RCxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLEdBQUcsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUNyQyxZQUFBLElBQUksQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQztBQUN0QixTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLE1BQU0sQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUN4QyxZQUFBLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztBQUM1QixTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLFdBQVcsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUM3QyxZQUFBLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQztBQUN0QyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLFFBQVEsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUMxQyxZQUFBLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQztBQUNoQyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLGVBQWUsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUNqRCxZQUFBLElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDLGVBQWUsQ0FBQztBQUM5QyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLFNBQVMsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUMzQyxZQUFBLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQztBQUNsQyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLGFBQWEsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUMvQyxZQUFBLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQztBQUMxQyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLGVBQWUsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUNqRCxZQUFBLElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDLGVBQWUsQ0FBQztBQUM5QyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLGVBQWUsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUNqRCxZQUFBLElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDLGVBQWUsQ0FBQztBQUM5QyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLGNBQWMsQ0FBQSxL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ZSxHQUFHLEtBQUssQ0FBQyxlQUFlLENBQUM7QUFDOUMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxZQUFZLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDOUMsWUFBQSxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUM7QUFDeEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxhQUFhLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDL0MsWUFBQSxJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUM7QUFDMUMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxTQUFTLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDM0MsWUFBQSxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUM7QUFDbEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxlQUFlLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDakQsWUFBQSxJQUFJLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQyxlQUFlLENBQUM7QUFDOUMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxLQUFLLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDdkMsWUFBQSxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FB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Q0FBQSxLQUFLLFdBQVcsRUFBRTtBQUM3QyxZQUFBLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQztBQUN0QyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLFFBQVEsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUMxQyxZQUFBLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQztBQUNoQyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLFNBQVMsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUMzQyxZQUFBLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQztBQUNsQyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLGVBQWUsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUNqRCxZQUFBLElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDLGVBQWUsQ0FBQztBQUM5QyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLFNBQVMsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUMzQyxZQUFBLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQztBQUNsQyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLEtBQUssQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUN2QyxZQUFBLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztBQUMxQixTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLFlBQVksQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUM5QyxZQUFBLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQztBQUN4QyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLGlCQUFpQixDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ25ELFlBQUEsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQztBQUNsRCxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLGVBQWUsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUNqRCxZQUFBLElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDLGVBQWUsQ0FBQztBQUM5QyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLGVBQWUsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUNqRCxZQUFBLElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDLGVBQWUsQ0FBQztBQUM5QyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLGVBQWUsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUNqRCxZQUFBLElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDLGVBQWUsQ0FBQztBQUM5QyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLEVBQUUsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUNwQyxZQUFBLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUNwQixTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLElBQUksQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUN0QyxZQUFBLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztBQUN4QixTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLElBQUksQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUN0QyxZQUFBLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztBQUN4QixTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLGFBQWEsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUMvQyxZQUFBLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQztBQUMxQyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLEtBQUssQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUN2QyxZQUFBLElBQUksQ0FB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WUFBQSxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7QUFDeEIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxNQUFNLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDeEMsWUFBQSxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDNUIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxRQUFRLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDMUMsWUFBQSxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUM7QUFDaEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxZQUFZLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDOUMsWUFBQSxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUM7QUFDeEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxLQUFLLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDdkMsWUFBQSxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7QUFDMUIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxXQUFXLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDN0MsWUFBQSxJQUFJLENBQUMs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QUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsT0FBTyxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3pDLFlBQUEsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDO0FBQzlCLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsWUFBWSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzlDLFlBQUEsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFDO0FBQ3hDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsY0FBYyxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ2hELFlBQUEsSUFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUMsY0FBYyxDQUFDO0FBQzVDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsWUFBWSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzlDLFlBQUEsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFDO0FBQ3hDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsSUFBSSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3RDLFlBQUEsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO0FBQ3hCLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtB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Y0FBYyxDQUFDO0FBQzVDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsSUFBSSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3RDLFlBQUEsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO0FBQ3hCLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsS0FBSyxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3ZDLFlBQUEsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDO0FBQzFCLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsV0FBVyxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzdDLFlBQUEsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDO0FBQ3RDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsT0FBTyxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3pDLFlBQUEsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDO0FBQzlCLFNBQUE7S0FDRjtJQW1ETSxNQUFNLEdBQUE7UUFDWCxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7QUFDYixRQUFBLEtBQUssTUFBTSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQy9DLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFD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SUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsRUFBRSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3BDLFlBQUEsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQ3BCLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsRUFBRSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3BDLFlBQUEsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQ3BCLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsSUFBSSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3RDLFlBQUEsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO0FBQ3hCLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsT0FBTyxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3pDLFlBQUEsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDO0FBQzlCLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsVUFBVSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzVDLFlBQUEsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDO0FBQ3BDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsSUFBSSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3RDLFlBQUEsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO0FBQ3hCLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsc0JBQXNCLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDeEQsWUFBQSxJQUFJLENBQUMsc0JBQXNCLEdBQUcsS0FBSyxDQUFDLHNCQUFzQixDQUFDO0FBQzVELFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsWUFBWSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzlDLFlBQUEsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFDO0FBQ3hDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsYUFBYSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQy9DLFlBQUEsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDO0FBQzFDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsT0FBTyxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3pDLFlBQUEsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDO0FBQzlCLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsaUJBQWlCLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDbkQsWUFBQSxJQUFJLENBQUMsaUJBQWlCLEdBQUcsS0FBSyxDQUFDLGlCQUFpQixDQUFDO0FBQ2xELFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsZ0JBQWdCLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDbEQsWUFBQSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLGdCQUFnQixDQUFDO0FBQ2hELFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUseUJBQXlCLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDM0QsWUFBQSxJQUFJLENBQUMseUJBQXlCLEdBQUcsS0FBSyxDQUFDLHlCQUF5QixDQUFDO0FBQ2xFLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsd0JBQXdCLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDMUQsWUFBQSxJQUFJLENBQUMsd0JBQXdCLEdBQUcsS0FBSyxDQUFDLHdCQUF3QixDQUFDO0FBQ2hFLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsZUFBZSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ2pELFlBQUEsSUFBSSxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUMsZUFBZSxDQUFDO0FBQzlDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsTUFBTSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3hDLFlBQUEsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO0FBQzVCLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsR0FBRyxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3JDLFlBQUEsSUFBSSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDO0FBQ3RCLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsV0FBVyxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzdDLFlBQUEsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDO0FBQ3RDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsUUFBUSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzFDLFlBQUEsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDO0FBQ2hDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsU0FBUyxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzNDLFlBQUEsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDO0FBQ2xDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEs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LElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLFdBQVcsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUM3QyxZQUFBLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQztBQUN0QyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLFFBQVEsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUMxQyxZQUFBLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQztBQUNoQyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLFNBQVMsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUMzQyxZQUFBLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQztBQUNsQyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLGVBQWUsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUNqRCxZQUFBLElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDLGVBQWUsQ0FBQztBQUM5QyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLFNBQVMsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUMzQyxZQUFBLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQztBQUNsQyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFL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QSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxLQUFLLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDdkMsWUFBQSxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7QUFDMUIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxJQUFJLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDdEMsWUFBQSxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7QUFDeEIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxNQUFNLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDeEMsWUFBQSxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDNUIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxZQUFZLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDOUMsWUFBQSxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUM7QUFDeEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxLQUFLLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDdkMsWUFBQSxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7QUFDMUIsU0FBQTtLQUNGO0lBbURNLE1BQU0sR0FBQTtRQUNYLElBQUksR0FBRyxHQUFHLEVB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QUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxLQUFLO0FBQzFELGFBQUEsQ0FBQyxDQUFDO0FBQ0osU0FBQTtBQUNELFFBQUEsT0FBTyxHQUFHLENBQUM7S0FDWjtBQUNGLENBQUE7QUFFRDs7OztBQUlHOztBQzFGSDtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7QUFVRztBQUlIOzs7O0FBSUc7TUFDVSxjQUFjLENBQUE7QUFDekIsSUFBQSxXQUFBLENBQVksS0FBVyxFQUFBO0FBQ3JCLFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxFQUFFLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDcEMsWUFBQSxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDcEIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxLQUFLLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDdkMsWUFBQSxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7QUFDMUIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxHQUFHLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDckMsWUFBQSxJQUFJLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUM7QUFDdEIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxNQUFNLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDeEMsWUFBQSxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUss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RCxDQUFDLEVBRlcsd0JBQXdCLEtBQXhCLHdCQUF3QixHQUVuQyxFQUFBLENBQUEsQ0FBQSxDQUFBO0FBRUQ7Ozs7QUFJRzs7QUN6Rkg7QUFDQTtBQUNBOzs7Ozs7Ozs7O0FBVUc7QUFTSDs7OztBQUlHO01BQ1UsVUFBVSxDQUFBO0FBQ3JCLElBQUEsV0FBQSxDQUFZLEtBQVcsRUFBQTtBQUNyQixRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsRUFBRSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3BDLFlBQUEsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQ3BCLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsRUFBRSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3BDLFlBQUEsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQ3BCLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsSUFBSSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3RDLFlBQUEsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO0FBQ3hCLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsSUFBSSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3RDLFlBQUEsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO0FBQ3hCLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsV0FBVyxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzdDLFlBQUEsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDO0FBQ3RDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsUUFBUSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzFDLFlBQUEsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDO0FBQ2hDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsU0FBUyxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzNDLFlBQUEsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDO0FBQ2xDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsZUFBZSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ2pELFlBQUEsSUFBSSxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUMsZUFBZSxDQUFDO0FBQzlDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsU0FBUyxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzNDLFlBQUEsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDO0FBQ2xDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsbUJBQW1CLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDckQsWUFBQSxJQUFJLENBQUMsbUJBQW1CLEdBQUcsS0FBSyxDQUFDLG1CQUFtQixDQUFDO0FBQ3RELFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsa0JBQWtCLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDcEQsWUFBQSxJQUFJLENBQUMsa0JBQWtCLEdBQUcsS0FBSyxDQUFDLGtCQUFrQixDQUFDO0FBQ3BELFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsMkJBQTJCLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDN0QsWUFBQSxJQUFJLENBQUMsMkJBQTJCLEdBQUcsS0FBSyxDQUFDLDJCQUEyQixDQUFDO0FBQ3RFLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsMEJBQTBCLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDNUQsWUFBQSxJQUFJLENBQUMsMEJBQTBCLEdBQUcsS0FBSyxDQUFDLDBCQUEwQixDQUFDO0FBQ3BFLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsTUFBTSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3hDLFlBQUEsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO0FBQzVCLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJ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QUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLElBQUksQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUN0QyxZQUFBLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztBQUN4QixTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLElBQUksQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUN0QyxZQUFBLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztBQUN4QixTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLFdBQVcsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUM3QyxZQUFBLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQztBQUN0QyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLFFBQVEsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUMxQyxZQUFBLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQztBQUNoQyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLFNBQVMsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUMzQyxZQUFBLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQztBQUNsQyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxD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SyxXQUFXLEVBQUU7QUFDdEMsWUFBQSxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7QUFDeEIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxLQUFLLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDdkMsWUFBQSxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7QUFDMUIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxRQUFRLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDMUMsWUFBQSxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUM7QUFDaEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxNQUFNLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDeEMsWUFBQSxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDNUIsU0FBQTtLQUNGO0lBcUNNLE1BQU0sR0FBQTtRQUNYLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztBQUNiLFFBQUEsS0FBSyxNQUFNLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDL0MsR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRTtnQkFDM0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxH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UUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsTUFBTSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3hDLFlBQUEsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO0FBQzVCLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsUUFBUSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzFDLFlBQUEsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDO0FBQ2hDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsWUFBWSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzlDLFlBQUEsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFDO0FBQ3hDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsS0FBSyxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3ZDLFlBQUEsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDO0FBQzFCLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsV0FBVyxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzdDLFlBQUEsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDO0FBQ3RDLFNBQUE7S0FDRjtBQXVCRCxJQUFBLElBQVcsYUFBYSxHQUFB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QUEsS0FBSyxXQUFXLEVBQUU7QUFDdEMsWUFBQSxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7QUFDeEIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxNQUFNLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDeEMsWUFBQSxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDNUIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxtQkFBbUIsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUNyRCxZQUFBLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxLQUFLLENBQUMsbUJBQW1CLENBQUM7QUFDdEQsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxlQUFlLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDakQsWUFBQSxJQUFJLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQyxlQUFlLENBQUM7QUFDOUMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxZQUFZLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDOUMsWUFBQSxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUM7QUFDeEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxhQUFhLENBQUEsS0FBSyxX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QUNBO0FBQ0E7Ozs7Ozs7Ozs7QUFVRztBQU1IOzs7O0FBSUc7TUFDVSxtQkFBbUIsQ0FBQTtBQUM5QixJQUFBLFdBQUEsQ0FBWSxLQUFXLEVBQUE7QUFDckIsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLElBQUksQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUN0QyxZQUFBLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztBQUN4QixTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLE1BQU0sQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUN4QyxZQUFBLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztBQUM1QixTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLFFBQVEsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUMxQyxZQUFBLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQztBQUNoQyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLFlBQVksQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUM5QyxZQUFBLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQztBQUN4QyxTQUFBO0FBQ0QsUUFBQSxJQUFJLFFBQU8sS0FBSyxLQUFBLElBQUEsSUFBTCxLQUFLLEtBQUEsS0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUwsS0FBSyxDQUFFLEtBQUssQ0FBQSxLQUFLLFdB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V0FBQSxDQUFZLEtBQVcsRUFBQTtBQUNyQixRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsSUFBSSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3RDLFlBQUEsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO0FBQ3hCLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsSUFBSSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3RDLFlBQUEsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO0FBQ3hCLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsT0FBTyxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3pDLFlBQUEsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDO0FBQzlCLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsUUFBUSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzFDLFlBQUEsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDO0FBQ2hDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsRUFBRSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3BDLFlBQUEsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQ3BC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Q0FBQSxHQUFMLEtBQUssQ0FBRSxPQUFPLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDekMsWUFBQSxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7QUFDOUIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxRQUFRLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDMUMsWUFBQSxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUM7QUFDaEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxFQUFFLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDcEMsWUFBQSxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDcEIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxJQUFJLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDdEMsWUFBQSxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7QUFDeEIsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxZQUFZLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDOUMsWUFBQSxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUM7QUFDeEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUss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OztBQUlHOztBQ3BDSDtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7QUFVRztBQVFIOzs7O0FBSUc7TUFDVSxlQUFlLENBQUE7QUFDMUIsSUFBQSxXQUFBLENBQVksS0FBVyxFQUFBO0FBQ3JCLFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxnQkFBZ0IsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUNsRCxZQUFBLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsZ0JBQWdCLENBQUM7QUFDaEQsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSw0QkFBNEIsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUM5RCxZQUFBLElBQUksQ0FBQyw0QkFBNEIsR0FBRyxLQUFLLENBQUMsNEJBQTRCLENBQUM7QUFDeEUsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSw0QkFBNEIsQ0FBQSxLQUFLLFdBQVcsRUFBRTtBQUM5RCxZQUFBLElBQUksQ0FBQyw0QkFBNEIsR0FBRyxLQUFLLENBQUMsNEJBQTRCLENBQUM7QUFDeEUsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxRQUFRLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDMUMsWUFBQSxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUM7QUFDaEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxH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NUQsWUFBQSxJQUFJLENBQUMsMEJBQTBCLEdBQUcsS0FBSyxDQUFDLDBCQUEwQixDQUFDO0FBQ3BFLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsc0JBQXNCLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDeEQsWUFBQSxJQUFJLENBQUMsc0JBQXNCLEdBQUcsS0FBSyxDQUFDLHNCQUFzQixDQUFDO0FBQzVELFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsSUFBSSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3RDLFlBQUEsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO0FBQ3hCLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsS0FBSyxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3ZDLFlBQUEsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDO0FBQzFCLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsUUFBUSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzFDLFlBQUEsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDO0FBQ2hDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsZUFBZSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ2pELFlBQUEsSUFBSSxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUMsZUFBZSxDQUFDO0FBQzlDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsYUFBYSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQy9DLFlBQUEsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDO0FBQzFDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsc0JBQXNCLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDeEQsWUFBQSxJQUFJLENBQUMsc0JBQXNCLEdBQUcsS0FBSyxDQUFDLHNCQUFzQixDQUFDO0FBQzVELFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsWUFBWSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzlDLFlBQUEsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFDO0FBQ3hDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsV0FBVyxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzdDLFlBQUEsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDO0FBQ3RDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsd0JBQXdCLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDMUQsWUFBQSxJQUFJ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SyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxTQUFTLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDM0MsWUFBQSxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUM7QUFDbEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxZQUFZLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDOUMsWUFBQSxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUM7QUFDeEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxjQUFjLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDaEQsWUFBQSxJQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQyxjQUFjLENBQUM7QUFDNUMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxZQUFZLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDOUMsWUFBQSxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUM7QUFDeEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxHQUFMLEtBQUssQ0FBRSxTQUFTLENBQUEsS0FBSyxXQUFXLEVBQUU7QUFDM0MsWUFBQSxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUM7QUFDbEMsU0FBQTtBQUNELFFBQUEsSUFBSSxRQUFPLEtBQUssS0FBQSxJQUFBLElBQUwsS0FBSyxLQUFBLEtBQUEsQ0FB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QUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsU0FBUyxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzNDLFlBQUEsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDO0FBQ2xDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsWUFBWSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzlDLFlBQUEsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFDO0FBQ3hDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsY0FBYyxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ2hELFlBQUEsSUFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUMsY0FBYyxDQUFDO0FBQzVDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsWUFBWSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzlDLFlBQUEsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFDO0FBQ3hDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsU0FBUyxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzNDLFlBQUEsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDO0FBQ2xDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJ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QUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsWUFBWSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzlDLFlBQUEsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFDO0FBQ3hDLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsSUFBSSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3RDLFlBQUEsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO0FBQ3hCLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsS0FBSyxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQ3ZDLFlBQUEsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDO0FBQzFCLFNBQUE7QUFDRCxRQUFBLElBQUksUUFBTyxLQUFLLEtBQUEsSUFBQSxJQUFMLEtBQUssS0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsR0FBTCxLQUFLLENBQUUsUUFBUSxDQUFBLEtBQUssV0FBVyxFQUFFO0FBQzFDLFlBQUEsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDO0FBQ2hDLFNBQUE7S0FDRjtBQXlERCxJQUFBLElBQVcsUUFBUSxHQUFBO0FBQ2pCLFFBQUEsUUFBUSxJQUFJLENBQUMsU0FBUyxJQUFJLFNBQVMsRUFBWTtLQUNoRDtJQUNELElBQVcsUUFBUSxDQUFDLFFBQWdCLEVBQUE7UUFDbEMsSUFBSSxRQUFRLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUU7QUFDckQsWUFBQSxN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
